DC-Build-Header: eurephia 1.1.0-5 / 2016-08-29 16:31:14 +0000
DC-Task: type:rebuild-binarch-only source:eurephia version:1.1.0-5 chroot:unstable esttime:440 logfile:/tmp/eurephia_1.1.0-5_unstable_clang3.8.log modes:clang:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v  --chroot-setup-commands=/tmp/clang eurephia_1.1.0-5'
sbuild (Debian sbuild) 0.70.0 (03 Aug 2016) on ip-172-31-10-98.eu-central-1.compute.internal

+==============================================================================+
| eurephia 1.1.0-5 (amd64)                     Mon, 29 Aug 2016 16:31:14 +0000 |
+==============================================================================+

Package: eurephia
Version: 1.1.0-5
Source Version: 1.1.0-5
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64

I: NOTICE: Log filtering will replace 'var/lib/schroot/mount/unstable-amd64-sbuild-309e0883-4d71-492d-995e-d68c0b57f1e7' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang
----------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=3.8
+ echo 'Install of clang-3.8'
Install of clang-3.8
+ apt-get update
Get:1 http://127.0.0.1:9999/debian unstable InRelease [209 kB]
Get:2 http://127.0.0.1:9999/debian unstable/main Sources.diff/Index [27.9 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main amd64 Packages.diff/Index [27.9 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main Translation-en [5451 kB]
Get:5 http://127.0.0.1:9999/debian unstable/main Sources 2016-08-29-0319.00.pdiff [16.7 kB]
Get:6 http://127.0.0.1:9999/debian unstable/main Sources 2016-08-29-0916.07.pdiff [5442 B]
Get:6 http://127.0.0.1:9999/debian unstable/main Sources 2016-08-29-0916.07.pdiff [5442 B]
Get:7 http://127.0.0.1:9999/debian unstable/main amd64 Packages 2016-08-29-0319.00.pdiff [13.2 kB]
Get:8 http://127.0.0.1:9999/debian unstable/main amd64 Packages 2016-08-29-0916.07.pdiff [3300 B]
Get:8 http://127.0.0.1:9999/debian unstable/main amd64 Packages 2016-08-29-0916.07.pdiff [3300 B]
Fetched 5755 kB in 3s (1579 kB/s)
Reading package lists...
W: No sandbox user '_apt' on the system, can not drop privileges
+ apt-get install --yes --no-install-recommends --force-yes clang-3.8
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  libbsd0 libclang-common-3.8-dev libclang1-3.8 libedit2 libffi6 libllvm3.8
  libobjc-6-dev libobjc4
Suggested packages:
  gnustep gnustep-devel clang-3.8-doc
Recommended packages:
  llvm-3.8-dev python
The following NEW packages will be installed:
  clang-3.8 libbsd0 libclang-common-3.8-dev libclang1-3.8 libedit2 libffi6
  libllvm3.8 libobjc-6-dev libobjc4
0 upgraded, 9 newly installed, 0 to remove and 1 not upgraded.
Need to get 38.3 MB of archives.
After this operation, 162 MB of additional disk space will be used.
Get:1 http://127.0.0.1:9999/debian unstable/main amd64 libbsd0 amd64 0.8.3-1 [83.0 kB]
Get:2 http://127.0.0.1:9999/debian unstable/main amd64 libedit2 amd64 3.1-20150325-1+b1 [85.2 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main amd64 libffi6 amd64 3.2.1-4 [20.4 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main amd64 libllvm3.8 amd64 1:3.8.1-9 [10.3 MB]
Get:5 http://127.0.0.1:9999/debian unstable/main amd64 libobjc4 amd64 6.2.0-1 [110 kB]
Get:6 http://127.0.0.1:9999/debian unstable/main amd64 libobjc-6-dev amd64 6.2.0-1 [394 kB]
Get:7 http://127.0.0.1:9999/debian unstable/main amd64 libclang1-3.8 amd64 1:3.8.1-9 [4188 kB]
Get:8 http://127.0.0.1:9999/debian unstable/main amd64 libclang-common-3.8-dev amd64 1:3.8.1-9 [1477 kB]
Get:9 http://127.0.0.1:9999/debian unstable/main amd64 clang-3.8 amd64 1:3.8.1-9 [21.6 MB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 38.3 MB in 2s (18.6 MB/s)
Selecting previously unselected package libbsd0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 9446 files and directories currently installed.)
Preparing to unpack .../0-libbsd0_0.8.3-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.8.3-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../1-libedit2_3.1-20150325-1+b1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20150325-1+b1) ...
Selecting previously unselected package libffi6:amd64.
Preparing to unpack .../2-libffi6_3.2.1-4_amd64.deb ...
Unpacking libffi6:amd64 (3.2.1-4) ...
Selecting previously unselected package libllvm3.8:amd64.
Preparing to unpack .../3-libllvm3.8_1%3a3.8.1-9_amd64.deb ...
Unpacking libllvm3.8:amd64 (1:3.8.1-9) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../4-libobjc4_6.2.0-1_amd64.deb ...
Unpacking libobjc4:amd64 (6.2.0-1) ...
Selecting previously unselected package libobjc-6-dev:amd64.
Preparing to unpack .../5-libobjc-6-dev_6.2.0-1_amd64.deb ...
Unpacking libobjc-6-dev:amd64 (6.2.0-1) ...
Selecting previously unselected package libclang1-3.8:amd64.
Preparing to unpack .../6-libclang1-3.8_1%3a3.8.1-9_amd64.deb ...
Unpacking libclang1-3.8:amd64 (1:3.8.1-9) ...
Selecting previously unselected package libclang-common-3.8-dev.
Preparing to unpack .../7-libclang-common-3.8-dev_1%3a3.8.1-9_amd64.deb ...
Unpacking libclang-common-3.8-dev (1:3.8.1-9) ...
Selecting previously unselected package clang-3.8.
Preparing to unpack .../8-clang-3.8_1%3a3.8.1-9_amd64.deb ...
Unpacking clang-3.8 (1:3.8.1-9) ...
Setting up libobjc4:amd64 (6.2.0-1) ...
Setting up libbsd0:amd64 (0.8.3-1) ...
Processing triggers for libc-bin (2.23-5) ...
Setting up libobjc-6-dev:amd64 (6.2.0-1) ...
Setting up libffi6:amd64 (3.2.1-4) ...
Setting up libedit2:amd64 (3.1-20150325-1+b1) ...
Setting up libllvm3.8:amd64 (1:3.8.1-9) ...
Setting up libclang-common-3.8-dev (1:3.8.1-9) ...
Setting up libclang1-3.8:amd64 (1:3.8.1-9) ...
Setting up clang-3.8 (1:3.8.1-9) ...
Processing triggers for libc-bin (2.23-5) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
W: No sandbox user '_apt' on the system, can not drop privileges
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6'
+ cd /usr/bin
+ for VERSION in '$VERSIONS'
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-3.8 g++-4.6
+ ln -s clang-3.8 gcc-4.6
+ ln -s clang-3.8 cpp-4.6
+ ln -s clang-3.8 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ for VERSION in '$VERSIONS'
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-3.8 g++-4.7
+ ln -s clang-3.8 gcc-4.7
+ ln -s clang-3.8 cpp-4.7
+ ln -s clang-3.8 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ for VERSION in '$VERSIONS'
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-3.8 g++-4.8
+ ln -s clang-3.8 gcc-4.8
+ ln -s clang-3.8 cpp-4.8
+ ln -s clang-3.8 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ for VERSION in '$VERSIONS'
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-3.8 g++-4.9
+ ln -s clang-3.8 gcc-4.9
+ ln -s clang-3.8 cpp-4.9
+ ln -s clang-3.8 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method
+ for VERSION in '$VERSIONS'
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-3.8 g++-5
+ ln -s clang-3.8 gcc-5
+ ln -s clang-3.8 cpp-5
+ ln -s clang-3.8 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
+ echo 'g++-5 hold'
+ dpkg --set-selections
+ for VERSION in '$VERSIONS'
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-3.8 g++-6
+ ln -s clang-3.8 gcc-6
+ ln -s clang-3.8 cpp-6
+ ln -s clang-3.8 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
+ echo 'g++-6 hold'
+ dpkg --set-selections
+ cd -
/build/eurephia-jjJcLU
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang

I: Finished running '/tmp/clang'.

Finished processing commands.
--------------------------------------------------------------------------------

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:9999/debian unstable InRelease
Reading package lists...
W: No sandbox user '_apt' on the system, can not drop privileges
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  linux-libc-dev
1 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1158 kB of archives.
After this operation, 60.4 kB of additional disk space will be used.
Get:1 http://127.0.0.1:9999/debian unstable/main amd64 linux-libc-dev amd64 4.7.2-1 [1158 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1158 kB in 0s (70.2 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 9769 files and directories currently installed.)
Preparing to unpack .../linux-libc-dev_4.7.2-1_amd64.deb ...
Unpacking linux-libc-dev:amd64 (4.7.2-1) over (4.6.4-1) ...
Setting up linux-libc-dev:amd64 (4.7.2-1) ...
W: No sandbox user '_apt' on the system, can not drop privileges

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
Need to get 165 kB of source archives.
Get:1 http://127.0.0.1:9999/debian unstable/main eurephia 1.1.0-5 (dsc) [1780 B]
Get:2 http://127.0.0.1:9999/debian unstable/main eurephia 1.1.0-5 (tar) [158 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main eurephia 1.1.0-5 (diff) [5076 B]
Fetched 165 kB in 0s (1180 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/eurephia-jjJcLU/eurephia-1.1.0' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/eurephia-jjJcLU' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install build-essential                                                      |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: build-essential, fakeroot
Filtered Build-Depends: build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-core-dummy' in '/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive/sbuild-build-depends-core-dummy.deb'.
dpkg-scanpackages: warning: Packages in archive but missing from override file:
dpkg-scanpackages: warning:   sbuild-build-depends-core-dummy
dpkg-scanpackages: info: Wrote 1 entries to output Packages file.
Ign:1 copy:/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive ./ InRelease
Get:2 copy:/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive ./ Release [957 B]
Ign:3 copy:/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive ./ Release.gpg
Get:4 copy:/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive ./ Sources [349 B]
Get:5 copy:/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive ./ Packages [432 B]
Fetched 1738 B in 0s (0 B/s)
Reading package lists...
W: No sandbox user '_apt' on the system, can not drop privileges
Reading package lists...

Install core build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sbuild-build-depends-core-dummy
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 774 B of archives.
After this operation, 0 B of additional disk space will be used.
Get:1 copy:/<<BUILDDIR>>/resolver-6Cy5wA/apt_archive ./ sbuild-build-depends-core-dummy 0.invalid.0 [774 B]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 774 B in 0s (0 B/s)
Selecting previously unselected package sbuild-build-depends-core-dummy.
(Reading database ... 9775 files and directories currently installed.)
Preparing to unpack .../sbuild-build-depends-core-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-core-dummy (0.invalid.0) ...
Setting up sbuild-build-depends-core-dummy (0.invalid.0) ...
W: No sandbox user '_apt' on the system, can not drop privileges

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any)

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config
Filtered Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config
dpkg-deb: building package 'sbuild-build-depends-eurephia-dummy' in '/<<BUILDDIR>>/resolver-I8JSXG/apt_archive/sbuild-build-depends-eurephia-dummy.deb'.
dpkg-scanpackages: warning: Packages in archive but missing from override file:
dpkg-scanpackages: warning:   sbuild-build-depends-eurephia-dummy
dpkg-scanpackages: info: Wrote 1 entries to output Packages file.
Ign:1 copy:/<<BUILDDIR>>/resolver-I8JSXG/apt_archive ./ InRelease
Get:2 copy:/<<BUILDDIR>>/resolver-I8JSXG/apt_archive ./ Release [957 B]
Ign:3 copy:/<<BUILDDIR>>/resolver-I8JSXG/apt_archive ./ Release.gpg
Get:4 copy:/<<BUILDDIR>>/resolver-I8JSXG/apt_archive ./ Sources [391 B]
Get:5 copy:/<<BUILDDIR>>/resolver-I8JSXG/apt_archive ./ Packages [479 B]
Fetched 1827 B in 0s (0 B/s)
Reading package lists...
W: No sandbox user '_apt' on the system, can not drop privileges
Reading package lists...

Install eurephia build dependencies (apt-based resolver)
--------------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils cmake cmake-data
  debhelper dh-autoreconf dh-strip-nondeterminism file gettext gettext-base
  groff-base icu-devtools intltool-debian iproute2 libarchive-zip-perl
  libarchive13 libcroco3 libcurl3 libelf1 libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libgnutls30 libgssapi-krb5-2
  libhogweed4 libicu-dev libicu57 libidn11 libjsoncpp1 libk5crypto3
  libkeyutils1 libkrb5-3 libkrb5support0 libldap-2.4-2 liblzo2-2 libmagic-mgc
  libmagic1 libmnl0 libnettle6 libnghttp2-14 libp11-kit0 libpipeline1
  libpkcs11-helper1 libprocps6 librtmp1 libsasl2-2 libsasl2-modules-db
  libsigsegv2 libsqlite3-0 libsqlite3-dev libssh2-1 libssl-dev libssl1.0.2
  libtasn1-6 libtimedate-perl libtool libunistring0 libxml2 libxml2-dev
  libxslt1-dev libxslt1.1 lsb-base m4 man-db openvpn pkg-config po-debconf
  procps zlib1g-dev
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc wamerican | wordlist whois
  vacation codeblocks eclipse ninja-build dh-make gettext-doc libasprintf-dev
  libgettextpo-dev groff iproute2-doc lrzip gnutls-bin krb5-doc krb5-user
  icu-doc sqlite3-doc libtool-doc gfortran | fortran95-compiler gcj-jdk less
  www-browser openssl resolvconf libmail-box-perl
Recommended packages:
  curl | wget | lynx-cur libatm1 libxtables11 ca-certificates libglib2.0-data
  shared-mime-info xdg-user-dirs krb5-locales libsasl2-modules libssl-doc
  libltdl-dev xml-core easy-rsa libmail-sendmail-perl psmisc
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils cmake cmake-data
  debhelper dh-autoreconf dh-strip-nondeterminism file gettext gettext-base
  groff-base icu-devtools intltool-debian iproute2 libarchive-zip-perl
  libarchive13 libcroco3 libcurl3 libelf1 libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libgnutls30 libgssapi-krb5-2
  libhogweed4 libicu-dev libicu57 libidn11 libjsoncpp1 libk5crypto3
  libkeyutils1 libkrb5-3 libkrb5support0 libldap-2.4-2 liblzo2-2 libmagic-mgc
  libmagic1 libmnl0 libnettle6 libnghttp2-14 libp11-kit0 libpipeline1
  libpkcs11-helper1 libprocps6 librtmp1 libsasl2-2 libsasl2-modules-db
  libsigsegv2 libsqlite3-0 libsqlite3-dev libssh2-1 libssl-dev libssl1.0.2
  libtasn1-6 libtimedate-perl libtool libunistring0 libxml2 libxml2-dev
  libxslt1-dev libxslt1.1 lsb-base m4 man-db openvpn pkg-config po-debconf
  procps sbuild-build-depends-eurephia-dummy zlib1g-dev
0 upgraded, 73 newly installed, 0 to remove and 0 not upgraded.
Need to get 51.2 MB of archives.
After this operation, 216 MB of additional disk space will be used.
Get:1 copy:/<<BUILDDIR>>/resolver-I8JSXG/apt_archive ./ sbuild-build-depends-eurephia-dummy 0.invalid.0 [824 B]
Get:2 http://127.0.0.1:9999/debian unstable/main amd64 groff-base amd64 1.22.3-8 [1162 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main amd64 bsdmainutils amd64 9.0.10 [184 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main amd64 libpipeline1 amd64 1.4.1-2 [27.6 kB]
Get:5 http://127.0.0.1:9999/debian unstable/main amd64 man-db amd64 2.7.5-1 [1003 kB]
Get:6 http://127.0.0.1:9999/debian unstable/main amd64 cmake-data all 3.6.1-1 [1152 kB]
Get:7 http://127.0.0.1:9999/debian unstable/main amd64 libprocps6 amd64 2:3.3.12-2 [57.7 kB]
Get:8 http://127.0.0.1:9999/debian unstable/main amd64 lsb-base all 9.20160629 [27.6 kB]
Get:9 http://127.0.0.1:9999/debian unstable/main amd64 procps amd64 2:3.3.12-2 [250 kB]
Get:10 http://127.0.0.1:9999/debian unstable/main amd64 liblzo2-2 amd64 2.08-1.2 [54.6 kB]
Get:11 http://127.0.0.1:9999/debian unstable/main amd64 libnettle6 amd64 3.2-1 [191 kB]
Get:12 http://127.0.0.1:9999/debian unstable/main amd64 libicu57 amd64 57.1-3 [7676 kB]
Get:13 http://127.0.0.1:9999/debian unstable/main amd64 libxml2 amd64 2.9.4+dfsg1-1+b1 [919 kB]
Get:14 http://127.0.0.1:9999/debian unstable/main amd64 libarchive13 amd64 3.2.1-2 [288 kB]
Get:15 http://127.0.0.1:9999/debian unstable/main amd64 libkeyutils1 amd64 1.5.9-9 [12.4 kB]
Get:16 http://127.0.0.1:9999/debian unstable/main amd64 libkrb5support0 amd64 1.14.3+dfsg-1 [61.0 kB]
Get:17 http://127.0.0.1:9999/debian unstable/main amd64 libk5crypto3 amd64 1.14.3+dfsg-1 [115 kB]
Get:18 http://127.0.0.1:9999/debian unstable/main amd64 libkrb5-3 amd64 1.14.3+dfsg-1 [311 kB]
Get:19 http://127.0.0.1:9999/debian unstable/main amd64 libgssapi-krb5-2 amd64 1.14.3+dfsg-1 [154 kB]
Get:20 http://127.0.0.1:9999/debian unstable/main amd64 libidn11 amd64 1.33-1 [115 kB]
Get:21 http://127.0.0.1:9999/debian unstable/main amd64 libhogweed4 amd64 3.2-1 [136 kB]
Get:22 http://127.0.0.1:9999/debian unstable/main amd64 libp11-kit0 amd64 0.23.2-5 [111 kB]
Get:23 http://127.0.0.1:9999/debian unstable/main amd64 libtasn1-6 amd64 4.9-4 [50.0 kB]
Get:24 http://127.0.0.1:9999/debian unstable/main amd64 libgnutls30 amd64 3.5.3-3 [801 kB]
Get:25 http://127.0.0.1:9999/debian unstable/main amd64 libsasl2-modules-db amd64 2.1.26.dfsg1-15 [66.9 kB]
Get:26 http://127.0.0.1:9999/debian unstable/main amd64 libsasl2-2 amd64 2.1.26.dfsg1-15 [103 kB]
Get:27 http://127.0.0.1:9999/debian unstable/main amd64 libldap-2.4-2 amd64 2.4.42+dfsg-2+b2 [222 kB]
Get:28 http://127.0.0.1:9999/debian unstable/main amd64 libnghttp2-14 amd64 1.13.0-1 [79.4 kB]
Get:29 http://127.0.0.1:9999/debian unstable/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-1 [60.0 kB]
Get:30 http://127.0.0.1:9999/debian unstable/main amd64 libssh2-1 amd64 1.7.0-1 [138 kB]
Get:31 http://127.0.0.1:9999/debian unstable/main amd64 libssl1.0.2 amd64 1.0.2h-1 [1287 kB]
Get:32 http://127.0.0.1:9999/debian unstable/main amd64 libcurl3 amd64 7.50.1-1 [280 kB]
Get:33 http://127.0.0.1:9999/debian unstable/main amd64 libexpat1 amd64 2.2.0-1 [82.0 kB]
Get:34 http://127.0.0.1:9999/debian unstable/main amd64 libjsoncpp1 amd64 1.7.4-3 [75.6 kB]
Get:35 http://127.0.0.1:9999/debian unstable/main amd64 cmake amd64 3.6.1-1 [2736 kB]
Get:36 http://127.0.0.1:9999/debian unstable/main amd64 libelf1 amd64 0.166-2 [172 kB]
Get:37 http://127.0.0.1:9999/debian unstable/main amd64 libmnl0 amd64 1.0.4-1 [12.0 kB]
Get:38 http://127.0.0.1:9999/debian unstable/main amd64 iproute2 amd64 4.6.0-4 [580 kB]
Get:39 http://127.0.0.1:9999/debian unstable/main amd64 libmagic-mgc amd64 1:5.28-4 [210 kB]
Get:40 http://127.0.0.1:9999/debian unstable/main amd64 libmagic1 amd64 1:5.28-4 [109 kB]
Get:41 http://127.0.0.1:9999/debian unstable/main amd64 file amd64 1:5.28-4 [62.9 kB]
Get:42 http://127.0.0.1:9999/debian unstable/main amd64 gettext-base amd64 0.19.8.1-1 [121 kB]
Get:43 http://127.0.0.1:9999/debian unstable/main amd64 libsqlite3-0 amd64 3.14.1-1 [559 kB]
Get:44 http://127.0.0.1:9999/debian unstable/main amd64 libsigsegv2 amd64 2.10-5 [28.9 kB]
Get:45 http://127.0.0.1:9999/debian unstable/main amd64 m4 amd64 1.4.17-5 [255 kB]
Get:46 http://127.0.0.1:9999/debian unstable/main amd64 autoconf all 2.69-10 [338 kB]
Get:47 http://127.0.0.1:9999/debian unstable/main amd64 autotools-dev all 20160430.1 [72.6 kB]
Get:48 http://127.0.0.1:9999/debian unstable/main amd64 automake all 1:1.15-4 [735 kB]
Get:49 http://127.0.0.1:9999/debian unstable/main amd64 autopoint all 0.19.8.1-1 [433 kB]
Get:50 http://127.0.0.1:9999/debian unstable/main amd64 libglib2.0-0 amd64 2.48.1-3 [2707 kB]
Get:51 http://127.0.0.1:9999/debian unstable/main amd64 libcroco3 amd64 0.6.11-1 [143 kB]
Get:52 http://127.0.0.1:9999/debian unstable/main amd64 libunistring0 amd64 0.9.6+really0.9.3-0.1 [279 kB]
Get:53 http://127.0.0.1:9999/debian unstable/main amd64 gettext amd64 0.19.8.1-1 [1493 kB]
Get:54 http://127.0.0.1:9999/debian unstable/main amd64 intltool-debian all 0.35.0+20060710.4 [26.3 kB]
Get:55 http://127.0.0.1:9999/debian unstable/main amd64 po-debconf all 1.0.19 [249 kB]
Get:56 http://127.0.0.1:9999/debian unstable/main amd64 libarchive-zip-perl all 1.59-1 [95.5 kB]
Get:57 http://127.0.0.1:9999/debian unstable/main amd64 libfile-stripnondeterminism-perl all 0.023-2 [13.4 kB]
Get:58 http://127.0.0.1:9999/debian unstable/main amd64 libtimedate-perl all 2.3000-2 [42.2 kB]
Get:59 http://127.0.0.1:9999/debian unstable/main amd64 dh-strip-nondeterminism all 0.023-2 [8202 B]
Get:60 http://127.0.0.1:9999/debian unstable/main amd64 libtool all 2.4.6-2 [545 kB]
Get:61 http://127.0.0.1:9999/debian unstable/main amd64 dh-autoreconf all 12 [15.8 kB]
Get:62 http://127.0.0.1:9999/debian unstable/main amd64 debhelper all 9.20160814 [800 kB]
Get:63 http://127.0.0.1:9999/debian unstable/main amd64 icu-devtools amd64 57.1-3 [172 kB]
Get:64 http://127.0.0.1:9999/debian unstable/main amd64 libicu-dev amd64 57.1-3 [16.3 MB]
Get:65 http://127.0.0.1:9999/debian unstable/main amd64 libpkcs11-helper1 amd64 1.11-5 [45.9 kB]
Get:66 http://127.0.0.1:9999/debian unstable/main amd64 libsqlite3-dev amd64 3.14.1-1 [689 kB]
Get:67 http://127.0.0.1:9999/debian unstable/main amd64 zlib1g-dev amd64 1:1.2.8.dfsg-2+b1 [206 kB]
Get:68 http://127.0.0.1:9999/debian unstable/main amd64 libssl-dev amd64 1.0.2h-1 [1544 kB]
Get:69 http://127.0.0.1:9999/debian unstable/main amd64 libxml2-dev amd64 2.9.4+dfsg1-1+b1 [812 kB]
Get:70 http://127.0.0.1:9999/debian unstable/main amd64 libxslt1.1 amd64 1.1.29-1 [233 kB]
Get:71 http://127.0.0.1:9999/debian unstable/main amd64 libxslt1-dev amd64 1.1.29-1 [513 kB]
Get:72 http://127.0.0.1:9999/debian unstable/main amd64 openvpn amd64 2.3.11-2 [498 kB]
Get:73 http://127.0.0.1:9999/debian unstable/main amd64 pkg-config amd64 0.29-4 [62.5 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 51.2 MB in 0s (83.7 MB/s)
Selecting previously unselected package groff-base.
(Reading database ... 9775 files and directories currently installed.)
Preparing to unpack .../00-groff-base_1.22.3-8_amd64.deb ...
Unpacking groff-base (1.22.3-8) ...
Selecting previously unselected package bsdmainutils.
Preparing to unpack .../01-bsdmainutils_9.0.10_amd64.deb ...
Unpacking bsdmainutils (9.0.10) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../02-libpipeline1_1.4.1-2_amd64.deb ...
Unpacking libpipeline1:amd64 (1.4.1-2) ...
Selecting previously unselected package man-db.
Preparing to unpack .../03-man-db_2.7.5-1_amd64.deb ...
Unpacking man-db (2.7.5-1) ...
Selecting previously unselected package cmake-data.
Preparing to unpack .../04-cmake-data_3.6.1-1_all.deb ...
Unpacking cmake-data (3.6.1-1) ...
Selecting previously unselected package libprocps6:amd64.
Preparing to unpack .../05-libprocps6_2%3a3.3.12-2_amd64.deb ...
Unpacking libprocps6:amd64 (2:3.3.12-2) ...
Selecting previously unselected package lsb-base.
Preparing to unpack .../06-lsb-base_9.20160629_all.deb ...
Unpacking lsb-base (9.20160629) ...
Selecting previously unselected package procps.
Preparing to unpack .../07-procps_2%3a3.3.12-2_amd64.deb ...
Unpacking procps (2:3.3.12-2) ...
Selecting previously unselected package liblzo2-2:amd64.
Preparing to unpack .../08-liblzo2-2_2.08-1.2_amd64.deb ...
Unpacking liblzo2-2:amd64 (2.08-1.2) ...
Selecting previously unselected package libnettle6:amd64.
Preparing to unpack .../09-libnettle6_3.2-1_amd64.deb ...
Unpacking libnettle6:amd64 (3.2-1) ...
Selecting previously unselected package libicu57:amd64.
Preparing to unpack .../10-libicu57_57.1-3_amd64.deb ...
Unpacking libicu57:amd64 (57.1-3) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../11-libxml2_2.9.4+dfsg1-1+b1_amd64.deb ...
Unpacking libxml2:amd64 (2.9.4+dfsg1-1+b1) ...
Selecting previously unselected package libarchive13:amd64.
Preparing to unpack .../12-libarchive13_3.2.1-2_amd64.deb ...
Unpacking libarchive13:amd64 (3.2.1-2) ...
Selecting previously unselected package libkeyutils1:amd64.
Preparing to unpack .../13-libkeyutils1_1.5.9-9_amd64.deb ...
Unpacking libkeyutils1:amd64 (1.5.9-9) ...
Selecting previously unselected package libkrb5support0:amd64.
Preparing to unpack .../14-libkrb5support0_1.14.3+dfsg-1_amd64.deb ...
Unpacking libkrb5support0:amd64 (1.14.3+dfsg-1) ...
Selecting previously unselected package libk5crypto3:amd64.
Preparing to unpack .../15-libk5crypto3_1.14.3+dfsg-1_amd64.deb ...
Unpacking libk5crypto3:amd64 (1.14.3+dfsg-1) ...
Selecting previously unselected package libkrb5-3:amd64.
Preparing to unpack .../16-libkrb5-3_1.14.3+dfsg-1_amd64.deb ...
Unpacking libkrb5-3:amd64 (1.14.3+dfsg-1) ...
Selecting previously unselected package libgssapi-krb5-2:amd64.
Preparing to unpack .../17-libgssapi-krb5-2_1.14.3+dfsg-1_amd64.deb ...
Unpacking libgssapi-krb5-2:amd64 (1.14.3+dfsg-1) ...
Selecting previously unselected package libidn11:amd64.
Preparing to unpack .../18-libidn11_1.33-1_amd64.deb ...
Unpacking libidn11:amd64 (1.33-1) ...
Selecting previously unselected package libhogweed4:amd64.
Preparing to unpack .../19-libhogweed4_3.2-1_amd64.deb ...
Unpacking libhogweed4:amd64 (3.2-1) ...
Selecting previously unselected package libp11-kit0:amd64.
Preparing to unpack .../20-libp11-kit0_0.23.2-5_amd64.deb ...
Unpacking libp11-kit0:amd64 (0.23.2-5) ...
Selecting previously unselected package libtasn1-6:amd64.
Preparing to unpack .../21-libtasn1-6_4.9-4_amd64.deb ...
Unpacking libtasn1-6:amd64 (4.9-4) ...
Selecting previously unselected package libgnutls30:amd64.
Preparing to unpack .../22-libgnutls30_3.5.3-3_amd64.deb ...
Unpacking libgnutls30:amd64 (3.5.3-3) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../23-libsasl2-modules-db_2.1.26.dfsg1-15_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.26.dfsg1-15) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../24-libsasl2-2_2.1.26.dfsg1-15_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.26.dfsg1-15) ...
Selecting previously unselected package libldap-2.4-2:amd64.
Preparing to unpack .../25-libldap-2.4-2_2.4.42+dfsg-2+b2_amd64.deb ...
Unpacking libldap-2.4-2:amd64 (2.4.42+dfsg-2+b2) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../26-libnghttp2-14_1.13.0-1_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.13.0-1) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../27-librtmp1_2.4+20151223.gitfa8646d.1-1_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-1) ...
Selecting previously unselected package libssh2-1:amd64.
Preparing to unpack .../28-libssh2-1_1.7.0-1_amd64.deb ...
Unpacking libssh2-1:amd64 (1.7.0-1) ...
Selecting previously unselected package libssl1.0.2:amd64.
Preparing to unpack .../29-libssl1.0.2_1.0.2h-1_amd64.deb ...
Unpacking libssl1.0.2:amd64 (1.0.2h-1) ...
Selecting previously unselected package libcurl3:amd64.
Preparing to unpack .../30-libcurl3_7.50.1-1_amd64.deb ...
Unpacking libcurl3:amd64 (7.50.1-1) ...
Selecting previously unselected package libexpat1:amd64.
Preparing to unpack .../31-libexpat1_2.2.0-1_amd64.deb ...
Unpacking libexpat1:amd64 (2.2.0-1) ...
Selecting previously unselected package libjsoncpp1:amd64.
Preparing to unpack .../32-libjsoncpp1_1.7.4-3_amd64.deb ...
Unpacking libjsoncpp1:amd64 (1.7.4-3) ...
Selecting previously unselected package cmake.
Preparing to unpack .../33-cmake_3.6.1-1_amd64.deb ...
Unpacking cmake (3.6.1-1) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../34-libelf1_0.166-2_amd64.deb ...
Unpacking libelf1:amd64 (0.166-2) ...
Selecting previously unselected package libmnl0:amd64.
Preparing to unpack .../35-libmnl0_1.0.4-1_amd64.deb ...
Unpacking libmnl0:amd64 (1.0.4-1) ...
Selecting previously unselected package iproute2.
Preparing to unpack .../36-iproute2_4.6.0-4_amd64.deb ...
Unpacking iproute2 (4.6.0-4) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../37-libmagic-mgc_1%3a5.28-4_amd64.deb ...
Unpacking libmagic-mgc (1:5.28-4) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../38-libmagic1_1%3a5.28-4_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.28-4) ...
Selecting previously unselected package file.
Preparing to unpack .../39-file_1%3a5.28-4_amd64.deb ...
Unpacking file (1:5.28-4) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../40-gettext-base_0.19.8.1-1_amd64.deb ...
Unpacking gettext-base (0.19.8.1-1) ...
Selecting previously unselected package libsqlite3-0:amd64.
Preparing to unpack .../41-libsqlite3-0_3.14.1-1_amd64.deb ...
Unpacking libsqlite3-0:amd64 (3.14.1-1) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../42-libsigsegv2_2.10-5_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.10-5) ...
Selecting previously unselected package m4.
Preparing to unpack .../43-m4_1.4.17-5_amd64.deb ...
Unpacking m4 (1.4.17-5) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../44-autoconf_2.69-10_all.deb ...
Unpacking autoconf (2.69-10) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../45-autotools-dev_20160430.1_all.deb ...
Unpacking autotools-dev (20160430.1) ...
Selecting previously unselected package automake.
Preparing to unpack .../46-automake_1%3a1.15-4_all.deb ...
Unpacking automake (1:1.15-4) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../47-autopoint_0.19.8.1-1_all.deb ...
Unpacking autopoint (0.19.8.1-1) ...
Selecting previously unselected package libglib2.0-0:amd64.
Preparing to unpack .../48-libglib2.0-0_2.48.1-3_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.48.1-3) ...
Selecting previously unselected package libcroco3:amd64.
Preparing to unpack .../49-libcroco3_0.6.11-1_amd64.deb ...
Unpacking libcroco3:amd64 (0.6.11-1) ...
Selecting previously unselected package libunistring0:amd64.
Preparing to unpack .../50-libunistring0_0.9.6+really0.9.3-0.1_amd64.deb ...
Unpacking libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../51-gettext_0.19.8.1-1_amd64.deb ...
Unpacking gettext (0.19.8.1-1) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../52-intltool-debian_0.35.0+20060710.4_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.4) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../53-po-debconf_1.0.19_all.deb ...
Unpacking po-debconf (1.0.19) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../54-libarchive-zip-perl_1.59-1_all.deb ...
Unpacking libarchive-zip-perl (1.59-1) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../55-libfile-stripnondeterminism-perl_0.023-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (0.023-2) ...
Selecting previously unselected package libtimedate-perl.
Preparing to unpack .../56-libtimedate-perl_2.3000-2_all.deb ...
Unpacking libtimedate-perl (2.3000-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../57-dh-strip-nondeterminism_0.023-2_all.deb ...
Unpacking dh-strip-nondeterminism (0.023-2) ...
Selecting previously unselected package libtool.
Preparing to unpack .../58-libtool_2.4.6-2_all.deb ...
Unpacking libtool (2.4.6-2) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../59-dh-autoreconf_12_all.deb ...
Unpacking dh-autoreconf (12) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../60-debhelper_9.20160814_all.deb ...
Unpacking debhelper (9.20160814) ...
Selecting previously unselected package icu-devtools.
Preparing to unpack .../61-icu-devtools_57.1-3_amd64.deb ...
Unpacking icu-devtools (57.1-3) ...
Selecting previously unselected package libicu-dev.
Preparing to unpack .../62-libicu-dev_57.1-3_amd64.deb ...
Unpacking libicu-dev (57.1-3) ...
Selecting previously unselected package libpkcs11-helper1:amd64.
Preparing to unpack .../63-libpkcs11-helper1_1.11-5_amd64.deb ...
Unpacking libpkcs11-helper1:amd64 (1.11-5) ...
Selecting previously unselected package libsqlite3-dev:amd64.
Preparing to unpack .../64-libsqlite3-dev_3.14.1-1_amd64.deb ...
Unpacking libsqlite3-dev:amd64 (3.14.1-1) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../65-zlib1g-dev_1%3a1.2.8.dfsg-2+b1_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.8.dfsg-2+b1) ...
Selecting previously unselected package libssl-dev:amd64.
Preparing to unpack .../66-libssl-dev_1.0.2h-1_amd64.deb ...
Unpacking libssl-dev:amd64 (1.0.2h-1) ...
Selecting previously unselected package libxml2-dev:amd64.
Preparing to unpack .../67-libxml2-dev_2.9.4+dfsg1-1+b1_amd64.deb ...
Unpacking libxml2-dev:amd64 (2.9.4+dfsg1-1+b1) ...
Selecting previously unselected package libxslt1.1:amd64.
Preparing to unpack .../68-libxslt1.1_1.1.29-1_amd64.deb ...
Unpacking libxslt1.1:amd64 (1.1.29-1) ...
Selecting previously unselected package libxslt1-dev:amd64.
Preparing to unpack .../69-libxslt1-dev_1.1.29-1_amd64.deb ...
Unpacking libxslt1-dev:amd64 (1.1.29-1) ...
Selecting previously unselected package openvpn.
Preparing to unpack .../70-openvpn_2.3.11-2_amd64.deb ...
Unpacking openvpn (2.3.11-2) ...
Selecting previously unselected package pkg-config.
Preparing to unpack .../71-pkg-config_0.29-4_amd64.deb ...
Unpacking pkg-config (0.29-4) ...
Selecting previously unselected package sbuild-build-depends-eurephia-dummy.
Preparing to unpack .../72-sbuild-build-depends-eurephia-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-eurephia-dummy (0.invalid.0) ...
Setting up libnettle6:amd64 (3.2-1) ...
Setting up libexpat1:amd64 (2.2.0-1) ...
Setting up libarchive-zip-perl (1.59-1) ...
Setting up libnghttp2-14:amd64 (1.13.0-1) ...
Setting up libtimedate-perl (2.3000-2) ...
Setting up libsigsegv2:amd64 (2.10-5) ...
Setting up libelf1:amd64 (0.166-2) ...
Setting up groff-base (1.22.3-8) ...
Setting up libglib2.0-0:amd64 (2.48.1-3) ...
No schema files found: doing nothing.
Setting up libsasl2-modules-db:amd64 (2.1.26.dfsg1-15) ...
Setting up libsasl2-2:amd64 (2.1.26.dfsg1-15) ...
Setting up gettext-base (0.19.8.1-1) ...
Setting up cmake-data (3.6.1-1) ...
Setting up libpipeline1:amd64 (1.4.1-2) ...
Setting up m4 (1.4.17-5) ...
Setting up libicu57:amd64 (57.1-3) ...
Setting up libprocps6:amd64 (2:3.3.12-2) ...
Setting up libxml2:amd64 (2.9.4+dfsg1-1+b1) ...
Setting up libtasn1-6:amd64 (4.9-4) ...
Setting up libmagic-mgc (1:5.28-4) ...
Setting up libmagic1:amd64 (1:5.28-4) ...
Setting up libhogweed4:amd64 (3.2-1) ...
Setting up lsb-base (9.20160629) ...
Setting up procps (2:3.3.12-2) ...
update-alternatives: using /usr/bin/w.procps to provide /usr/bin/w (w) in auto mode
Setting up libcroco3:amd64 (0.6.11-1) ...
Setting up libxslt1.1:amd64 (1.1.29-1) ...
Setting up libssl1.0.2:amd64 (1.0.2h-1) ...
Setting up pkg-config (0.29-4) ...
Setting up libssh2-1:amd64 (1.7.0-1) ...
Processing triggers for libc-bin (2.23-5) ...
Setting up autotools-dev (20160430.1) ...
Setting up libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Setting up libp11-kit0:amd64 (0.23.2-5) ...
Setting up libsqlite3-0:amd64 (3.14.1-1) ...
Setting up icu-devtools (57.1-3) ...
Setting up libkeyutils1:amd64 (1.5.9-9) ...
Setting up bsdmainutils (9.0.10) ...
update-alternatives: using /usr/bin/bsd-write to provide /usr/bin/write (write) in auto mode
update-alternatives: using /usr/bin/bsd-from to provide /usr/bin/from (from) in auto mode
Setting up libmnl0:amd64 (1.0.4-1) ...
Setting up autopoint (0.19.8.1-1) ...
Setting up libidn11:amd64 (1.33-1) ...
Setting up liblzo2-2:amd64 (2.08-1.2) ...
Setting up zlib1g-dev:amd64 (1:1.2.8.dfsg-2+b1) ...
Setting up libfile-stripnondeterminism-perl (0.023-2) ...
Setting up libjsoncpp1:amd64 (1.7.4-3) ...
Setting up gettext (0.19.8.1-1) ...
Setting up libsqlite3-dev:amd64 (3.14.1-1) ...
Setting up libarchive13:amd64 (3.2.1-2) ...
Setting up libpkcs11-helper1:amd64 (1.11-5) ...
Setting up libssl-dev:amd64 (1.0.2h-1) ...
Setting up libgnutls30:amd64 (3.5.3-3) ...
Setting up autoconf (2.69-10) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-1) ...
Setting up libicu-dev (57.1-3) ...
Setting up file (1:5.28-4) ...
Setting up iproute2 (4.6.0-4) ...
Setting up libkrb5support0:amd64 (1.14.3+dfsg-1) ...
Setting up libxml2-dev:amd64 (2.9.4+dfsg1-1+b1) ...
Setting up intltool-debian (0.35.0+20060710.4) ...
Setting up openvpn (2.3.11-2) ...
invoke-rc.d: action cond-restart is unknown, but proceeding anyway.
invoke-rc.d: could not determine current runlevel
All runlevel operations denied by policy
invoke-rc.d: policy-rc.d denied execution of cond-restart.
Setting up libldap-2.4-2:amd64 (2.4.42+dfsg-2+b2) ...
Setting up automake (1:1.15-4) ...
update-alternatives: using /usr/bin/automake-1.15 to provide /usr/bin/automake (automake) in auto mode
Setting up man-db (2.7.5-1) ...
Not building database; man-db/auto-update is not 'true'.
Setting up libxslt1-dev:amd64 (1.1.29-1) ...
Setting up libtool (2.4.6-2) ...
Setting up libk5crypto3:amd64 (1.14.3+dfsg-1) ...
Setting up po-debconf (1.0.19) ...
Setting up libkrb5-3:amd64 (1.14.3+dfsg-1) ...
Setting up libgssapi-krb5-2:amd64 (1.14.3+dfsg-1) ...
Setting up libcurl3:amd64 (7.50.1-1) ...
Setting up cmake (3.6.1-1) ...
Setting up dh-strip-nondeterminism (0.023-2) ...
Setting up debhelper (9.20160814) ...
Setting up sbuild-build-depends-eurephia-dummy (0.invalid.0) ...
Setting up dh-autoreconf (12) ...
Processing triggers for libc-bin (2.23-5) ...
W: No sandbox user '_apt' on the system, can not drop privileges

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 3.16.0-4-amd64 amd64 (x86_64)
Toolchain package versions: binutils_2.27-6 dpkg-dev_1.18.10 g++-6_6.2.0-1 gcc-6_6.2.0-1 libc6-dev_2.23-5 libstdc++-6-dev_6.2.0-1 libstdc++6_6.2.0-1 linux-libc-dev_4.7.2-1
Package versions: adduser_3.115 apt_1.3~rc2 autoconf_2.69-10 automake_1:1.15-4 autopoint_0.19.8.1-1 autotools-dev_20160430.1 base-files_9.6 base-passwd_3.5.40 bash_4.3-15 binutils_2.27-6 bsdmainutils_9.0.10 bsdutils_1:2.28.1-1 build-essential_12.2 bzip2_1.0.6-8 clang-3.8_1:3.8.1-9 cmake_3.6.1-1 cmake-data_3.6.1-1 coreutils_8.25-2 cpp_4:6.1.1-1 cpp-6_6.2.0-1 dash_0.5.8-2.3 debconf_1.5.59 debfoster_2.7-2.1 debhelper_9.20160814 debian-archive-keyring_2014.3 debianutils_4.8 dh-autoreconf_12 dh-strip-nondeterminism_0.023-2 diffutils_1:3.3-3 dpkg_1.18.10 dpkg-dev_1.18.10 e2fslibs_1.43.1-1 e2fsprogs_1.43.1-1 eatmydata_105-3 fakeroot_1.21-1 file_1:5.28-4 findutils_4.6.0+git+20160703-2 g++_4:6.1.1-1 g++-6_6.2.0-1 gcc_4:6.1.1-1 gcc-6_6.2.0-1 gcc-6-base_6.2.0-1 gettext_0.19.8.1-1 gettext-base_0.19.8.1-1 gpgv_2.1.14-5 grep_2.25-6 groff-base_1.22.3-8 gzip_1.6-5 hostname_3.18 icu-devtools_57.1-3 init-system-helpers_1.42 intltool-debian_0.35.0+20060710.4 iproute2_4.6.0-4 libacl1_2.2.52-3 libapt-pkg5.0_1.3~rc2 libarchive-zip-perl_1.59-1 libarchive13_3.2.1-2 libasan3_6.2.0-1 libatomic1_6.2.0-1 libattr1_1:2.4.47-2 libaudit-common_1:2.6.6-1 libaudit1_1:2.6.6-1 libblkid1_2.28.1-1 libbsd0_0.8.3-1 libbz2-1.0_1.0.6-8 libc-bin_2.23-5 libc-dev-bin_2.23-5 libc6_2.23-5 libc6-dev_2.23-5 libcap-ng0_0.7.7-3 libcc1-0_6.2.0-1 libcilkrts5_6.2.0-1 libclang-common-3.8-dev_1:3.8.1-9 libclang1-3.8_1:3.8.1-9 libcomerr2_1.43.1-1 libcroco3_0.6.11-1 libcurl3_7.50.1-1 libdb5.3_5.3.28-12 libdebconfclient0_0.215 libdpkg-perl_1.18.10 libeatmydata1_105-3 libedit2_3.1-20150325-1+b1 libelf1_0.166-2 libexpat1_2.2.0-1 libfakeroot_1.21-1 libfdisk1_2.28.1-1 libffi6_3.2.1-4 libfile-stripnondeterminism-perl_0.023-2 libgc1c2_1:7.4.2-8 libgcc-6-dev_6.2.0-1 libgcc1_1:6.2.0-1 libgcrypt20_1.7.3-1 libgdbm3_1.8.3-14 libglib2.0-0_2.48.1-3 libgmp10_2:6.1.1+dfsg-1 libgnutls30_3.5.3-3 libgomp1_6.2.0-1 libgpg-error0_1.24-1 libgssapi-krb5-2_1.14.3+dfsg-1 libhogweed4_3.2-1 libicu-dev_57.1-3 libicu57_57.1-3 libidn11_1.33-1 libisl15_0.17.1-1 libitm1_6.2.0-1 libjsoncpp1_1.7.4-3 libk5crypto3_1.14.3+dfsg-1 libkeyutils1_1.5.9-9 libkrb5-3_1.14.3+dfsg-1 libkrb5support0_1.14.3+dfsg-1 libldap-2.4-2_2.4.42+dfsg-2+b2 libllvm3.8_1:3.8.1-9 liblsan0_6.2.0-1 liblz4-1_0.0~r131-2 liblzma5_5.1.1alpha+20120614-2.1 liblzo2-2_2.08-1.2 libmagic-mgc_1:5.28-4 libmagic1_1:5.28-4 libmnl0_1.0.4-1 libmount1_2.28.1-1 libmpc3_1.0.3-1 libmpfr4_3.1.4-2 libmpx2_6.2.0-1 libncurses5_6.0+20160625-1 libncursesw5_6.0+20160625-1 libnettle6_3.2-1 libnghttp2-14_1.13.0-1 libobjc-6-dev_6.2.0-1 libobjc4_6.2.0-1 libp11-kit0_0.23.2-5 libpam-modules_1.1.8-3.3 libpam-modules-bin_1.1.8-3.3 libpam-runtime_1.1.8-3.3 libpam0g_1.1.8-3.3 libpcre3_2:8.39-2 libperl5.22_5.22.2-3 libpipeline1_1.4.1-2 libpkcs11-helper1_1.11-5 libprocps6_2:3.3.12-2 libquadmath0_6.2.0-1 librtmp1_2.4+20151223.gitfa8646d.1-1 libsasl2-2_2.1.26.dfsg1-15 libsasl2-modules-db_2.1.26.dfsg1-15 libselinux1_2.5-3 libsemanage-common_2.5-1 libsemanage1_2.5-1 libsepol1_2.5-1 libsigsegv2_2.10-5 libsmartcols1_2.28.1-1 libsqlite3-0_3.14.1-1 libsqlite3-dev_3.14.1-1 libss2_1.43.1-1 libssh2-1_1.7.0-1 libssl-dev_1.0.2h-1 libssl1.0.2_1.0.2h-1 libstdc++-6-dev_6.2.0-1 libstdc++6_6.2.0-1 libsystemd0_231-5 libtasn1-6_4.9-4 libtimedate-perl_2.3000-2 libtinfo5_6.0+20160625-1 libtool_2.4.6-2 libtsan0_6.2.0-1 libubsan0_6.2.0-1 libudev1_231-5 libunistring0_0.9.6+really0.9.3-0.1 libustr-1.0-1_1.0.4-5 libuuid1_2.28.1-1 libxml2_2.9.4+dfsg1-1+b1 libxml2-dev_2.9.4+dfsg1-1+b1 libxslt1-dev_1.1.29-1 libxslt1.1_1.1.29-1 linux-libc-dev_4.7.2-1 login_1:4.2-3.1 lsb-base_9.20160629 m4_1.4.17-5 make_4.1-9 man-db_2.7.5-1 mawk_1.3.3-17 mount_2.28.1-1 multiarch-support_2.23-5 ncurses-base_6.0+20160625-1 ncurses-bin_6.0+20160625-1 openvpn_2.3.11-2 passwd_1:4.2-3.1 patch_2.7.5-1 perl_5.22.2-3 perl-base_5.22.2-3 perl-modules-5.22_5.22.2-3 pkg-config_0.29-4 po-debconf_1.0.19 procps_2:3.3.12-2 sbuild-build-depends-core-dummy_0.invalid.0 sbuild-build-depends-eurephia-dummy_0.invalid.0 sed_4.2.2-7.1 sensible-utils_0.0.9 sysvinit-utils_2.88dsf-59.8 tar_1.29b-1 util-linux_2.28.1-1 xz-utils_5.1.1alpha+20120614-2.1 zlib1g_1:1.2.8.dfsg-2+b1 zlib1g-dev_1:1.2.8.dfsg-2+b1

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/sbuild-nonexistent/.gnupg/trustedkeys.kbx': General error
gpgv: Signature made Tue Jul  7 15:16:22 2015 UTC using RSA key ID 
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./eurephia_1.1.0-5.dsc
dpkg-source: info: extracting eurephia in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking eurephia_1.1.0.orig.tar.bz2
dpkg-source: info: unpacking eurephia_1.1.0-5.debian.tar.xz
dpkg-source: info: applying double-free.patch
dpkg-source: info: applying sql-error-handling.patch
dpkg-source: info: applying ldflags.patch

Check disc space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LC_ALL=POSIX
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable-amd64-sbuild
SCHROOT_CHROOT_NAME=unstable-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=unstable-amd64-sbuild-309e0883-4d71-492d-995e-d68c0b57f1e7
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

dpkg-buildpackage: info: source package eurephia
dpkg-buildpackage: info: source version 1.1.0-5
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Alberto Gonzalez Iniesta <agi@inittab.org>
 dpkg-source --before-build eurephia-1.1.0
dpkg-buildpackage: info: host architecture amd64
 fakeroot debian/rules clean
dh clean
   dh_testdir
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
rm -rf configure.log
dh_auto_clean
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_clean
 debian/rules build-arch
dh build-arch
   dh_testdir -a
   dh_update_autotools_config -a
   debian/rules override_dh_auto_configure
make[1]: Entering directory '/<<PKGBUILDDIR>>'
CFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89" CPPFLAGS="-Wdate-time -D_FORTIFY_SOURCE=2" CXXFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" FCFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" FFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" GCJFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" LDFLAGS="-Wl,-z,relro" OBJCFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" OBJCXXFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security"  ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn
#
# Configure run at Mon Aug 29 16:31:57 UTC 2016
# Linux ip-172-31-10-98 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt25-2+deb8u3 (2016-07-02) x86_64 GNU/Linux
#
# ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn

Using cmake version 3.6.1

CMake suite maintained and supported by Kitware (kitware.com/cmake).
CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '${_compiler_id_version_compute}
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GNU-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '${_compiler_id_version_compute}
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GNU-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '${_compiler_id_version_compute}
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GNU-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '${_compiler_id_version_compute}
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/GNU-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.6/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.6/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:16 (include)
  /usr/share/cmake-3.6/Modules/CMakeCompilerIdDetection.cmake:44 (_readFile)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:124 (compiler_id_detection)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:142 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCompilerId.cmake:40 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.6/Modules/CMakeDetermineCCompiler.cmake:121 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is unknown
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29") 
-- Build Platform: Linux
-- Will build database interface for SQLite
-- Will build command line based admin utility
-- Building eurephia plug-in for OpenVPN
-- Looking for endian.h
-- Looking for endian.h - found
-- Looking for dlfcn.h
-- Looking for dlfcn.h - found
-- Looking for dlopen in dl
-- Looking for dlopen in dl - found
-- Looking for dlclose in dl
-- Looking for dlclose in dl - found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_mutex_lock in pthread
-- Looking for pthread_mutex_lock in pthread - found
-- Looking for pthread_mutex_unlock in pthread
-- Looking for pthread_mutex_unlock in pthread - found
-- Checking for one of the modules 'openssl'
-- Looking for RAND_load_file in crypto
-- Looking for RAND_load_file in crypto - found
-- Looking for RAND_pseudo_bytes in crypto
-- Looking for RAND_pseudo_bytes in crypto - found
-- Checking for one of the modules 'libxml-2.0;libxml2;libxml>=2.6'
-- Checking for one of the modules 'libxslt'
-- Checking for one of the modules 'sqlite3'
-- sqlite3 binary was not found.  You will need to generate the database file on your own
-- Looking for sem_wait in rt
-- Looking for sem_wait in rt - not found
-- Looking for sem_timedwait in rt
-- Looking for sem_timedwait in rt - not found
-- Looking for sem_post in rt
-- Looking for sem_post in rt - not found
-- * sem_wait was not found in librt, trying libpthread
-- Looking for sem_wait in pthread
-- Looking for sem_wait in pthread - found
-- * sem_timedwait was not found in librt, trying libpthread
-- Looking for sem_timedwait in pthread
-- Looking for sem_timedwait in pthread - found
-- * sem_post was not found in librt, trying libpthread
-- Looking for sem_post in pthread
-- Looking for sem_post in pthread - found
-- Looking for mq_open in rt
-- Looking for mq_open in rt - found
-- Looking for mq_close in rt
-- Looking for mq_close in rt - found
-- Looking for mq_unlink in rt
-- Looking for mq_unlink in rt - found
-- Looking for mq_send in rt
-- Looking for mq_send in rt - found
-- Looking for mq_receive in rt
-- Looking for mq_receive in rt - found
-- Looking for mq_getattr in rt
-- Looking for mq_getattr in rt - found
-- Will build iptables firewall module
-- Configuring done
-- Generating done
CMake Warning:
  Manually-specified variables were not used by the project:

    SQLITE3PREFIX


-- Build files have been written to: /<<PKGBUILDDIR>>

Building options:
                 CFLAGS: -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89 -fno-delete-null-pointer-checks -g -Wall -Wpointer-arith

eurephia will be built with support for: 

               Database: SQLite3 
               Firewall: iptables 
        OpenVPN plug-in: eurephia-auth
            Admin tools: eurephiadm 

         Install prefix: /usr
           Binaries dir: /usr/bin
          Man pages dir: /usr/share/man
           Plug-in path: /usr/lib/eurephia
         XSLT base path: /usr/share/eurephia/xslt
   eurephiadm XSLT path: /usr/share/eurephia/xslt/eurephiadm
  SQLite3 database path: /var/lib/eurephia


make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_auto_build -a
	make -j1
make[1]: Entering directory '/<<PKGBUILDDIR>>'
make[2]: Entering directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target eurephiacommon
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[  1%] Building C object common/CMakeFiles/eurephiacommon.dir/certinfo.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[  2%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_getsym.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[  4%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_log.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[  5%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_nullsafe.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[  6%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_values.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
        if( (vls == NULL) ) {
             ~~~~^~~~~~~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: remove extraneous parentheses around the comparison to silence this warning
        if( (vls == NULL) ) {
            ~    ^      ~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: use '=' to turn this equality comparison into an assignment
        if( (vls == NULL) ) {
                 ^~
                 =
1 warning generated.
[  8%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_cfgfile.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[  9%] Building C object common/CMakeFiles/eurephiacommon.dir/passwd.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 11%] Building C object common/CMakeFiles/eurephiacommon.dir/randstr.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 12%] Building C object common/CMakeFiles/eurephiacommon.dir/sha512.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 13%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 15%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_xml.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
/<<PKGBUILDDIR>>/common/eurephia_xml.c:227:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrVPrintf(msg, 2048, xmlfmt, ap);
                                 ^~~~~~
/usr/include/libxml2/libxml/xmlstring.h:105:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
1 warning generated.
[ 16%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb_mapping.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 18%] Linking C static library libeurephiacommon.a
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 18%] Built target eurephiacommon
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target edb-sqlite
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 19%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/sqlite.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 20%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/edb-sqlite.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 22%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/__/__/common/eurephiadb_session_common.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 23%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/authentication.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 25%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/firewalladmin.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 26%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/attempts.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 27%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/blacklist.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 29%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/usercerts.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:120:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 7));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:124:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 8));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
4 warnings generated.
[ 30%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/configuration.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 31%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/useraccount.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:39: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                      ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:58: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                   ~~~   ^~~~~~~~~~~~~~~~~~~
                                                   %lld
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                 ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:53: warning: format specifies type 'long' but the argument has type 'int' [-Wformat]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                              ~~~   ^~~
                                              %d
4 warnings generated.
[ 33%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/certificates.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:114:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 2));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:118:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 3));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:42: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                         ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:61: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                      ~~~   ^~~~~~~~~~~~~~~~~~~
                                                      %lld
6 warnings generated.
[ 34%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/lastlog.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
[ 36%] Linking C shared library edb-sqlite.so
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 37%] Built target edb-sqlite
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 38%] Creating buildinfo.h
./mk_buildinfo.sh: 30: ./mk_buildinfo.sh: [[: not found
./mk_buildinfo.sh: 60: ./mk_buildinfo.sh: [[: not found
Scanning dependencies of target eurephiadm
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 40%] Building C object eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:203:47: error: function definition is not allowed here
        void dump_values(eurephiaVALUES *vls) {
                                              ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:216:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(cfg);
                ^
1 warning and 1 error generated.
eurephiadm/CMakeFiles/eurephiadm.dir/build.make:66: recipe for target 'eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o' failed
make[3]: *** [eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o] Error 1
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
CMakeFiles/Makefile2:208: recipe for target 'eurephiadm/CMakeFiles/eurephiadm.dir/all' failed
make[2]: *** [eurephiadm/CMakeFiles/eurephiadm.dir/all] Error 2
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
Makefile:127: recipe for target 'all' failed
make[1]: *** [all] Error 2
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
dh_auto_build: make -j1 returned exit code 2
debian/rules:3: recipe for target 'build-arch' failed
make: *** [build-arch] Error 2
dpkg-buildpackage: error: debian/rules build-arch gave error exit status 2
--------------------------------------------------------------------------------
Build finished at 2016-08-29T16:32:03Z

Finished
--------


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use
E: Build failure (dpkg-buildpackage died)

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build-Space: 0
Build-Time: 6
Distribution: unstable
Fail-Stage: build
Host Architecture: amd64
Install-Time: 16
Job: eurephia_1.1.0-5
Machine Architecture: amd64
Package: eurephia
Package-Time: 49
Source-Version: 1.1.0-5
Space: 0
Status: failed
Version: 1.1.0-5
--------------------------------------------------------------------------------
Finished at 2016-08-29T16:32:03Z
Build needed 00:00:00, 0k disc space
E: Build failure (dpkg-buildpackage died)
DC-Status: Failed 49.585526981s
DC-Time-Estimation: 49.585526981 versus expected 440 (r/m: 7.873556999174327 ; m: 49.585526981)

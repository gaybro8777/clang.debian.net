DC-Build-Header: eurephia 1.1.0-6 / 2018-05-02 13:28:02 +0000
DC-Task: type:rebuild-binarch-only source:eurephia version:1.1.0-6 chroot:unstable esttime:40 logfile:/tmp/eurephia_1.1.0-6_unstable_clang60.log modes:clang60:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v  --chroot-setup-commands=/tmp/clang60 eurephia_1.1.0-6'
sbuild (Debian sbuild) 0.73.0 (23 Dec 2016) on ip-172-31-13-156.eu-central-1.compute.internal

+==============================================================================+
| eurephia 1.1.0-6 (amd64)                     Wed, 02 May 2018 13:28:03 +0000 |
+==============================================================================+

Package: eurephia
Version: 1.1.0-6
Source Version: 1.1.0-6
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: any

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/unstable-amd64-sbuild-a5f7748e-4e14-4787-b3b8-db3099d31384' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang60
------------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=6.0
+ echo 'Install of clang-6.0'
Install of clang-6.0
+ apt-get update
Get:1 http://127.0.0.1:9999/debian unstable InRelease [242 kB]
Get:2 http://127.0.0.1:9999/debian unstable/main Sources.diff/Index [27.9 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main amd64 Packages.diff/Index [27.9 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main Sources 2018-05-02-0830.09.pdiff [16.2 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main Sources 2018-05-02-0830.09.pdiff [16.2 kB]
Get:5 http://127.0.0.1:9999/debian unstable/main amd64 Packages 2018-05-02-0830.09.pdiff [1781 B]
Get:5 http://127.0.0.1:9999/debian unstable/main amd64 Packages 2018-05-02-0830.09.pdiff [1781 B]
Get:6 http://127.0.0.1:9999/debian unstable/main Translation-en [6016 kB]
Fetched 6332 kB in 2s (3411 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-6.0
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  lib32gcc1 lib32stdc++6 libbsd0 libc6-i386 libclang-common-6.0-dev
  libclang1-6.0 libedit2 libjsoncpp1 libllvm6.0 libncurses5 libobjc-7-dev
  libobjc4
Suggested packages:
  gnustep gnustep-devel clang-6.0-doc
Recommended packages:
  llvm-6.0-dev python libomp-dev libgpm2
The following NEW packages will be installed:
  clang-6.0 lib32gcc1 lib32stdc++6 libbsd0 libc6-i386 libclang-common-6.0-dev
  libclang1-6.0 libedit2 libjsoncpp1 libllvm6.0 libncurses5 libobjc-7-dev
  libobjc4
0 upgraded, 13 newly installed, 0 to remove and 0 not upgraded.
Need to get 37.7 MB of archives.
After this operation, 187 MB of additional disk space will be used.
Get:1 http://127.0.0.1:9999/debian unstable/main amd64 libjsoncpp1 amd64 1.7.4-3 [75.6 kB]
Get:2 http://127.0.0.1:9999/debian unstable/main amd64 libbsd0 amd64 0.8.7-1 [92.1 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main amd64 libncurses5 amd64 6.1+20180210-2 [95.7 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main amd64 libedit2 amd64 3.1-20170329-1 [85.2 kB]
Get:5 http://127.0.0.1:9999/debian unstable/main amd64 libllvm6.0 amd64 1:6.0-3 [14.5 MB]
Get:6 http://127.0.0.1:9999/debian unstable/main amd64 libobjc4 amd64 8-20180425-1 [52.4 kB]
Get:7 http://127.0.0.1:9999/debian unstable/main amd64 libobjc-7-dev amd64 7.3.0-17 [204 kB]
Get:8 http://127.0.0.1:9999/debian unstable/main amd64 libc6-i386 amd64 2.27-3 [2855 kB]
Get:9 http://127.0.0.1:9999/debian unstable/main amd64 lib32gcc1 amd64 1:8-20180425-1 [47.8 kB]
Get:10 http://127.0.0.1:9999/debian unstable/main amd64 lib32stdc++6 amd64 8-20180425-1 [406 kB]
Get:11 http://127.0.0.1:9999/debian unstable/main amd64 libclang-common-6.0-dev amd64 1:6.0-3 [3102 kB]
Get:12 http://127.0.0.1:9999/debian unstable/main amd64 libclang1-6.0 amd64 1:6.0-3 [6995 kB]
Get:13 http://127.0.0.1:9999/debian unstable/main amd64 clang-6.0 amd64 1:6.0-3 [9175 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 37.7 MB in 0s (99.4 MB/s)
Selecting previously unselected package libjsoncpp1:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 10022 files and directories currently installed.)
Preparing to unpack .../00-libjsoncpp1_1.7.4-3_amd64.deb ...
Unpacking libjsoncpp1:amd64 (1.7.4-3) ...
Selecting previously unselected package libbsd0:amd64.
Preparing to unpack .../01-libbsd0_0.8.7-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.8.7-1) ...
Selecting previously unselected package libncurses5:amd64.
Preparing to unpack .../02-libncurses5_6.1+20180210-2_amd64.deb ...
Unpacking libncurses5:amd64 (6.1+20180210-2) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../03-libedit2_3.1-20170329-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20170329-1) ...
Selecting previously unselected package libllvm6.0:amd64.
Preparing to unpack .../04-libllvm6.0_1%3a6.0-3_amd64.deb ...
Unpacking libllvm6.0:amd64 (1:6.0-3) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../05-libobjc4_8-20180425-1_amd64.deb ...
Unpacking libobjc4:amd64 (8-20180425-1) ...
Selecting previously unselected package libobjc-7-dev:amd64.
Preparing to unpack .../06-libobjc-7-dev_7.3.0-17_amd64.deb ...
Unpacking libobjc-7-dev:amd64 (7.3.0-17) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../07-libc6-i386_2.27-3_amd64.deb ...
Unpacking libc6-i386 (2.27-3) ...
Selecting previously unselected package lib32gcc1.
Preparing to unpack .../08-lib32gcc1_1%3a8-20180425-1_amd64.deb ...
Unpacking lib32gcc1 (1:8-20180425-1) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../09-lib32stdc++6_8-20180425-1_amd64.deb ...
Unpacking lib32stdc++6 (8-20180425-1) ...
Selecting previously unselected package libclang-common-6.0-dev.
Preparing to unpack .../10-libclang-common-6.0-dev_1%3a6.0-3_amd64.deb ...
Unpacking libclang-common-6.0-dev (1:6.0-3) ...
Selecting previously unselected package libclang1-6.0:amd64.
Preparing to unpack .../11-libclang1-6.0_1%3a6.0-3_amd64.deb ...
Unpacking libclang1-6.0:amd64 (1:6.0-3) ...
Selecting previously unselected package clang-6.0.
Preparing to unpack .../12-clang-6.0_1%3a6.0-3_amd64.deb ...
Unpacking clang-6.0 (1:6.0-3) ...
Setting up libncurses5:amd64 (6.1+20180210-2) ...
Setting up libobjc4:amd64 (8-20180425-1) ...
Setting up libc6-i386 (2.27-3) ...
Setting up libbsd0:amd64 (0.8.7-1) ...
Setting up libobjc-7-dev:amd64 (7.3.0-17) ...
Processing triggers for libc-bin (2.27-3) ...
Setting up lib32gcc1 (1:8-20180425-1) ...
Setting up libjsoncpp1:amd64 (1.7.4-3) ...
Setting up libedit2:amd64 (3.1-20170329-1) ...
Setting up libllvm6.0:amd64 (1:6.0-3) ...
Setting up libclang1-6.0:amd64 (1:6.0-3) ...
Setting up lib32stdc++6 (8-20180425-1) ...
Setting up libclang-common-6.0-dev (1:6.0-3) ...
Setting up clang-6.0 (1:6.0-3) ...
Processing triggers for libc-bin (2.27-3) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-6.0 g++-4.6
+ ln -s clang-6.0 gcc-4.6
+ ln -s clang-6.0 cpp-4.6
+ ln -s clang-6.0 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-6.0 g++-4.7
+ ln -s clang-6.0 gcc-4.7
+ ln -s clang-6.0 cpp-4.7
+ ln -s clang-6.0 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-6.0 g++-4.8
+ ln -s clang-6.0 gcc-4.8
+ ln -s clang-6.0 cpp-4.8
+ ln -s clang-6.0 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-6.0 g++-4.9
+ ln -s clang-6.0 gcc-4.9
+ ln -s clang-6.0 cpp-4.9
+ ln -s clang-6.0 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-6.0 g++-5
+ ln -s clang-6.0 gcc-5
+ ln -s clang-6.0 cpp-5
+ ln -s clang-6.0 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
+ echo 'g++-5 hold'
+ dpkg --set-selections
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-6.0 g++-6
+ ln -s clang-6.0 gcc-6
+ ln -s clang-6.0 cpp-6
+ ln -s clang-6.0 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-6.0 g++-7
+ ln -s clang-6.0 gcc-7
+ ln -s clang-6.0 cpp-7
+ ln -s clang-6.0 gcc
+ echo 'gcc-7 hold'
+ dpkg --set-selections
+ echo 'g++-7 hold'
+ dpkg --set-selections
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-6.0 g++-8
+ ln -s clang-6.0 gcc-8
+ ln -s clang-6.0 cpp-8
+ ln -s clang-6.0 gcc
+ echo 'gcc-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ cd -
/build/eurephia-8VFQbZ
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang

I: Finished running '/tmp/clang60'.

Finished processing commands.
--------------------------------------------------------------------------------

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:9999/debian unstable InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
Need to get 165 kB of source archives.
Get:1 http://127.0.0.1:9999/debian unstable/main eurephia 1.1.0-6 (dsc) [1786 B]
Get:2 http://127.0.0.1:9999/debian unstable/main eurephia 1.1.0-6 (tar) [158 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main eurephia 1.1.0-6 (diff) [5380 B]
Fetched 165 kB in 0s (1317 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/eurephia-8VFQbZ/eurephia-1.1.0' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/eurephia-8VFQbZ' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install build-essential                                                      |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: build-essential, fakeroot
Filtered Build-Depends: build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-core-dummy' in '/<<BUILDDIR>>/resolver-FJB5VD/apt_archive/sbuild-build-depends-core-dummy.deb'.
dpkg-scanpackages: warning: Packages in archive but missing from override file:
dpkg-scanpackages: warning:   sbuild-build-depends-core-dummy
dpkg-scanpackages: info: Wrote 1 entries to output Packages file.
Ign:1 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ InRelease
Get:2 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Release [957 B]
Ign:3 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Release.gpg
Get:4 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Sources [349 B]
Get:5 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Packages [433 B]
Fetched 1739 B in 0s (0 B/s)
Reading package lists...
Reading package lists...

Install core build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sbuild-build-depends-core-dummy
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 856 B of archives.
After this operation, 0 B of additional disk space will be used.
Get:1 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ sbuild-build-depends-core-dummy 0.invalid.0 [856 B]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 856 B in 0s (0 B/s)
Selecting previously unselected package sbuild-build-depends-core-dummy.
(Reading database ... 10771 files and directories currently installed.)
Preparing to unpack .../sbuild-build-depends-core-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-core-dummy (0.invalid.0) ...
Setting up sbuild-build-depends-core-dummy (0.invalid.0) ...

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any)

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config
Filtered Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config
dpkg-deb: building package 'sbuild-build-depends-eurephia-dummy' in '/<<BUILDDIR>>/resolver-FJB5VD/apt_archive/sbuild-build-depends-eurephia-dummy.deb'.
dpkg-scanpackages: warning: Packages in archive but missing from override file:
dpkg-scanpackages: warning:   sbuild-build-depends-core-dummy sbuild-build-depends-eurephia-dummy
dpkg-scanpackages: info: Wrote 2 entries to output Packages file.
Ign:1 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ InRelease
Get:2 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Release [963 B]
Ign:3 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Release.gpg
Get:4 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Sources [536 B]
Get:5 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ Packages [615 B]
Fetched 2114 B in 0s (0 B/s)
Reading package lists...
Reading package lists...

Install eurephia build dependencies (apt-based resolver)
--------------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils cmake cmake-data
  debhelper dh-autoreconf dh-strip-nondeterminism file gettext gettext-base
  groff-base icu-devtools intltool-debian iproute2 libarchive-zip-perl
  libarchive13 libcroco3 libcurl3 libelf1 libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libgssapi-krb5-2 libicu-dev
  libicu57 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0 libldap-2.4-2
  libldap-common liblzo2-2 libmagic-mgc libmagic1 libmnl0 libnghttp2-14
  libpipeline1 libpkcs11-helper1 libprocps6 libpsl5 librhash0 librtmp1
  libsasl2-2 libsasl2-modules-db libsigsegv2 libsqlite3-0 libsqlite3-dev
  libssh2-1 libssl-dev libssl1.0.2 libssl1.1 libtimedate-perl libtool libuv1
  libxml2 libxml2-dev libxslt1-dev libxslt1.1 lsb-base m4 man-db openvpn
  pkg-config po-debconf procps
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc wamerican | wordlist whois
  vacation cmake-doc ninja-build dh-make dwz gettext-doc libasprintf-dev
  libgettextpo-dev groff iproute2-doc lrzip krb5-doc krb5-user icu-doc
  sqlite3-doc libtool-doc gfortran | fortran95-compiler gcj-jdk m4-doc
  apparmor less www-browser openssl resolvconf libmail-box-perl
Recommended packages:
  curl | wget | lynx libatm1 libxtables12 ca-certificates libarchive-cpio-perl
  libglib2.0-data shared-mime-info xdg-user-dirs krb5-locales publicsuffix
  libsasl2-modules libssl-doc libltdl-dev easy-rsa libmail-sendmail-perl
  psmisc
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils cmake cmake-data
  debhelper dh-autoreconf dh-strip-nondeterminism file gettext gettext-base
  groff-base icu-devtools intltool-debian iproute2 libarchive-zip-perl
  libarchive13 libcroco3 libcurl3 libelf1 libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libgssapi-krb5-2 libicu-dev
  libicu57 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0 libldap-2.4-2
  libldap-common liblzo2-2 libmagic-mgc libmagic1 libmnl0 libnghttp2-14
  libpipeline1 libpkcs11-helper1 libprocps6 libpsl5 librhash0 librtmp1
  libsasl2-2 libsasl2-modules-db libsigsegv2 libsqlite3-0 libsqlite3-dev
  libssh2-1 libssl-dev libssl1.0.2 libssl1.1 libtimedate-perl libtool libuv1
  libxml2 libxml2-dev libxslt1-dev libxslt1.1 lsb-base m4 man-db openvpn
  pkg-config po-debconf procps sbuild-build-depends-eurephia-dummy
0 upgraded, 69 newly installed, 0 to remove and 0 not upgraded.
Need to get 52.5 MB of archives.
After this operation, 221 MB of additional disk space will be used.
Get:1 copy:/<<BUILDDIR>>/resolver-FJB5VD/apt_archive ./ sbuild-build-depends-eurephia-dummy 0.invalid.0 [904 B]
Get:2 http://127.0.0.1:9999/debian unstable/main amd64 bsdmainutils amd64 11.1.2 [190 kB]
Get:3 http://127.0.0.1:9999/debian unstable/main amd64 groff-base amd64 1.22.3-10 [1176 kB]
Get:4 http://127.0.0.1:9999/debian unstable/main amd64 libpipeline1 amd64 1.5.0-1 [29.0 kB]
Get:5 http://127.0.0.1:9999/debian unstable/main amd64 man-db amd64 2.8.3-2 [1180 kB]
Get:6 http://127.0.0.1:9999/debian unstable/main amd64 libelf1 amd64 0.170-0.4 [162 kB]
Get:7 http://127.0.0.1:9999/debian unstable/main amd64 libmnl0 amd64 1.0.4-2 [12.2 kB]
Get:8 http://127.0.0.1:9999/debian unstable/main amd64 iproute2 amd64 4.15.0-3 [729 kB]
Get:9 http://127.0.0.1:9999/debian unstable/main amd64 libprocps6 amd64 2:3.3.14-1 [60.4 kB]
Get:10 http://127.0.0.1:9999/debian unstable/main amd64 lsb-base all 9.20170808 [28.1 kB]
Get:11 http://127.0.0.1:9999/debian unstable/main amd64 procps amd64 2:3.3.14-1 [257 kB]
Get:12 http://127.0.0.1:9999/debian unstable/main amd64 libmagic-mgc amd64 1:5.33-2 [234 kB]
Get:13 http://127.0.0.1:9999/debian unstable/main amd64 libmagic1 amd64 1:5.33-2 [113 kB]
Get:14 http://127.0.0.1:9999/debian unstable/main amd64 file amd64 1:5.33-2 [65.6 kB]
Get:15 http://127.0.0.1:9999/debian unstable/main amd64 gettext-base amd64 0.19.8.1-6 [122 kB]
Get:16 http://127.0.0.1:9999/debian unstable/main amd64 libsigsegv2 amd64 2.12-2 [32.8 kB]
Get:17 http://127.0.0.1:9999/debian unstable/main amd64 m4 amd64 1.4.18-1 [202 kB]
Get:18 http://127.0.0.1:9999/debian unstable/main amd64 autoconf all 2.69-11 [341 kB]
Get:19 http://127.0.0.1:9999/debian unstable/main amd64 autotools-dev all 20180224.1 [77.0 kB]
Get:20 http://127.0.0.1:9999/debian unstable/main amd64 automake all 1:1.15.1-3.1 [736 kB]
Get:21 http://127.0.0.1:9999/debian unstable/main amd64 autopoint all 0.19.8.1-6 [434 kB]
Get:22 http://127.0.0.1:9999/debian unstable/main amd64 cmake-data all 3.11.1-1 [1386 kB]
Get:23 http://127.0.0.1:9999/debian unstable/main amd64 liblzo2-2 amd64 2.08-1.2+b2 [55.0 kB]
Get:24 http://127.0.0.1:9999/debian unstable/main amd64 libicu57 amd64 57.1-9 [7698 kB]
Get:25 http://127.0.0.1:9999/debian unstable/main amd64 libxml2 amd64 2.9.4+dfsg1-6.1 [725 kB]
Get:26 http://127.0.0.1:9999/debian unstable/main amd64 libarchive13 amd64 3.2.2-3.1 [296 kB]
Get:27 http://127.0.0.1:9999/debian unstable/main amd64 libkeyutils1 amd64 1.5.9-9.2 [12.9 kB]
Get:28 http://127.0.0.1:9999/debian unstable/main amd64 libkrb5support0 amd64 1.16-2 [62.8 kB]
Get:29 http://127.0.0.1:9999/debian unstable/main amd64 libk5crypto3 amd64 1.16-2 [121 kB]
Get:30 http://127.0.0.1:9999/debian unstable/main amd64 libkrb5-3 amd64 1.16-2 [316 kB]
Get:31 http://127.0.0.1:9999/debian unstable/main amd64 libgssapi-krb5-2 amd64 1.16-2 [158 kB]
Get:32 http://127.0.0.1:9999/debian unstable/main amd64 libsasl2-modules-db amd64 2.1.27~101-g0780600+dfsg-3.1 [68.6 kB]
Get:33 http://127.0.0.1:9999/debian unstable/main amd64 libsasl2-2 amd64 2.1.27~101-g0780600+dfsg-3.1 [105 kB]
Get:34 http://127.0.0.1:9999/debian unstable/main amd64 libldap-common all 2.4.45+dfsg-1 [87.0 kB]
Get:35 http://127.0.0.1:9999/debian unstable/main amd64 libldap-2.4-2 amd64 2.4.45+dfsg-1 [223 kB]
Get:36 http://127.0.0.1:9999/debian unstable/main amd64 libnghttp2-14 amd64 1.31.1-1 [80.7 kB]
Get:37 http://127.0.0.1:9999/debian unstable/main amd64 libpsl5 amd64 0.20.1-1 [52.6 kB]
Get:38 http://127.0.0.1:9999/debian unstable/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-1+b1 [60.4 kB]
Get:39 http://127.0.0.1:9999/debian unstable/main amd64 libssh2-1 amd64 1.8.0-1 [138 kB]
Get:40 http://127.0.0.1:9999/debian unstable/main amd64 libssl1.0.2 amd64 1.0.2o-1 [1296 kB]
Get:41 http://127.0.0.1:9999/debian unstable/main amd64 libcurl3 amd64 7.58.0-2 [312 kB]
Get:42 http://127.0.0.1:9999/debian unstable/main amd64 libexpat1 amd64 2.2.5-3 [96.8 kB]
Get:43 http://127.0.0.1:9999/debian unstable/main amd64 librhash0 amd64 1.3.6-2 [87.1 kB]
Get:44 http://127.0.0.1:9999/debian unstable/main amd64 libuv1 amd64 1.18.0-3 [98.5 kB]
Get:45 http://127.0.0.1:9999/debian unstable/main amd64 cmake amd64 3.11.1-1 [3190 kB]
Get:46 http://127.0.0.1:9999/debian unstable/main amd64 libtool all 2.4.6-2.1 [547 kB]
Get:47 http://127.0.0.1:9999/debian unstable/main amd64 dh-autoreconf all 17 [16.5 kB]
Get:48 http://127.0.0.1:9999/debian unstable/main amd64 libarchive-zip-perl all 1.60-1 [95.6 kB]
Get:49 http://127.0.0.1:9999/debian unstable/main amd64 libfile-stripnondeterminism-perl all 0.041-1 [19.9 kB]
Get:50 http://127.0.0.1:9999/debian unstable/main amd64 libtimedate-perl all 2.3000-2 [42.2 kB]
Get:51 http://127.0.0.1:9999/debian unstable/main amd64 dh-strip-nondeterminism all 0.041-1 [12.0 kB]
Get:52 http://127.0.0.1:9999/debian unstable/main amd64 libglib2.0-0 amd64 2.56.1-2 [2928 kB]
Get:53 http://127.0.0.1:9999/debian unstable/main amd64 libcroco3 amd64 0.6.12-2 [144 kB]
Get:54 http://127.0.0.1:9999/debian unstable/main amd64 gettext amd64 0.19.8.1-6 [1302 kB]
Get:55 http://127.0.0.1:9999/debian unstable/main amd64 intltool-debian all 0.35.0+20060710.4 [26.3 kB]
Get:56 http://127.0.0.1:9999/debian unstable/main amd64 po-debconf all 1.0.20 [247 kB]
Get:57 http://127.0.0.1:9999/debian unstable/main amd64 debhelper all 11.2.1 [1013 kB]
Get:58 http://127.0.0.1:9999/debian unstable/main amd64 icu-devtools amd64 57.1-9 [177 kB]
Get:59 http://127.0.0.1:9999/debian unstable/main amd64 libicu-dev amd64 57.1-9 [16.6 MB]
Get:60 http://127.0.0.1:9999/debian unstable/main amd64 libssl1.1 amd64 1.1.0h-2 [1352 kB]
Get:61 http://127.0.0.1:9999/debian unstable/main amd64 libpkcs11-helper1 amd64 1.22-4 [46.3 kB]
Get:62 http://127.0.0.1:9999/debian unstable/main amd64 libsqlite3-0 amd64 3.23.1-1 [603 kB]
Get:63 http://127.0.0.1:9999/debian unstable/main amd64 libsqlite3-dev amd64 3.23.1-1 [740 kB]
Get:64 http://127.0.0.1:9999/debian unstable/main amd64 libssl-dev amd64 1.1.0h-2 [1589 kB]
Get:65 http://127.0.0.1:9999/debian unstable/main amd64 libxml2-dev amd64 2.9.4+dfsg1-6.1 [821 kB]
Get:66 http://127.0.0.1:9999/debian unstable/main amd64 libxslt1.1 amd64 1.1.29-5 [236 kB]
Get:67 http://127.0.0.1:9999/debian unstable/main amd64 libxslt1-dev amd64 1.1.29-5 [515 kB]
Get:68 http://127.0.0.1:9999/debian unstable/main amd64 openvpn amd64 2.4.5-1 [486 kB]
Get:69 http://127.0.0.1:9999/debian unstable/main amd64 pkg-config amd64 0.29-4+b1 [63.3 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 52.5 MB in 1s (100 MB/s)
Selecting previously unselected package bsdmainutils.
(Reading database ... 10771 files and directories currently installed.)
Preparing to unpack .../00-bsdmainutils_11.1.2_amd64.deb ...
Unpacking bsdmainutils (11.1.2) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../01-groff-base_1.22.3-10_amd64.deb ...
Unpacking groff-base (1.22.3-10) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../02-libpipeline1_1.5.0-1_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.0-1) ...
Selecting previously unselected package man-db.
Preparing to unpack .../03-man-db_2.8.3-2_amd64.deb ...
Unpacking man-db (2.8.3-2) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../04-libelf1_0.170-0.4_amd64.deb ...
Unpacking libelf1:amd64 (0.170-0.4) ...
Selecting previously unselected package libmnl0:amd64.
Preparing to unpack .../05-libmnl0_1.0.4-2_amd64.deb ...
Unpacking libmnl0:amd64 (1.0.4-2) ...
Selecting previously unselected package iproute2.
Preparing to unpack .../06-iproute2_4.15.0-3_amd64.deb ...
Unpacking iproute2 (4.15.0-3) ...
Selecting previously unselected package libprocps6:amd64.
Preparing to unpack .../07-libprocps6_2%3a3.3.14-1_amd64.deb ...
Unpacking libprocps6:amd64 (2:3.3.14-1) ...
Selecting previously unselected package lsb-base.
Preparing to unpack .../08-lsb-base_9.20170808_all.deb ...
Unpacking lsb-base (9.20170808) ...
Selecting previously unselected package procps.
Preparing to unpack .../09-procps_2%3a3.3.14-1_amd64.deb ...
Unpacking procps (2:3.3.14-1) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../10-libmagic-mgc_1%3a5.33-2_amd64.deb ...
Unpacking libmagic-mgc (1:5.33-2) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../11-libmagic1_1%3a5.33-2_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.33-2) ...
Selecting previously unselected package file.
Preparing to unpack .../12-file_1%3a5.33-2_amd64.deb ...
Unpacking file (1:5.33-2) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../13-gettext-base_0.19.8.1-6_amd64.deb ...
Unpacking gettext-base (0.19.8.1-6) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../14-libsigsegv2_2.12-2_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.12-2) ...
Selecting previously unselected package m4.
Preparing to unpack .../15-m4_1.4.18-1_amd64.deb ...
Unpacking m4 (1.4.18-1) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../16-autoconf_2.69-11_all.deb ...
Unpacking autoconf (2.69-11) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../17-autotools-dev_20180224.1_all.deb ...
Unpacking autotools-dev (20180224.1) ...
Selecting previously unselected package automake.
Preparing to unpack .../18-automake_1%3a1.15.1-3.1_all.deb ...
Unpacking automake (1:1.15.1-3.1) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../19-autopoint_0.19.8.1-6_all.deb ...
Unpacking autopoint (0.19.8.1-6) ...
Selecting previously unselected package cmake-data.
Preparing to unpack .../20-cmake-data_3.11.1-1_all.deb ...
Unpacking cmake-data (3.11.1-1) ...
Selecting previously unselected package liblzo2-2:amd64.
Preparing to unpack .../21-liblzo2-2_2.08-1.2+b2_amd64.deb ...
Unpacking liblzo2-2:amd64 (2.08-1.2+b2) ...
Selecting previously unselected package libicu57:amd64.
Preparing to unpack .../22-libicu57_57.1-9_amd64.deb ...
Unpacking libicu57:amd64 (57.1-9) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../23-libxml2_2.9.4+dfsg1-6.1_amd64.deb ...
Unpacking libxml2:amd64 (2.9.4+dfsg1-6.1) ...
Selecting previously unselected package libarchive13:amd64.
Preparing to unpack .../24-libarchive13_3.2.2-3.1_amd64.deb ...
Unpacking libarchive13:amd64 (3.2.2-3.1) ...
Selecting previously unselected package libkeyutils1:amd64.
Preparing to unpack .../25-libkeyutils1_1.5.9-9.2_amd64.deb ...
Unpacking libkeyutils1:amd64 (1.5.9-9.2) ...
Selecting previously unselected package libkrb5support0:amd64.
Preparing to unpack .../26-libkrb5support0_1.16-2_amd64.deb ...
Unpacking libkrb5support0:amd64 (1.16-2) ...
Selecting previously unselected package libk5crypto3:amd64.
Preparing to unpack .../27-libk5crypto3_1.16-2_amd64.deb ...
Unpacking libk5crypto3:amd64 (1.16-2) ...
Selecting previously unselected package libkrb5-3:amd64.
Preparing to unpack .../28-libkrb5-3_1.16-2_amd64.deb ...
Unpacking libkrb5-3:amd64 (1.16-2) ...
Selecting previously unselected package libgssapi-krb5-2:amd64.
Preparing to unpack .../29-libgssapi-krb5-2_1.16-2_amd64.deb ...
Unpacking libgssapi-krb5-2:amd64 (1.16-2) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../30-libsasl2-modules-db_2.1.27~101-g0780600+dfsg-3.1_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.27~101-g0780600+dfsg-3.1) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../31-libsasl2-2_2.1.27~101-g0780600+dfsg-3.1_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.27~101-g0780600+dfsg-3.1) ...
Selecting previously unselected package libldap-common.
Preparing to unpack .../32-libldap-common_2.4.45+dfsg-1_all.deb ...
Unpacking libldap-common (2.4.45+dfsg-1) ...
Selecting previously unselected package libldap-2.4-2:amd64.
Preparing to unpack .../33-libldap-2.4-2_2.4.45+dfsg-1_amd64.deb ...
Unpacking libldap-2.4-2:amd64 (2.4.45+dfsg-1) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../34-libnghttp2-14_1.31.1-1_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.31.1-1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../35-libpsl5_0.20.1-1_amd64.deb ...
Unpacking libpsl5:amd64 (0.20.1-1) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../36-librtmp1_2.4+20151223.gitfa8646d.1-1+b1_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-1+b1) ...
Selecting previously unselected package libssh2-1:amd64.
Preparing to unpack .../37-libssh2-1_1.8.0-1_amd64.deb ...
Unpacking libssh2-1:amd64 (1.8.0-1) ...
Selecting previously unselected package libssl1.0.2:amd64.
Preparing to unpack .../38-libssl1.0.2_1.0.2o-1_amd64.deb ...
Unpacking libssl1.0.2:amd64 (1.0.2o-1) ...
Selecting previously unselected package libcurl3:amd64.
Preparing to unpack .../39-libcurl3_7.58.0-2_amd64.deb ...
Unpacking libcurl3:amd64 (7.58.0-2) ...
Selecting previously unselected package libexpat1:amd64.
Preparing to unpack .../40-libexpat1_2.2.5-3_amd64.deb ...
Unpacking libexpat1:amd64 (2.2.5-3) ...
Selecting previously unselected package librhash0:amd64.
Preparing to unpack .../41-librhash0_1.3.6-2_amd64.deb ...
Unpacking librhash0:amd64 (1.3.6-2) ...
Selecting previously unselected package libuv1:amd64.
Preparing to unpack .../42-libuv1_1.18.0-3_amd64.deb ...
Unpacking libuv1:amd64 (1.18.0-3) ...
Selecting previously unselected package cmake.
Preparing to unpack .../43-cmake_3.11.1-1_amd64.deb ...
Unpacking cmake (3.11.1-1) ...
Selecting previously unselected package libtool.
Preparing to unpack .../44-libtool_2.4.6-2.1_all.deb ...
Unpacking libtool (2.4.6-2.1) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../45-dh-autoreconf_17_all.deb ...
Unpacking dh-autoreconf (17) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../46-libarchive-zip-perl_1.60-1_all.deb ...
Unpacking libarchive-zip-perl (1.60-1) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../47-libfile-stripnondeterminism-perl_0.041-1_all.deb ...
Unpacking libfile-stripnondeterminism-perl (0.041-1) ...
Selecting previously unselected package libtimedate-perl.
Preparing to unpack .../48-libtimedate-perl_2.3000-2_all.deb ...
Unpacking libtimedate-perl (2.3000-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../49-dh-strip-nondeterminism_0.041-1_all.deb ...
Unpacking dh-strip-nondeterminism (0.041-1) ...
Selecting previously unselected package libglib2.0-0:amd64.
Preparing to unpack .../50-libglib2.0-0_2.56.1-2_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.56.1-2) ...
Selecting previously unselected package libcroco3:amd64.
Preparing to unpack .../51-libcroco3_0.6.12-2_amd64.deb ...
Unpacking libcroco3:amd64 (0.6.12-2) ...
Selecting previously unselected package gettext.
Preparing to unpack .../52-gettext_0.19.8.1-6_amd64.deb ...
Unpacking gettext (0.19.8.1-6) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../53-intltool-debian_0.35.0+20060710.4_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.4) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../54-po-debconf_1.0.20_all.deb ...
Unpacking po-debconf (1.0.20) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../55-debhelper_11.2.1_all.deb ...
Unpacking debhelper (11.2.1) ...
Selecting previously unselected package icu-devtools.
Preparing to unpack .../56-icu-devtools_57.1-9_amd64.deb ...
Unpacking icu-devtools (57.1-9) ...
Selecting previously unselected package libicu-dev.
Preparing to unpack .../57-libicu-dev_57.1-9_amd64.deb ...
Unpacking libicu-dev (57.1-9) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../58-libssl1.1_1.1.0h-2_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.0h-2) ...
Selecting previously unselected package libpkcs11-helper1:amd64.
Preparing to unpack .../59-libpkcs11-helper1_1.22-4_amd64.deb ...
Unpacking libpkcs11-helper1:amd64 (1.22-4) ...
Selecting previously unselected package libsqlite3-0:amd64.
Preparing to unpack .../60-libsqlite3-0_3.23.1-1_amd64.deb ...
Unpacking libsqlite3-0:amd64 (3.23.1-1) ...
Selecting previously unselected package libsqlite3-dev:amd64.
Preparing to unpack .../61-libsqlite3-dev_3.23.1-1_amd64.deb ...
Unpacking libsqlite3-dev:amd64 (3.23.1-1) ...
Selecting previously unselected package libssl-dev:amd64.
Preparing to unpack .../62-libssl-dev_1.1.0h-2_amd64.deb ...
Unpacking libssl-dev:amd64 (1.1.0h-2) ...
Selecting previously unselected package libxml2-dev:amd64.
Preparing to unpack .../63-libxml2-dev_2.9.4+dfsg1-6.1_amd64.deb ...
Unpacking libxml2-dev:amd64 (2.9.4+dfsg1-6.1) ...
Selecting previously unselected package libxslt1.1:amd64.
Preparing to unpack .../64-libxslt1.1_1.1.29-5_amd64.deb ...
Unpacking libxslt1.1:amd64 (1.1.29-5) ...
Selecting previously unselected package libxslt1-dev:amd64.
Preparing to unpack .../65-libxslt1-dev_1.1.29-5_amd64.deb ...
Unpacking libxslt1-dev:amd64 (1.1.29-5) ...
Selecting previously unselected package openvpn.
Preparing to unpack .../66-openvpn_2.4.5-1_amd64.deb ...
Unpacking openvpn (2.4.5-1) ...
Selecting previously unselected package pkg-config.
Preparing to unpack .../67-pkg-config_0.29-4+b1_amd64.deb ...
Unpacking pkg-config (0.29-4+b1) ...
Selecting previously unselected package sbuild-build-depends-eurephia-dummy.
Preparing to unpack .../68-sbuild-build-depends-eurephia-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-eurephia-dummy (0.invalid.0) ...
Setting up libexpat1:amd64 (2.2.5-3) ...
Setting up libarchive-zip-perl (1.60-1) ...
Setting up libnghttp2-14:amd64 (1.31.1-1) ...
Setting up libtimedate-perl (2.3000-2) ...
Setting up libsigsegv2:amd64 (2.12-2) ...
Setting up libldap-common (2.4.45+dfsg-1) ...
Setting up libuv1:amd64 (1.18.0-3) ...
Setting up libpsl5:amd64 (0.20.1-1) ...
Setting up libelf1:amd64 (0.170-0.4) ...
Setting up groff-base (1.22.3-10) ...
Setting up libglib2.0-0:amd64 (2.56.1-2) ...
No schema files found: doing nothing.
Setting up libsasl2-modules-db:amd64 (2.1.27~101-g0780600+dfsg-3.1) ...
Setting up libsasl2-2:amd64 (2.1.27~101-g0780600+dfsg-3.1) ...
Setting up gettext-base (0.19.8.1-6) ...
Setting up cmake-data (3.11.1-1) ...
Setting up libpipeline1:amd64 (1.5.0-1) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-1+b1) ...
Setting up m4 (1.4.18-1) ...
Setting up libicu57:amd64 (57.1-9) ...
Setting up libprocps6:amd64 (2:3.3.14-1) ...
Setting up libxml2:amd64 (2.9.4+dfsg1-6.1) ...
Setting up libmagic-mgc (1:5.33-2) ...
Setting up libmagic1:amd64 (1:5.33-2) ...
Setting up lsb-base (9.20170808) ...
Setting up librhash0:amd64 (1.3.6-2) ...
Setting up procps (2:3.3.14-1) ...
update-alternatives: using /usr/bin/w.procps to provide /usr/bin/w (w) in auto mode
Setting up libcroco3:amd64 (0.6.12-2) ...
Setting up libxslt1.1:amd64 (1.1.29-5) ...
Setting up libssl1.0.2:amd64 (1.0.2o-1) ...
Setting up pkg-config (0.29-4+b1) ...
Setting up libssh2-1:amd64 (1.8.0-1) ...
Processing triggers for libc-bin (2.27-3) ...
Setting up autotools-dev (20180224.1) ...
Setting up libldap-2.4-2:amd64 (2.4.45+dfsg-1) ...
Setting up libssl1.1:amd64 (1.1.0h-2) ...
Setting up libsqlite3-0:amd64 (3.23.1-1) ...
Setting up icu-devtools (57.1-9) ...
Setting up libkeyutils1:amd64 (1.5.9-9.2) ...
Setting up bsdmainutils (11.1.2) ...
update-alternatives: using /usr/bin/bsd-write to provide /usr/bin/write (write) in auto mode
update-alternatives: using /usr/bin/bsd-from to provide /usr/bin/from (from) in auto mode
Setting up libmnl0:amd64 (1.0.4-2) ...
Setting up autopoint (0.19.8.1-6) ...
Setting up liblzo2-2:amd64 (2.08-1.2+b2) ...
Setting up libfile-stripnondeterminism-perl (0.041-1) ...
Setting up gettext (0.19.8.1-6) ...
Setting up libsqlite3-dev:amd64 (3.23.1-1) ...
Setting up libarchive13:amd64 (3.2.2-3.1) ...
Setting up libpkcs11-helper1:amd64 (1.22-4) ...
Setting up libssl-dev:amd64 (1.1.0h-2) ...
Setting up autoconf (2.69-11) ...
Setting up libicu-dev (57.1-9) ...
Setting up file (1:5.33-2) ...
Setting up iproute2 (4.15.0-3) ...
Setting up libkrb5support0:amd64 (1.16-2) ...
Setting up libxml2-dev:amd64 (2.9.4+dfsg1-6.1) ...
Setting up intltool-debian (0.35.0+20060710.4) ...
Setting up openvpn (2.4.5-1) ...
invoke-rc.d: could not determine current runlevel
All runlevel operations denied by policy
invoke-rc.d: policy-rc.d denied execution of cond-restart.
Setting up automake (1:1.15.1-3.1) ...
update-alternatives: using /usr/bin/automake-1.15 to provide /usr/bin/automake (automake) in auto mode
Setting up man-db (2.8.3-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up libxslt1-dev:amd64 (1.1.29-5) ...
Setting up libtool (2.4.6-2.1) ...
Setting up libk5crypto3:amd64 (1.16-2) ...
Setting up po-debconf (1.0.20) ...
Setting up libkrb5-3:amd64 (1.16-2) ...
Setting up libgssapi-krb5-2:amd64 (1.16-2) ...
Setting up libcurl3:amd64 (7.58.0-2) ...
Setting up cmake (3.11.1-1) ...
Setting up dh-autoreconf (17) ...
Setting up debhelper (11.2.1) ...
Setting up sbuild-build-depends-eurephia-dummy (0.invalid.0) ...
Setting up dh-strip-nondeterminism (0.041-1) ...
Processing triggers for libc-bin (2.27-3) ...

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.9.0-5-amd64 amd64 (x86_64)
Toolchain package versions: binutils_2.30-16 dpkg-dev_1.19.0.5 g++-7_7.3.0-17 gcc-7_7.3.0-17 libc6-dev_2.27-3 libstdc++-7-dev_7.3.0-17 libstdc++6_8-20180425-1 linux-libc-dev_4.15.17-1
Package versions: adduser_3.117 apt_1.6.1 autoconf_2.69-11 automake_1:1.15.1-3.1 autopoint_0.19.8.1-6 autotools-dev_20180224.1 base-files_10.1 base-passwd_3.5.45 bash_4.4.18-2 binutils_2.30-16 binutils-common_2.30-16 binutils-x86-64-linux-gnu_2.30-16 bsdmainutils_11.1.2 bsdutils_1:2.31.1-0.5 build-essential_12.5 bzip2_1.0.6-8.1 clang-6.0_1:6.0-3 cmake_3.11.1-1 cmake-data_3.11.1-1 coreutils_8.28-1 cpp_4:7.3.0-3 cpp-7_7.3.0-17 dash_0.5.8-2.10 debconf_1.5.66 debfoster_2.7-2.1+b1 debhelper_11.2.1 debian-archive-keyring_2017.7 debianutils_4.8.4 dh-autoreconf_17 dh-strip-nondeterminism_0.041-1 diffutils_1:3.6-1 dpkg_1.19.0.5 dpkg-dev_1.19.0.5 e2fslibs_1.44.1-2 e2fsprogs_1.44.1-2 eatmydata_105-6 fakeroot_1.22-2 fdisk_2.31.1-0.5 file_1:5.33-2 findutils_4.6.0+git+20171230-2 g++_4:7.3.0-3 g++-7_7.3.0-17 gcc_4:7.3.0-3 gcc-6-base_6.4.0-17 gcc-7_7.3.0-17 gcc-7-base_7.3.0-17 gcc-8-base_8-20180425-1 gettext_0.19.8.1-6 gettext-base_0.19.8.1-6 gpgv_2.2.5-1 grep_3.1-2 groff-base_1.22.3-10 gzip_1.6-5+b1 hostname_3.20 icu-devtools_57.1-9 init-system-helpers_1.51 intltool-debian_0.35.0+20060710.4 iproute2_4.15.0-3 lib32gcc1_1:8-20180425-1 lib32stdc++6_8-20180425-1 libacl1_2.2.52-3+b1 libapt-pkg5.0_1.6.1 libarchive-zip-perl_1.60-1 libarchive13_3.2.2-3.1 libasan4_7.3.0-17 libatomic1_8-20180425-1 libattr1_1:2.4.47-2+b2 libaudit-common_1:2.8.3-1 libaudit1_1:2.8.3-1 libbinutils_2.30-16 libblkid1_2.31.1-0.5 libbsd0_0.8.7-1 libbz2-1.0_1.0.6-8.1 libc-bin_2.27-3 libc-dev-bin_2.27-3 libc6_2.27-3 libc6-dev_2.27-3 libc6-i386_2.27-3 libcap-ng0_0.7.9-1 libcc1-0_8-20180425-1 libcilkrts5_7.3.0-17 libclang-common-6.0-dev_1:6.0-3 libclang1-6.0_1:6.0-3 libcom-err2_1.44.1-2 libcomerr2_1.44.1-2 libcroco3_0.6.12-2 libcurl3_7.58.0-2 libdb5.3_5.3.28-13.1+b1 libdebconfclient0_0.243 libdpkg-perl_1.19.0.5 libeatmydata1_105-6 libedit2_3.1-20170329-1 libelf1_0.170-0.4 libexpat1_2.2.5-3 libext2fs2_1.44.1-2 libfakeroot_1.22-2 libfdisk1_2.31.1-0.5 libffi6_3.2.1-8 libfile-stripnondeterminism-perl_0.041-1 libgc1c2_1:7.4.2-8.2 libgcc-7-dev_7.3.0-17 libgcc1_1:8-20180425-1 libgcrypt20_1.8.2-2 libgdbm-compat4_1.14.1-6 libgdbm3_1.8.3-14 libgdbm5_1.14.1-6 libglib2.0-0_2.56.1-2 libgmp10_2:6.1.2+dfsg-3 libgnutls30_3.5.18-1 libgomp1_8-20180425-1 libgpg-error0_1.29-4 libgssapi-krb5-2_1.16-2 libhogweed4_3.4-1 libicu-dev_57.1-9 libicu57_57.1-9 libidn2-0_2.0.4-1.1 libisl15_0.18-4 libisl19_0.19-1 libitm1_8-20180425-1 libjsoncpp1_1.7.4-3 libk5crypto3_1.16-2 libkeyutils1_1.5.9-9.2 libkrb5-3_1.16-2 libkrb5support0_1.16-2 libldap-2.4-2_2.4.45+dfsg-1 libldap-common_2.4.45+dfsg-1 libllvm6.0_1:6.0-3 liblsan0_8-20180425-1 liblz4-1_1.8.1.2-1 liblzma5_5.2.2-1.3 liblzo2-2_2.08-1.2+b2 libmagic-mgc_1:5.33-2 libmagic1_1:5.33-2 libmnl0_1.0.4-2 libmount1_2.31.1-0.5 libmpc3_1.1.0-1 libmpfr4_3.1.6-1 libmpfr6_4.0.1-1 libmpx2_8-20180425-1 libncurses5_6.1+20180210-2 libncursesw5_6.1+20180210-2 libnettle6_3.4-1 libnghttp2-14_1.31.1-1 libobjc-7-dev_7.3.0-17 libobjc4_8-20180425-1 libp11-kit0_0.23.10-2 libpam-modules_1.1.8-3.7 libpam-modules-bin_1.1.8-3.7 libpam-runtime_1.1.8-3.7 libpam0g_1.1.8-3.7 libpcre3_2:8.39-9 libperl5.26_5.26.2-3 libpipeline1_1.5.0-1 libpkcs11-helper1_1.22-4 libprocps6_2:3.3.14-1 libpsl5_0.20.1-1 libquadmath0_8-20180425-1 librhash0_1.3.6-2 librtmp1_2.4+20151223.gitfa8646d.1-1+b1 libsasl2-2_2.1.27~101-g0780600+dfsg-3.1 libsasl2-modules-db_2.1.27~101-g0780600+dfsg-3.1 libseccomp2_2.3.3-1 libselinux1_2.7-2+b2 libsemanage-common_2.7-2 libsemanage1_2.7-2+b2 libsepol1_2.7-1 libsigsegv2_2.12-2 libsmartcols1_2.31.1-0.5 libsqlite3-0_3.23.1-1 libsqlite3-dev_3.23.1-1 libss2_1.44.1-2 libssh2-1_1.8.0-1 libssl-dev_1.1.0h-2 libssl1.0.2_1.0.2o-1 libssl1.1_1.1.0h-2 libstdc++-7-dev_7.3.0-17 libstdc++6_8-20180425-1 libsystemd0_238-4 libtasn1-6_4.13-2 libtimedate-perl_2.3000-2 libtinfo5_6.1+20180210-2 libtinfo6_6.1+20180210-2 libtool_2.4.6-2.1 libtsan0_8-20180425-1 libubsan0_7.3.0-17 libudev1_238-4 libunistring2_0.9.8-1 libustr-1.0-1_1.0.4-6 libuuid1_2.31.1-0.5 libuv1_1.18.0-3 libxml2_2.9.4+dfsg1-6.1 libxml2-dev_2.9.4+dfsg1-6.1 libxslt1-dev_1.1.29-5 libxslt1.1_1.1.29-5 libzstd1_1.3.4+dfsg-1 linux-libc-dev_4.15.17-1 login_1:4.5-1 lsb-base_9.20170808 m4_1.4.18-1 make_4.2.1-1 man-db_2.8.3-2 mawk_1.3.3-17+b3 mount_2.31.1-0.5 multiarch-support_2.27-3 ncurses-base_6.1+20180210-2 ncurses-bin_6.1+20180210-2 openvpn_2.4.5-1 passwd_1:4.5-1 patch_2.7.6-2 perl_5.26.2-3 perl-base_5.26.2-3 perl-modules-5.26_5.26.2-3 pkg-config_0.29-4+b1 po-debconf_1.0.20 procps_2:3.3.14-1 sbuild-build-depends-core-dummy_0.invalid.0 sbuild-build-depends-eurephia-dummy_0.invalid.0 sed_4.4-2 sensible-utils_0.0.12 sysvinit-utils_2.88dsf-59.10 tar_1.30+dfsg-1 util-linux_2.31.1-0.5 xz-utils_5.2.2-1.3 zlib1g_1:1.2.11.dfsg-1

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/sbuild-nonexistent/.gnupg/trustedkeys.kbx': General error
gpgv: Signature made Fri Sep 16 07:44:07 2016 UTC
gpgv:                using RSA key 009B33756B9AAA55
gpgv:                issuer "agi@inittab.org"
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./eurephia_1.1.0-6.dsc
dpkg-source: info: extracting eurephia in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking eurephia_1.1.0.orig.tar.bz2
dpkg-source: info: unpacking eurephia_1.1.0-6.debian.tar.xz
dpkg-source: info: applying double-free.patch
dpkg-source: info: applying sql-error-handling.patch
dpkg-source: info: applying ldflags.patch
dpkg-source: info: applying reproducible-build.patch

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=en_US.UTF-8
LC_ALL=POSIX
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable-amd64-sbuild
SCHROOT_CHROOT_NAME=unstable-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=unstable-amd64-sbuild-a5f7748e-4e14-4787-b3b8-db3099d31384
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

dpkg-buildpackage: info: source package eurephia
dpkg-buildpackage: info: source version 1.1.0-6
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Alberto Gonzalez Iniesta <agi@inittab.org>
 dpkg-source --before-build eurephia-1.1.0
dpkg-buildpackage: info: host architecture amd64
 fakeroot debian/rules clean
dh clean
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
rm -rf configure.log
dh_auto_clean
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_clean
 debian/rules build-arch
dh build-arch
   dh_update_autotools_config -a
   debian/rules override_dh_auto_configure
make[1]: Entering directory '/<<PKGBUILDDIR>>'
CFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89" CPPFLAGS="-Wdate-time -D_FORTIFY_SOURCE=2" CXXFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" FCFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" FFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" GCJFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" LDFLAGS="-Wl,-z,relro" OBJCFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" OBJCXXFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security"  ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn
#
# Configure run at Wed May  2 13:28:27 UTC 2018
# Linux ip-172-31-13-156 4.9.0-5-amd64 #1 SMP Debian 4.9.65-3+deb9u2 (2018-01-04) x86_64 GNU/Linux
#
# ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn

Using cmake version 3.11.1

CMake suite maintained and supported by Kitware (kitware.com/cmake).
CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEGRITY_MAJOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEGRITY_MINOR_VERSION)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEGRITY_PATCH_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IAR-DetermineCompiler.cmake:15 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Intel-DetermineCompiler.cmake:23 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MIPSpro-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_SGI_COMPILER_VERSION)
      /* _SGI_COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_SGI_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_SGI_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_SGI_COMPILER_VERSION    % 10)
    # else
      /* _COMPILER_VERSION = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_COMPILER_VERSION/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_COMPILER_VERSION/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_COMPILER_VERSION    % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:14 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.11/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  the old evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  but the new evaluation rules produce:

    '
    # if defined(__ibmxl__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    # else
       /* __IBMC__ = VRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)
    # endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.11/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.11/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:128 (compiler_id_detection)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:147 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCompilerId.cmake:31 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.11/Modules/CMakeDetermineCCompiler.cmake:112 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is unknown
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29") 
-- Build Platform: Linux
-- Will build database interface for SQLite
-- Will build command line based admin utility
-- Building eurephia plug-in for OpenVPN
-- Looking for endian.h
-- Looking for endian.h - found
-- Looking for dlfcn.h
-- Looking for dlfcn.h - found
-- Looking for dlopen in dl
-- Looking for dlopen in dl - found
-- Looking for dlclose in dl
-- Looking for dlclose in dl - found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_mutex_lock in pthread
-- Looking for pthread_mutex_lock in pthread - found
-- Looking for pthread_mutex_unlock in pthread
-- Looking for pthread_mutex_unlock in pthread - found
-- Checking for one of the modules 'openssl'
-- Looking for RAND_load_file in crypto
-- Looking for RAND_load_file in crypto - found
-- Looking for RAND_pseudo_bytes in crypto
-- Looking for RAND_pseudo_bytes in crypto - found
-- Checking for one of the modules 'libxml-2.0;libxml2;libxml>=2.6'
-- Checking for one of the modules 'libxslt'
-- Checking for one of the modules 'sqlite3'
-- sqlite3 binary was not found.  You will need to generate the database file on your own
-- Looking for sem_wait in rt
-- Looking for sem_wait in rt - not found
-- Looking for sem_timedwait in rt
-- Looking for sem_timedwait in rt - not found
-- Looking for sem_post in rt
-- Looking for sem_post in rt - not found
-- * sem_wait was not found in librt, trying libpthread
-- Looking for sem_wait in pthread
-- Looking for sem_wait in pthread - found
-- * sem_timedwait was not found in librt, trying libpthread
-- Looking for sem_timedwait in pthread
-- Looking for sem_timedwait in pthread - found
-- * sem_post was not found in librt, trying libpthread
-- Looking for sem_post in pthread
-- Looking for sem_post in pthread - found
-- Looking for mq_open in rt
-- Looking for mq_open in rt - found
-- Looking for mq_close in rt
-- Looking for mq_close in rt - found
-- Looking for mq_unlink in rt
-- Looking for mq_unlink in rt - found
-- Looking for mq_send in rt
-- Looking for mq_send in rt - found
-- Looking for mq_receive in rt
-- Looking for mq_receive in rt - found
-- Looking for mq_getattr in rt
-- Looking for mq_getattr in rt - found
-- Will build iptables firewall module
-- Configuring done
-- Generating done
CMake Warning:
  Manually-specified variables were not used by the project:

    SQLITE3PREFIX


-- Build files have been written to: /<<PKGBUILDDIR>>

Building options:
                 CFLAGS: -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89 -fno-delete-null-pointer-checks -g -Wall -Wpointer-arith

eurephia will be built with support for: 

               Database: SQLite3 
               Firewall: iptables 
        OpenVPN plug-in: eurephia-auth
            Admin tools: eurephiadm 

         Install prefix: /usr
           Binaries dir: /usr/bin
          Man pages dir: /usr/share/man
           Plug-in path: /usr/lib/eurephia
         XSLT base path: /usr/share/eurephia/xslt
   eurephiadm XSLT path: /usr/share/eurephia/xslt/eurephiadm
  SQLite3 database path: /var/lib/eurephia


make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_auto_build -a
	make -j1
make[1]: Entering directory '/<<PKGBUILDDIR>>'
make[2]: Entering directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target eurephiacommon
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[  1%] Building C object common/CMakeFiles/eurephiacommon.dir/certinfo.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[  2%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_getsym.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[  4%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_log.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[  5%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_nullsafe.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[  6%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_values.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
        if( (vls == NULL) ) {
             ~~~~^~~~~~~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: remove extraneous parentheses around the comparison to silence this warning
        if( (vls == NULL) ) {
            ~    ^      ~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: use '=' to turn this equality comparison into an assignment
        if( (vls == NULL) ) {
                 ^~
                 =
1 warning generated.
[  8%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_cfgfile.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[  9%] Building C object common/CMakeFiles/eurephiacommon.dir/passwd.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 11%] Building C object common/CMakeFiles/eurephiacommon.dir/randstr.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/common/randstr.c:65:21: warning: 'RAND_pseudo_bytes' is deprecated [-Wdeprecated-declarations]
                if( RAND_pseudo_bytes((unsigned char *) rndstr, len) ) {
                    ^
/usr/include/openssl/rand.h:47:1: note: 'RAND_pseudo_bytes' has been explicitly marked deprecated here
DEPRECATEDIN_1_1_0(int RAND_pseudo_bytes(unsigned char *buf, int num))
^
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h:124:34: note: expanded from macro 'DEPRECATEDIN_1_1_0'
# define DEPRECATEDIN_1_1_0(f)   DECLARE_DEPRECATED(f)
                                 ^
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h:99:53: note: expanded from macro 'DECLARE_DEPRECATED'
# define DECLARE_DEPRECATED(f)    f __attribute__ ((deprecated));
                                                    ^
1 warning generated.
[ 12%] Building C object common/CMakeFiles/eurephiacommon.dir/sha512.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 13%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 15%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_xml.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/common/eurephia_xml.c:227:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrVPrintf(msg, 2048, xmlfmt, ap);
                                 ^~~~~~
/usr/include/libxml2/libxml/xmlstring.h:105:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
1 warning generated.
[ 16%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb_mapping.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 18%] Linking C static library libeurephiacommon.a
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 18%] Built target eurephiacommon
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target edb-sqlite
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 19%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/sqlite.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 20%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/edb-sqlite.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 22%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/__/__/common/eurephiadb_session_common.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 23%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/authentication.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 25%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/firewalladmin.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 26%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/attempts.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 27%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/blacklist.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 29%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/usercerts.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:120:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 7));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:124:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 8));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
4 warnings generated.
[ 30%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/configuration.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 31%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/useraccount.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:39: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                      ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:58: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                   ~~~   ^~~~~~~~~~~~~~~~~~~
                                                   %lld
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                 ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:53: warning: format specifies type 'long' but the argument has type 'int' [-Wformat]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                              ~~~   ^~~
                                              %d
4 warnings generated.
[ 33%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/certificates.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:114:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 2));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:118:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 3));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:42: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                         ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:61: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                      ~~~   ^~~~~~~~~~~~~~~~~~~
                                                      %lld
6 warnings generated.
[ 34%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/lastlog.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
[ 36%] Linking C shared library edb-sqlite.so
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 37%] Built target edb-sqlite
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 38%] Creating buildinfo.h
./mk_buildinfo.sh: 30: ./mk_buildinfo.sh: [[: not found
./mk_buildinfo.sh: 60: ./mk_buildinfo.sh: [[: not found
Scanning dependencies of target eurephiadm
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 40%] Building C object eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o
clang: warning: optimization flag '-fno-delete-null-pointer-checks' is not supported [-Wignored-optimization-argument]
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:203:47: error: function definition is not allowed here
        void dump_values(eurephiaVALUES *vls) {
                                              ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:216:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(cfg);
                ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:221:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(ctx->dbc->config);
                ^
2 warnings and 1 error generated.
make[3]: *** [eurephiadm/CMakeFiles/eurephiadm.dir/build.make:67: eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o] Error 1
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[2]: *** [CMakeFiles/Makefile2:209: eurephiadm/CMakeFiles/eurephiadm.dir/all] Error 2
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
make[1]: *** [Makefile:130: all] Error 2
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
dh_auto_build: make -j1 returned exit code 2
make: *** [debian/rules:3: build-arch] Error 2
dpkg-buildpackage: error: debian/rules build-arch subprocess returned exit status 2
--------------------------------------------------------------------------------
Build finished at 2018-05-02T13:28:33Z

Finished
--------


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use
E: Build failure (dpkg-buildpackage died)

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: any
Build-Space: 4596
Build-Time: 7
Distribution: unstable
Fail-Stage: build
Host Architecture: amd64
Install-Time: 10
Job: eurephia_1.1.0-6
Machine Architecture: amd64
Package: eurephia
Package-Time: 30
Source-Version: 1.1.0-6
Space: 4596
Status: attempted
Version: 1.1.0-6
--------------------------------------------------------------------------------
Finished at 2018-05-02T13:28:33Z
Build needed 00:00:30, 4596k disk space
E: Build failure (dpkg-buildpackage died)
DC-Status: Failed 31.193223017s

DC-Build-Header: saint 2.5.0+dfsg-3 / 2020-02-25 06:36:08 +0000
DC-Task: type:rebuild-binarch-only source:saint version:2.5.0+dfsg-3 chroot:unstable esttime:50 logfile:/tmp/saint_2.5.0+dfsg-3_unstable_clang9.log modes:clang9:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v --no-run-lintian --chroot-setup-commands=/tmp/clang9 saint_2.5.0+dfsg-3'
sbuild (Debian sbuild) 0.78.1 (09 February 2019) on ip-172-31-15-81.eu-central-1.compute.internal

+==============================================================================+
| saint 2.5.0+dfsg-3 (amd64)                   Tue, 25 Feb 2020 06:36:09 +0000 |
+==============================================================================+

Package: saint
Version: 2.5.0+dfsg-3
Source Version: 2.5.0+dfsg-3
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: binary

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/sid-amd64-sbuild-af090a5f-b6a6-4d5b-8d23-7f1d99e8a191' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang9
-----------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=9
+ echo 'Install of clang-9'
Install of clang-9
+ apt-get update
Get:1 http://127.0.0.1:12990/debian sid InRelease [142 kB]
Get:2 http://127.0.0.1:12990/debian sid/main Sources.diff/Index [27.9 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 Packages.diff/Index [27.9 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-0823.32.pdiff [11.0 kB]
Get:5 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-1420.34.pdiff [30.2 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-2014.03.pdiff [16.9 kB]
Get:7 http://127.0.0.1:12990/debian sid/main Sources 2020-02-25-0213.11.pdiff [23.2 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-0823.32.pdiff [15.5 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-1420.34.pdiff [27.5 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-2014.03.pdiff [21.6 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-25-0213.11.pdiff [35.0 kB]
Get:7 http://127.0.0.1:12990/debian sid/main Sources 2020-02-25-0213.11.pdiff [23.2 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-25-0213.11.pdiff [35.0 kB]
Get:12 http://127.0.0.1:12990/debian sid/main Translation-en [6193 kB]
Fetched 6572 kB in 2s (3417 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-9 libomp-9-dev libobjc-9-dev
Reading package lists...
Building dependency tree...
The following additional packages will be installed:
  gcc-8-base lib32gcc-s1 lib32gcc1 lib32stdc++6 libbsd0 libc6-i386
  libclang-common-9-dev libclang-cpp9 libedit2 libgc1c2 libgcc-8-dev libllvm9
  libmpx2 libobjc-8-dev libobjc4 libomp5-9 libstdc++-8-dev libz3-4
Suggested packages:
  clang-9-doc libomp-9-doc libstdc++-8-doc
Recommended packages:
  llvm-9-dev python3
The following NEW packages will be installed:
  clang-9 gcc-8-base lib32gcc-s1 lib32gcc1 lib32stdc++6 libbsd0 libc6-i386
  libclang-common-9-dev libclang-cpp9 libedit2 libgc1c2 libgcc-8-dev libllvm9
  libmpx2 libobjc-8-dev libobjc-9-dev libobjc4 libomp-9-dev libomp5-9
  libstdc++-8-dev libz3-4
0 upgraded, 21 newly installed, 0 to remove and 2 not upgraded.
Need to get 43.9 MB of archives.
After this operation, 237 MB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libbsd0 amd64 0.10.0-1 [107 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 libedit2 amd64 3.1-20191231-1 [95.4 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libz3-4 amd64 4.8.7-4 [6790 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 libllvm9 amd64 1:9.0.1-8 [15.0 MB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libclang-cpp9 amd64 1:9.0.1-8 [8429 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 gcc-8-base amd64 8.3.0-29 [194 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libmpx2 amd64 8.3.0-29 [11.4 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libgcc-8-dev amd64 8.3.0-29 [2297 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libstdc++-8-dev amd64 8.3.0-29 [1543 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libgc1c2 amd64 1:7.6.4-0.4 [224 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libobjc4 amd64 10-20200222-1 [41.6 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libobjc-8-dev amd64 8.3.0-29 [227 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 libc6-i386 amd64 2.29-10 [2918 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc-s1 amd64 10-20200222-1 [49.4 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc1 amd64 1:10-20200222-1 [1104 B]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 lib32stdc++6 amd64 10-20200222-1 [510 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libclang-common-9-dev amd64 1:9.0.1-8 [3727 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 clang-9 amd64 1:9.0.1-8 [1156 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 libobjc-9-dev amd64 9.2.1-29 [219 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libomp5-9 amd64 1:9.0.1-8 [333 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libomp-9-dev amd64 1:9.0.1-8 [66.2 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 43.9 MB in 1s (80.0 MB/s)
Selecting previously unselected package libbsd0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 12119 files and directories currently installed.)
Preparing to unpack .../00-libbsd0_0.10.0-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.10.0-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../01-libedit2_3.1-20191231-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20191231-1) ...
Selecting previously unselected package libz3-4:amd64.
Preparing to unpack .../02-libz3-4_4.8.7-4_amd64.deb ...
Unpacking libz3-4:amd64 (4.8.7-4) ...
Selecting previously unselected package libllvm9:amd64.
Preparing to unpack .../03-libllvm9_1%3a9.0.1-8_amd64.deb ...
Unpacking libllvm9:amd64 (1:9.0.1-8) ...
Selecting previously unselected package libclang-cpp9.
Preparing to unpack .../04-libclang-cpp9_1%3a9.0.1-8_amd64.deb ...
Unpacking libclang-cpp9 (1:9.0.1-8) ...
Selecting previously unselected package gcc-8-base:amd64.
Preparing to unpack .../05-gcc-8-base_8.3.0-29_amd64.deb ...
Unpacking gcc-8-base:amd64 (8.3.0-29) ...
Selecting previously unselected package libmpx2:amd64.
Preparing to unpack .../06-libmpx2_8.3.0-29_amd64.deb ...
Unpacking libmpx2:amd64 (8.3.0-29) ...
Selecting previously unselected package libgcc-8-dev:amd64.
Preparing to unpack .../07-libgcc-8-dev_8.3.0-29_amd64.deb ...
Unpacking libgcc-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libstdc++-8-dev:amd64.
Preparing to unpack .../08-libstdc++-8-dev_8.3.0-29_amd64.deb ...
Unpacking libstdc++-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libgc1c2:amd64.
Preparing to unpack .../09-libgc1c2_1%3a7.6.4-0.4_amd64.deb ...
Unpacking libgc1c2:amd64 (1:7.6.4-0.4) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../10-libobjc4_10-20200222-1_amd64.deb ...
Unpacking libobjc4:amd64 (10-20200222-1) ...
Selecting previously unselected package libobjc-8-dev:amd64.
Preparing to unpack .../11-libobjc-8-dev_8.3.0-29_amd64.deb ...
Unpacking libobjc-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../12-libc6-i386_2.29-10_amd64.deb ...
Unpacking libc6-i386 (2.29-10) ...
Selecting previously unselected package lib32gcc-s1.
Preparing to unpack .../13-lib32gcc-s1_10-20200222-1_amd64.deb ...
Unpacking lib32gcc-s1 (10-20200222-1) ...
Selecting previously unselected package lib32gcc1.
Preparing to unpack .../14-lib32gcc1_1%3a10-20200222-1_amd64.deb ...
Unpacking lib32gcc1 (1:10-20200222-1) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../15-lib32stdc++6_10-20200222-1_amd64.deb ...
Unpacking lib32stdc++6 (10-20200222-1) ...
Selecting previously unselected package libclang-common-9-dev.
Preparing to unpack .../16-libclang-common-9-dev_1%3a9.0.1-8_amd64.deb ...
Unpacking libclang-common-9-dev (1:9.0.1-8) ...
Selecting previously unselected package clang-9.
Preparing to unpack .../17-clang-9_1%3a9.0.1-8_amd64.deb ...
Unpacking clang-9 (1:9.0.1-8) ...
Selecting previously unselected package libobjc-9-dev:amd64.
Preparing to unpack .../18-libobjc-9-dev_9.2.1-29_amd64.deb ...
Unpacking libobjc-9-dev:amd64 (9.2.1-29) ...
Selecting previously unselected package libomp5-9:amd64.
Preparing to unpack .../19-libomp5-9_1%3a9.0.1-8_amd64.deb ...
Unpacking libomp5-9:amd64 (1:9.0.1-8) ...
Selecting previously unselected package libomp-9-dev.
Preparing to unpack .../20-libomp-9-dev_1%3a9.0.1-8_amd64.deb ...
Unpacking libomp-9-dev (1:9.0.1-8) ...
Setting up libgc1c2:amd64 (1:7.6.4-0.4) ...
Setting up libobjc4:amd64 (10-20200222-1) ...
Setting up libz3-4:amd64 (4.8.7-4) ...
Setting up gcc-8-base:amd64 (8.3.0-29) ...
Setting up libobjc-9-dev:amd64 (9.2.1-29) ...
Setting up libmpx2:amd64 (8.3.0-29) ...
Setting up libc6-i386 (2.29-10) ...
Setting up libbsd0:amd64 (0.10.0-1) ...
Setting up libomp5-9:amd64 (1:9.0.1-8) ...
Setting up libedit2:amd64 (3.1-20191231-1) ...
Setting up lib32gcc-s1 (10-20200222-1) ...
Setting up libgcc-8-dev:amd64 (8.3.0-29) ...
Setting up libomp-9-dev (1:9.0.1-8) ...
Setting up libllvm9:amd64 (1:9.0.1-8) ...
Setting up libstdc++-8-dev:amd64 (8.3.0-29) ...
Setting up libclang-cpp9 (1:9.0.1-8) ...
Setting up lib32gcc1 (1:10-20200222-1) ...
Setting up libobjc-8-dev:amd64 (8.3.0-29) ...
Setting up lib32stdc++6 (10-20200222-1) ...
Setting up libclang-common-9-dev (1:9.0.1-8) ...
Setting up clang-9 (1:9.0.1-8) ...
Processing triggers for libc-bin (2.29-10) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8 9 10'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-9 g++-4.6
+ ln -s clang-9 gcc-4.6
+ ln -s clang-9 cpp-4.6
+ ln -s clang-9 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-9 g++-4.7
+ ln -s clang-9 gcc-4.7
+ ln -s clang-9 cpp-4.7
+ ln -s clang-9 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-9 g++-4.8
+ ln -s clang-9 gcc-4.8
+ ln -s clang-9 cpp-4.8
+ ln -s clang-9 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-9 g++-4.9
+ ln -s clang-9 gcc-4.9
+ ln -s clang-9 cpp-4.9
+ ln -s clang-9 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-9 g++-5
+ ln -s clang-9 gcc-5
+ ln -s clang-9 cpp-5
+ ln -s clang-9 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-9 g++-6
+ ln -s clang-9 gcc-6
+ ln -s clang-9 cpp-6
+ ln -s clang-9 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-9 g++-7
+ ln -s clang-9 gcc-7
+ ln -s clang-9 cpp-7
+ ln -s clang-9 gcc
+ echo 'gcc-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-9 g++-8
+ ln -s clang-9 gcc-8
+ ln -s clang-9 cpp-8
+ ln -s clang-9 gcc
+ echo 'gcc-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-9 gcc-9 cpp-9 gcc
+ ln -s clang++-9 g++-9
+ ln -s clang-9 gcc-9
+ ln -s clang-9 cpp-9
+ ln -s clang-9 gcc
+ echo 'gcc-9 hold'
+ dpkg --set-selections
+ echo 'g++-9 hold'
+ dpkg --set-selections
+ for VERSION in $VERSIONS
+ rm -f g++-10 gcc-10 cpp-10 gcc
+ ln -s clang++-9 g++-10
+ ln -s clang-9 gcc-10
+ ln -s clang-9 cpp-10
+ ln -s clang-9 gcc
+ echo 'gcc-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ cd -
/build/saint-ClWLLu
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang

I: Finished running '/tmp/clang9'.

Finished processing commands.
--------------------------------------------------------------------------------
I: NOTICE: Log filtering will replace 'build/saint-ClWLLu/resolver-7RQWJG' with '<<RESOLVERDIR>>'

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:12990/debian sid InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  libgmp10 zlib1g
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 343 kB of archives.
After this operation, 0 B of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libgmp10 amd64 2:6.2.0+dfsg-4 [253 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 zlib1g amd64 1:1.2.11.dfsg-2 [90.4 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 343 kB in 0s (3514 kB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13921 files and directories currently installed.)
Preparing to unpack .../libgmp10_2%3a6.2.0+dfsg-4_amd64.deb ...
Unpacking libgmp10:amd64 (2:6.2.0+dfsg-4) over (2:6.2.0+dfsg-3) ...
Setting up libgmp10:amd64 (2:6.2.0+dfsg-4) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13921 files and directories currently installed.)
Preparing to unpack .../zlib1g_1%3a1.2.11.dfsg-2_amd64.deb ...
Unpacking zlib1g:amd64 (1:1.2.11.dfsg-2) over (1:1.2.11.dfsg-1.2) ...
Setting up zlib1g:amd64 (1:1.2.11.dfsg-2) ...
Processing triggers for libc-bin (2.29-10) ...

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
NOTICE: 'saint' packaging is maintained in the 'Git' version control system at:
https://salsa.debian.org/med-team/saint.git
Please use:
git clone https://salsa.debian.org/med-team/saint.git
to retrieve the latest (possibly unreleased) updates to the package.
Need to get 124 kB of source archives.
Get:1 http://127.0.0.1:12990/debian sid/main saint 2.5.0+dfsg-3 (dsc) [1994 B]
Get:2 http://127.0.0.1:12990/debian sid/main saint 2.5.0+dfsg-3 (tar) [117 kB]
Get:3 http://127.0.0.1:12990/debian sid/main saint 2.5.0+dfsg-3 (diff) [5040 B]
Fetched 124 kB in 0s (1323 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/saint-ClWLLu/saint-2.5.0+dfsg' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/saint-ClWLLu' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper (>= 11~), libgsl-dev, build-essential, fakeroot
Filtered Build-Depends: debhelper (>= 11~), libgsl-dev, build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-main-dummy' in '/<<RESOLVERDIR>>/apt_archive/sbuild-build-depends-main-dummy.deb'.
Ign:1 copy:/<<RESOLVERDIR>>/apt_archive ./ InRelease
Get:2 copy:/<<RESOLVERDIR>>/apt_archive ./ Release [957 B]
Ign:3 copy:/<<RESOLVERDIR>>/apt_archive ./ Release.gpg
Get:4 copy:/<<RESOLVERDIR>>/apt_archive ./ Sources [377 B]
Get:5 copy:/<<RESOLVERDIR>>/apt_archive ./ Packages [457 B]
Fetched 1791 B in 0s (171 kB/s)
Reading package lists...
Reading package lists...

Install main build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils debhelper
  dh-autoreconf dh-strip-nondeterminism dwz file gettext gettext-base
  groff-base intltool-debian libarchive-zip-perl libcroco3 libdebhelper-perl
  libelf1 libfile-stripnondeterminism-perl libglib2.0-0 libgsl-dev libgsl23
  libgslcblas0 libicu63 libmagic-mgc libmagic1 libpipeline1 libsigsegv2
  libsub-override-perl libtool libuchardet0 libxml2 m4 man-db po-debconf
  sensible-utils
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc wamerican | wordlist whois
  vacation dh-make gettext-doc libasprintf-dev libgettextpo-dev groff
  gsl-ref-psdoc | gsl-doc-pdf | gsl-doc-info | gsl-ref-html libtool-doc
  gfortran | fortran95-compiler gcj-jdk m4-doc apparmor less www-browser
  libmail-box-perl
Recommended packages:
  curl | wget | lynx libarchive-cpio-perl libglib2.0-data shared-mime-info
  xdg-user-dirs libltdl-dev libmail-sendmail-perl
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils debhelper
  dh-autoreconf dh-strip-nondeterminism dwz file gettext gettext-base
  groff-base intltool-debian libarchive-zip-perl libcroco3 libdebhelper-perl
  libelf1 libfile-stripnondeterminism-perl libglib2.0-0 libgsl-dev libgsl23
  libgslcblas0 libicu63 libmagic-mgc libmagic1 libpipeline1 libsigsegv2
  libsub-override-perl libtool libuchardet0 libxml2 m4 man-db po-debconf
  sbuild-build-depends-main-dummy sensible-utils
0 upgraded, 37 newly installed, 0 to remove and 0 not upgraded.
Need to get 21.2 MB of archives.
After this operation, 80.3 MB of additional disk space will be used.
Get:1 copy:/<<RESOLVERDIR>>/apt_archive ./ sbuild-build-depends-main-dummy 0.invalid.0 [884 B]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 bsdmainutils amd64 11.1.2+b1 [191 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libuchardet0 amd64 0.0.6-3 [64.9 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 groff-base amd64 1.22.4-4 [919 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libpipeline1 amd64 1.5.2-2 [33.9 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 man-db amd64 2.9.0-2 [1307 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 sensible-utils all 0.0.12+nmu1 [16.0 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libmagic-mgc amd64 1:5.38-4 [262 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libmagic1 amd64 1:5.38-4 [120 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 file amd64 1:5.38-4 [67.9 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 gettext-base amd64 0.19.8.1-10 [123 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libsigsegv2 amd64 2.12-2 [32.8 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 m4 amd64 1.4.18-4 [203 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 autoconf all 2.69-11.1 [341 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 autotools-dev all 20180224.1 [77.0 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 automake all 1:1.16.1-4 [771 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 autopoint all 0.19.8.1-10 [435 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libtool all 2.4.6-13 [513 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 dh-autoreconf all 19 [16.9 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libdebhelper-perl all 12.9 [183 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libarchive-zip-perl all 1.67-1 [104 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libsub-override-perl all 0.09-2 [10.2 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libfile-stripnondeterminism-perl all 1.6.3-2 [23.7 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 dh-strip-nondeterminism all 1.6.3-2 [14.7 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 libelf1 amd64 0.176-1.1 [161 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 dwz amd64 0.13-5 [151 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 libglib2.0-0 amd64 2.62.4-2 [1319 kB]
Get:28 http://127.0.0.1:12990/debian sid/main amd64 libicu63 amd64 63.2-2 [8301 kB]
Get:29 http://127.0.0.1:12990/debian sid/main amd64 libxml2 amd64 2.9.10+dfsg-3 [709 kB]
Get:30 http://127.0.0.1:12990/debian sid/main amd64 libcroco3 amd64 0.6.13-1 [146 kB]
Get:31 http://127.0.0.1:12990/debian sid/main amd64 gettext amd64 0.19.8.1-10 [1303 kB]
Get:32 http://127.0.0.1:12990/debian sid/main amd64 intltool-debian all 0.35.0+20060710.5 [26.8 kB]
Get:33 http://127.0.0.1:12990/debian sid/main amd64 po-debconf all 1.0.21 [248 kB]
Get:34 http://127.0.0.1:12990/debian sid/main amd64 debhelper all 12.9 [994 kB]
Get:35 http://127.0.0.1:12990/debian sid/main amd64 libgslcblas0 amd64 2.5+dfsg-6+b1 [102 kB]
Get:36 http://127.0.0.1:12990/debian sid/main amd64 libgsl23 amd64 2.5+dfsg-6+b1 [879 kB]
Get:37 http://127.0.0.1:12990/debian sid/main amd64 libgsl-dev amd64 2.5+dfsg-6+b1 [1063 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 21.2 MB in 0s (75.2 MB/s)
Selecting previously unselected package bsdmainutils.
(Reading database ... 13921 files and directories currently installed.)
Preparing to unpack .../00-bsdmainutils_11.1.2+b1_amd64.deb ...
Unpacking bsdmainutils (11.1.2+b1) ...
Selecting previously unselected package libuchardet0:amd64.
Preparing to unpack .../01-libuchardet0_0.0.6-3_amd64.deb ...
Unpacking libuchardet0:amd64 (0.0.6-3) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../02-groff-base_1.22.4-4_amd64.deb ...
Unpacking groff-base (1.22.4-4) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../03-libpipeline1_1.5.2-2_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.2-2) ...
Selecting previously unselected package man-db.
Preparing to unpack .../04-man-db_2.9.0-2_amd64.deb ...
Unpacking man-db (2.9.0-2) ...
Selecting previously unselected package sensible-utils.
Preparing to unpack .../05-sensible-utils_0.0.12+nmu1_all.deb ...
Unpacking sensible-utils (0.0.12+nmu1) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../06-libmagic-mgc_1%3a5.38-4_amd64.deb ...
Unpacking libmagic-mgc (1:5.38-4) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../07-libmagic1_1%3a5.38-4_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.38-4) ...
Selecting previously unselected package file.
Preparing to unpack .../08-file_1%3a5.38-4_amd64.deb ...
Unpacking file (1:5.38-4) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../09-gettext-base_0.19.8.1-10_amd64.deb ...
Unpacking gettext-base (0.19.8.1-10) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../10-libsigsegv2_2.12-2_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.12-2) ...
Selecting previously unselected package m4.
Preparing to unpack .../11-m4_1.4.18-4_amd64.deb ...
Unpacking m4 (1.4.18-4) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../12-autoconf_2.69-11.1_all.deb ...
Unpacking autoconf (2.69-11.1) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../13-autotools-dev_20180224.1_all.deb ...
Unpacking autotools-dev (20180224.1) ...
Selecting previously unselected package automake.
Preparing to unpack .../14-automake_1%3a1.16.1-4_all.deb ...
Unpacking automake (1:1.16.1-4) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../15-autopoint_0.19.8.1-10_all.deb ...
Unpacking autopoint (0.19.8.1-10) ...
Selecting previously unselected package libtool.
Preparing to unpack .../16-libtool_2.4.6-13_all.deb ...
Unpacking libtool (2.4.6-13) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../17-dh-autoreconf_19_all.deb ...
Unpacking dh-autoreconf (19) ...
Selecting previously unselected package libdebhelper-perl.
Preparing to unpack .../18-libdebhelper-perl_12.9_all.deb ...
Unpacking libdebhelper-perl (12.9) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../19-libarchive-zip-perl_1.67-1_all.deb ...
Unpacking libarchive-zip-perl (1.67-1) ...
Selecting previously unselected package libsub-override-perl.
Preparing to unpack .../20-libsub-override-perl_0.09-2_all.deb ...
Unpacking libsub-override-perl (0.09-2) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../21-libfile-stripnondeterminism-perl_1.6.3-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (1.6.3-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../22-dh-strip-nondeterminism_1.6.3-2_all.deb ...
Unpacking dh-strip-nondeterminism (1.6.3-2) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../23-libelf1_0.176-1.1_amd64.deb ...
Unpacking libelf1:amd64 (0.176-1.1) ...
Selecting previously unselected package dwz.
Preparing to unpack .../24-dwz_0.13-5_amd64.deb ...
Unpacking dwz (0.13-5) ...
Selecting previously unselected package libglib2.0-0:amd64.
Preparing to unpack .../25-libglib2.0-0_2.62.4-2_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.62.4-2) ...
Selecting previously unselected package libicu63:amd64.
Preparing to unpack .../26-libicu63_63.2-2_amd64.deb ...
Unpacking libicu63:amd64 (63.2-2) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../27-libxml2_2.9.10+dfsg-3_amd64.deb ...
Unpacking libxml2:amd64 (2.9.10+dfsg-3) ...
Selecting previously unselected package libcroco3:amd64.
Preparing to unpack .../28-libcroco3_0.6.13-1_amd64.deb ...
Unpacking libcroco3:amd64 (0.6.13-1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../29-gettext_0.19.8.1-10_amd64.deb ...
Unpacking gettext (0.19.8.1-10) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../30-intltool-debian_0.35.0+20060710.5_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.5) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../31-po-debconf_1.0.21_all.deb ...
Unpacking po-debconf (1.0.21) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../32-debhelper_12.9_all.deb ...
Unpacking debhelper (12.9) ...
Selecting previously unselected package libgslcblas0:amd64.
Preparing to unpack .../33-libgslcblas0_2.5+dfsg-6+b1_amd64.deb ...
Unpacking libgslcblas0:amd64 (2.5+dfsg-6+b1) ...
Selecting previously unselected package libgsl23:amd64.
Preparing to unpack .../34-libgsl23_2.5+dfsg-6+b1_amd64.deb ...
Unpacking libgsl23:amd64 (2.5+dfsg-6+b1) ...
Selecting previously unselected package libgsl-dev.
Preparing to unpack .../35-libgsl-dev_2.5+dfsg-6+b1_amd64.deb ...
Unpacking libgsl-dev (2.5+dfsg-6+b1) ...
Selecting previously unselected package sbuild-build-depends-main-dummy.
Preparing to unpack .../36-sbuild-build-depends-main-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-main-dummy (0.invalid.0) ...
Setting up libpipeline1:amd64 (1.5.2-2) ...
Setting up libgslcblas0:amd64 (2.5+dfsg-6+b1) ...
Setting up libmagic-mgc (1:5.38-4) ...
Setting up libarchive-zip-perl (1.67-1) ...
Setting up libglib2.0-0:amd64 (2.62.4-2) ...
No schema files found: doing nothing.
Setting up libdebhelper-perl (12.9) ...
Setting up libmagic1:amd64 (1:5.38-4) ...
Setting up gettext-base (0.19.8.1-10) ...
Setting up file (1:5.38-4) ...
Setting up libicu63:amd64 (63.2-2) ...
Setting up autotools-dev (20180224.1) ...
Setting up libgsl23:amd64 (2.5+dfsg-6+b1) ...
Setting up libsigsegv2:amd64 (2.12-2) ...
Setting up bsdmainutils (11.1.2+b1) ...
update-alternatives: using /usr/bin/bsd-write to provide /usr/bin/write (write) in auto mode
update-alternatives: using /usr/bin/bsd-from to provide /usr/bin/from (from) in auto mode
Setting up autopoint (0.19.8.1-10) ...
Setting up sensible-utils (0.0.12+nmu1) ...
Setting up libuchardet0:amd64 (0.0.6-3) ...
Setting up libsub-override-perl (0.09-2) ...
Setting up libelf1:amd64 (0.176-1.1) ...
Setting up libxml2:amd64 (2.9.10+dfsg-3) ...
Setting up libfile-stripnondeterminism-perl (1.6.3-2) ...
Setting up libgsl-dev (2.5+dfsg-6+b1) ...
Setting up libtool (2.4.6-13) ...
Setting up m4 (1.4.18-4) ...
Setting up libcroco3:amd64 (0.6.13-1) ...
Setting up autoconf (2.69-11.1) ...
Setting up dh-strip-nondeterminism (1.6.3-2) ...
Setting up dwz (0.13-5) ...
Setting up groff-base (1.22.4-4) ...
Setting up automake (1:1.16.1-4) ...
update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Setting up gettext (0.19.8.1-10) ...
Setting up man-db (2.9.0-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up intltool-debian (0.35.0+20060710.5) ...
Setting up po-debconf (1.0.21) ...
Setting up dh-autoreconf (19) ...
Setting up debhelper (12.9) ...
Setting up sbuild-build-depends-main-dummy (0.invalid.0) ...
Processing triggers for libc-bin (2.29-10) ...

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any)

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) amd64 (x86_64)
Toolchain package versions: binutils_2.34-3 dpkg-dev_1.19.7 g++-9_9.2.1-29 gcc-9_9.2.1-29 libc6-dev_2.29-10 libstdc++-8-dev_8.3.0-29 libstdc++-9-dev_9.2.1-29 libstdc++6_10-20200222-1 linux-libc-dev_5.4.19-1
Package versions: adduser_3.118 apt_1.8.4 autoconf_2.69-11.1 automake_1:1.16.1-4 autopoint_0.19.8.1-10 autotools-dev_20180224.1 base-files_11 base-passwd_3.5.47 bash_5.0-5 binutils_2.34-3 binutils-common_2.34-3 binutils-x86-64-linux-gnu_2.34-3 bsdmainutils_11.1.2+b1 bsdutils_1:2.34-0.1 build-essential_12.8 bzip2_1.0.8-2 clang-9_1:9.0.1-8 coreutils_8.30-3+b1 cpp_4:9.2.1-3.1 cpp-9_9.2.1-29 dash_0.5.10.2-6 debconf_1.5.73 debhelper_12.9 debian-archive-keyring_2019.1 debianutils_4.9.1 dh-autoreconf_19 dh-strip-nondeterminism_1.6.3-2 diffutils_1:3.7-3 dpkg_1.19.7 dpkg-dev_1.19.7 dwz_0.13-5 e2fsprogs_1.45.5-2 fakeroot_1.24-1 fdisk_2.34-0.1 file_1:5.38-4 findutils_4.7.0-1 g++_4:9.2.1-3.1 g++-9_9.2.1-29 gcc_4:9.2.1-3.1 gcc-10-base_10-20200222-1 gcc-8-base_8.3.0-29 gcc-9_9.2.1-29 gcc-9-base_9.2.1-29 gettext_0.19.8.1-10 gettext-base_0.19.8.1-10 gpgv_2.2.19-1 grep_3.4-1 groff-base_1.22.4-4 gzip_1.9-3+b1 hostname_3.23 init-system-helpers_1.57 intltool-debian_0.35.0+20060710.5 lib32gcc-s1_10-20200222-1 lib32gcc1_1:10-20200222-1 lib32stdc++6_10-20200222-1 libacl1_2.2.53-5 libapt-pkg5.0_1.8.4 libarchive-zip-perl_1.67-1 libasan5_9.2.1-29 libatomic1_10-20200222-1 libattr1_1:2.4.48-5 libaudit-common_1:2.8.5-2 libaudit1_1:2.8.5-2+b1 libbinutils_2.34-3 libblkid1_2.34-0.1 libbsd0_0.10.0-1 libbz2-1.0_1.0.8-2 libc-bin_2.29-10 libc-dev-bin_2.29-10 libc6_2.29-10 libc6-dev_2.29-10 libc6-i386_2.29-10 libcap-ng0_0.7.9-2.1+b1 libcc1-0_10-20200222-1 libclang-common-9-dev_1:9.0.1-8 libclang-cpp9_1:9.0.1-8 libcom-err2_1.45.5-2 libcroco3_0.6.13-1 libcrypt-dev_1:4.4.10-10 libcrypt1_1:4.4.10-10 libctf-nobfd0_2.34-3 libctf0_2.34-3 libdb5.3_5.3.28+dfsg1-0.6 libdebconfclient0_0.251 libdebhelper-perl_12.9 libdpkg-perl_1.19.7 libedit2_3.1-20191231-1 libelf1_0.176-1.1 libext2fs2_1.45.5-2 libfakeroot_1.24-1 libfdisk1_2.34-0.1 libffi7_3.3-3 libfile-stripnondeterminism-perl_1.6.3-2 libgc1c2_1:7.6.4-0.4 libgcc-8-dev_8.3.0-29 libgcc-9-dev_9.2.1-29 libgcc-s1_10-20200222-1 libgcc1_1:10-20200222-1 libgcrypt20_1.8.5-5 libgdbm-compat4_1.18.1-5 libgdbm6_1.18.1-5 libglib2.0-0_2.62.4-2 libgmp10_2:6.2.0+dfsg-4 libgnutls30_3.6.12-2 libgomp1_10-20200222-1 libgpg-error0_1.37-1 libgsl-dev_2.5+dfsg-6+b1 libgsl23_2.5+dfsg-6+b1 libgslcblas0_2.5+dfsg-6+b1 libhogweed5_3.5.1+really3.5.1-2 libicu63_63.2-2 libidn2-0_2.2.0-2 libisl22_0.22.1-1 libitm1_10-20200222-1 libllvm9_1:9.0.1-8 liblsan0_10-20200222-1 liblz4-1_1.9.2-2 liblzma5_5.2.4-1+b1 libmagic-mgc_1:5.38-4 libmagic1_1:5.38-4 libmount1_2.34-0.1 libmpc3_1.1.0-1 libmpfr6_4.0.2-1 libmpx2_8.3.0-29 libncursesw6_6.1+20191019-1 libnettle7_3.5.1+really3.5.1-2 libobjc-8-dev_8.3.0-29 libobjc-9-dev_9.2.1-29 libobjc4_10-20200222-1 libomp-9-dev_1:9.0.1-8 libomp5-9_1:9.0.1-8 libp11-kit0_0.23.20-1 libpam-modules_1.3.1-5 libpam-modules-bin_1.3.1-5 libpam-runtime_1.3.1-5 libpam0g_1.3.1-5 libpcre2-8-0_10.34-7 libpcre3_2:8.39-12+b1 libperl5.30_5.30.0-9 libpipeline1_1.5.2-2 libquadmath0_10-20200222-1 libseccomp2_2.4.2-2 libselinux1_3.0-1+b1 libsemanage-common_3.0-1 libsemanage1_3.0-1+b1 libsepol1_3.0-1 libsigsegv2_2.12-2 libsmartcols1_2.34-0.1 libss2_1.45.5-2 libstdc++-8-dev_8.3.0-29 libstdc++-9-dev_9.2.1-29 libstdc++6_10-20200222-1 libsub-override-perl_0.09-2 libsystemd0_244.3-1 libtasn1-6_4.16.0-2 libtinfo6_6.1+20191019-1 libtool_2.4.6-13 libtsan0_10-20200222-1 libubsan1_10-20200222-1 libuchardet0_0.0.6-3 libudev1_244.3-1 libunistring2_0.9.10-2 libuuid1_2.34-0.1 libxml2_2.9.10+dfsg-3 libz3-4_4.8.7-4 libzstd1_1.4.4+dfsg-3 linux-libc-dev_5.4.19-1 login_1:4.8.1-1 logsave_1.45.5-2 lsb-base_11.1.0 m4_1.4.18-4 make_4.2.1-1.2 man-db_2.9.0-2 mawk_1.3.4.20200120-2 mount_2.34-0.1 ncurses-base_6.1+20191019-1 ncurses-bin_6.1+20191019-1 passwd_1:4.8.1-1 patch_2.7.6-6 perl_5.30.0-9 perl-base_5.30.0-9 perl-modules-5.30_5.30.0-9 po-debconf_1.0.21 sbuild-build-depends-main-dummy_0.invalid.0 sed_4.7-1 sensible-utils_0.0.12+nmu1 sysvinit-utils_2.96-2.1 tar_1.30+dfsg-6+b1 tzdata_2019c-3 util-linux_2.34-0.1 xz-utils_5.2.4-1+b1 zlib1g_1:1.2.11.dfsg-2

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: saint
Binary: saint
Architecture: any
Version: 2.5.0+dfsg-3
Maintainer: Debian Med Packaging Team <debian-med-packaging@lists.alioth.debian.org>
Uploaders: Andreas Tille <tille@debian.org>, Thorsten Alteholz <debian@alteholz.de>
Homepage: http://saint-apms.sourceforge.net/Main.html
Standards-Version: 4.1.4
Vcs-Browser: https://salsa.debian.org/med-team/saint
Vcs-Git: https://salsa.debian.org/med-team/saint.git
Build-Depends: debhelper (>= 11~), libgsl-dev
Package-List:
 saint deb science optional arch=any
Checksums-Sha1:
 58f3866d8b68686e42b22e13d3d97e703bff1447 117060 saint_2.5.0+dfsg.orig.tar.xz
 f966efbe3f3b06fd2c4ab8421377c85bd6b19b56 5040 saint_2.5.0+dfsg-3.debian.tar.xz
Checksums-Sha256:
 26dfd1dc9a9015ccb01d16ea56c96f9396f3a81d04d9b8b8f3b431595aa548d6 117060 saint_2.5.0+dfsg.orig.tar.xz
 5460efc77a563408f691e984ad4aac97c016ab9e1d4f5a64d451bd3e6ce83b72 5040 saint_2.5.0+dfsg-3.debian.tar.xz
Files:
 a521375f525f597f57b6613b70df0a72 117060 saint_2.5.0+dfsg.orig.tar.xz
 a9dda8b4d140513d14aa39b3429b8ced 5040 saint_2.5.0+dfsg-3.debian.tar.xz

-----BEGIN PGP SIGNATURE-----

iQJFBAEBCAAvFiEE8fAHMgoDVUHwpmPKV4oElNHGRtEFAls9xZYRHHRpbGxlQGRl
Ymlhbi5vcmcACgkQV4oElNHGRtFO0g//UXCVdTpgw6RD0dOiFya/Jfc3lBzxMMNO
i+hlsNlVYlyILF5bHfOi+XxM7Don1HcVtT419cT8AU4pU5U5LjWZzPD5kPIN5llz
YXcxPKcRAHXmqGGmoO+YRychtv+M/CuVBHcAPUHgynQx7EO09vBlv30gDXq06qXg
lKYqCauDIzjvOOyoFvRkS0Owp/nSsBiYtkOFnEO73kNrRCCx8Uxcpd478Nv6Rlhi
lOk0cN3lf5kuHzuTX5hqdvw0rSD6O1ErP+hB7/5ejW+zJHS5qGnOC7PjzQ1+YJAo
9C3UsWE94eWA2N8HMb7xiNASAwe1Md6EbFSyobmVrzE+9P2hJiYElIg/gdkmlxGw
vZk8vCAMqQqaB3U6nrghvQ4iWPhsjYPqi7whLJlEUX+zhHFhN31SjEuCp9J+Drlt
J5ozGSTEXmqtvipVO2sLmmP0s//RF5yhZ3MQe1yOxKwhTb1F4GsQg3WJmIbEj6rS
BkfC3xEIRtlLdwW1H9b9lIdlszbj25KJ4tMG0AFYFkD+0tPE/K4KCaLQUMFNrsWT
sRA2ikLm26og5FEWSjARS4bu3XPdhOSYHqDL/rWfCWyVOWIOrgrwCpsV7QQqOAwb
+vARxrj2gHTvRZMMd+YfbVsfp6U4jMk8VuzYbKxveFLzkQPLiciXpgwUbpadV7pj
i+Xe0XZVXoQ=
=4r9h
-----END PGP SIGNATURE-----

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/sbuild-nonexistent/.gnupg/trustedkeys.kbx': General error
gpgv: Signature made Thu Jul  5 07:15:34 2018 UTC
gpgv:                using RSA key F1F007320A035541F0A663CA578A0494D1C646D1
gpgv:                issuer "tille@debian.org"
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./saint_2.5.0+dfsg-3.dsc
dpkg-source: info: extracting saint in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking saint_2.5.0+dfsg.orig.tar.xz
dpkg-source: info: unpacking saint_2.5.0+dfsg-3.debian.tar.xz
dpkg-source: info: using patch list from debian/patches/series
dpkg-source: info: applying fix-makefile.patch
dpkg-source: info: applying ld-as-needed.patch

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=C.UTF-8
LC_ALL=C.UTF-8
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable
SCHROOT_CHROOT_NAME=sid-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=sid-amd64-sbuild-af090a5f-b6a6-4d5b-8d23-7f1d99e8a191
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

Command: dpkg-buildpackage -us -uc -b -rfakeroot
dpkg-buildpackage: info: source package saint
dpkg-buildpackage: info: source version 2.5.0+dfsg-3
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Andreas Tille <tille@debian.org>
 dpkg-source --before-build .
dpkg-buildpackage: info: host architecture amd64
 fakeroot debian/rules clean
dh clean
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
dh_auto_clean
	make -j4 clean
make[2]: Entering directory '/<<PKGBUILDDIR>>'
rm -rf /<<PKGBUILDDIR>>/build
rm -f /<<PKGBUILDDIR>>/src/*/*.gch
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
rm -rf bin
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_clean
 debian/rules build
dh build
   dh_update_autotools_config
   dh_autoreconf
   dh_auto_configure
   debian/rules override_dh_auto_build
make[1]: Entering directory '/<<PKGBUILDDIR>>'
# Tweak hardening flags into the Makefile
dh_auto_build --no-parallel -- all CFLAGS='-Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now'
	make -j1 "INSTALL=install --strip-program=true" all "CFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now"
make[2]: Entering directory '/<<PKGBUILDDIR>>'
gcc -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now -c /<<PKGBUILDDIR>>/src/SAINTreformat/*.c /<<PKGBUILDDIR>>/src/SAINTreformat/*.h
clang: warning: -Wl,-z,relro: 'linker' input unused [-Wunused-command-line-argument]
clang: warning: -Wl,-z,now: 'linker' input unused [-Wunused-command-line-argument]
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:41:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(allInter = (char **) calloc(ninter, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:41:19: note: place parentheses around the assignment to silence this warning
  assert(allInter = (char **) calloc(ninter, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:41:19: note: use '==' to turn this assignment into an equality comparison
  assert(allInter = (char **) calloc(ninter, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:42:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(allInter[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:42:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(allInter[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:42:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(allInter[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:43:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(uniqueInter = (int *) calloc(ninter, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:43:22: note: place parentheses around the assignment to silence this warning
  assert(uniqueInter = (int *) calloc(ninter, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:43:22: note: use '==' to turn this assignment into an equality comparison
  assert(uniqueInter = (int *) calloc(ninter, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:47:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:47:21: note: place parentheses around the assignment to silence this warning
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:47:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:48:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:48:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:48:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:49:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:49:21: note: place parentheses around the assignment to silence this warning
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:49:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:50:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:50:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:50:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:51:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:51:19: note: place parentheses around the assignment to silence this warning
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:51:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:52:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:52:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:52:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:53:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d = (double *) calloc(data->ninter, sizeof(double)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:53:18: note: place parentheses around the assignment to silence this warning
  assert(data->d = (double *) calloc(data->ninter, sizeof(double)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:53:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->d = (double *) calloc(data->ninter, sizeof(double)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:54:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->iprob = (double *) calloc(data->ninter, sizeof(double)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:54:22: note: place parentheses around the assignment to silence this warning
  assert(data->iprob = (double *) calloc(data->ninter, sizeof(double)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:54:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->iprob = (double *) calloc(data->ninter, sizeof(double)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:56:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:56:20: note: place parentheses around the assignment to silence this warning
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:56:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:58:17: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(t_prey = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:58:17: note: place parentheses around the assignment to silence this warning
  assert(t_prey = (char **) calloc(data->ninter, sizeof(char *)));
                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:58:17: note: use '==' to turn this assignment into an equality comparison
  assert(t_prey = (char **) calloc(data->ninter, sizeof(char *)));
                ^
                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:59:48: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(t_prey[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:59:48: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(t_prey[i] = (char *) calloc(500, sizeof(char)));
                                               ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:59:48: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(t_prey[i] = (char *) calloc(500, sizeof(char)));
                                               ^
                                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:60:17: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(t_bait = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:60:17: note: place parentheses around the assignment to silence this warning
  assert(t_bait = (char **) calloc(data->ninter, sizeof(char *)));
                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:60:17: note: use '==' to turn this assignment into an equality comparison
  assert(t_bait = (char **) calloc(data->ninter, sizeof(char *)));
                ^
                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:61:48: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(t_bait[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:61:48: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(t_bait[i] = (char *) calloc(500, sizeof(char)));
                                               ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:61:48: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(t_bait[i] = (char *) calloc(500, sizeof(char)));
                                               ^
                                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:62:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(t_ip = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:62:15: note: place parentheses around the assignment to silence this warning
  assert(t_ip = (char **) calloc(data->ninter, sizeof(char *)));
              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:62:15: note: use '==' to turn this assignment into an equality comparison
  assert(t_ip = (char **) calloc(data->ninter, sizeof(char *)));
              ^
              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:63:46: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(t_ip[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:63:46: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(t_ip[i] = (char *) calloc(500, sizeof(char)));
                                             ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:63:46: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(t_ip[i] = (char *) calloc(500, sizeof(char)));
                                             ^
                                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:64:14: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(t_d = (double *) calloc(data->ninter, sizeof(double)));
         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:64:14: note: place parentheses around the assignment to silence this warning
  assert(t_d = (double *) calloc(data->ninter, sizeof(double)));
             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:64:14: note: use '==' to turn this assignment into an equality comparison
  assert(t_d = (double *) calloc(data->ninter, sizeof(double)));
             ^
             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:67:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:71:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:73:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:76:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:124:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(uPreyCount = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:124:21: note: place parentheses around the assignment to silence this warning
  assert(uPreyCount = (int *) calloc(nprey, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:124:21: note: use '==' to turn this assignment into an equality comparison
  assert(uPreyCount = (int *) calloc(nprey, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:125:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(uPreyLen = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:125:19: note: place parentheses around the assignment to silence this warning
  assert(uPreyLen = (int *) calloc(nprey, sizeof(int)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:125:19: note: use '==' to turn this assignment into an equality comparison
  assert(uPreyLen = (int *) calloc(nprey, sizeof(int)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:126:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:126:21: note: place parentheses around the assignment to silence this warning
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:126:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:127:45: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:127:45: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:127:45: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:128:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:128:25: note: place parentheses around the assignment to silence this warning
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:128:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:129:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:129:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:129:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:130:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(uniquePrey = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:130:21: note: place parentheses around the assignment to silence this warning
  assert(uniquePrey = (char **) calloc(nprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:130:21: note: use '==' to turn this assignment into an equality comparison
  assert(uniquePrey = (char **) calloc(nprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:131:45: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(uniquePrey[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:131:45: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(uniquePrey[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:131:45: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(uniquePrey[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:132:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(uniquePreyGene = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:132:25: note: place parentheses around the assignment to silence this warning
  assert(uniquePreyGene = (char **) calloc(nprey, sizeof(char *)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:132:25: note: use '==' to turn this assignment into an equality comparison
  assert(uniquePreyGene = (char **) calloc(nprey, sizeof(char *)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:133:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(uniquePreyGene[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:133:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(uniquePreyGene[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:133:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(uniquePreyGene[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:134:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyLen = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:134:24: note: place parentheses around the assignment to silence this warning
  assert(data->preyLen = (int *) calloc(nprey, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:134:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyLen = (int *) calloc(nprey, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:139:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:147:7: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
      fscanf(fpprey, "%s", buf);
      ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:151:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:183:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prey_appear = (int *) calloc(nuprey, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:183:22: note: place parentheses around the assignment to silence this warning
  assert(prey_appear = (int *) calloc(nuprey, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:183:22: note: use '==' to turn this assignment into an equality comparison
  assert(prey_appear = (int *) calloc(nuprey, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:194:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(t_preyname = (char **) calloc(nuprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:194:21: note: place parentheses around the assignment to silence this warning
  assert(t_preyname = (char **) calloc(nuprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:194:21: note: use '==' to turn this assignment into an equality comparison
  assert(t_preyname = (char **) calloc(nuprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:195:46: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nuprey;i++) assert(t_preyname[i] = (char *) calloc(500, sizeof(char)));
                               ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:195:46: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nuprey;i++) assert(t_preyname[i] = (char *) calloc(500, sizeof(char)));
                                             ^
                               (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:195:46: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nuprey;i++) assert(t_preyname[i] = (char *) calloc(500, sizeof(char)));
                                             ^
                                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:196:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(t_preylen = (int *) calloc(nuprey, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:196:20: note: place parentheses around the assignment to silence this warning
  assert(t_preylen = (int *) calloc(nuprey, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:196:20: note: use '==' to turn this assignment into an equality comparison
  assert(t_preylen = (int *) calloc(nuprey, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:236:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:236:21: note: place parentheses around the assignment to silence this warning
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:236:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:237:43: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:237:43: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:237:43: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:238:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:238:19: note: place parentheses around the assignment to silence this warning
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:238:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:239:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:239:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:239:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:240:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(uniqueIP = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:240:19: note: place parentheses around the assignment to silence this warning
  assert(uniqueIP = (char **) calloc(nIP, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:240:19: note: use '==' to turn this assignment into an equality comparison
  assert(uniqueIP = (char **) calloc(nIP, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:241:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(uniqueIP[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:241:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(uniqueIP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:241:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(uniqueIP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:242:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:242:21: note: place parentheses around the assignment to silence this warning
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:242:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:243:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:243:25: note: place parentheses around the assignment to silence this warning
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:243:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:246:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:248:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/initdata.c:250:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
52 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:46:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:46:22: note: place parentheses around the assignment to silence this warning
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:46:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:47:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:47:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:47:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:48:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:48:22: note: place parentheses around the assignment to silence this warning
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:48:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:49:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:49:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:49:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:50:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prob = (double *) calloc(data->nuinter, sizeof(double)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:50:21: note: place parentheses around the assignment to silence this warning
  assert(data->prob = (double *) calloc(data->nuinter, sizeof(double)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:50:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prob = (double *) calloc(data->nuinter, sizeof(double)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:69:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:69:22: note: place parentheses around the assignment to silence this warning
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:69:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:70:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:70:20: note: place parentheses around the assignment to silence this warning
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:70:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:73:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:73:25: note: place parentheses around the assignment to silence this warning
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:73:25: note: use '==' to turn this assignment into an equality comparison
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:175:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyNinter = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:175:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyNinter = (int *) calloc(data->nprey, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:175:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyNinter = (int *) calloc(data->nprey, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:178:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:178:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:178:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:191:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:191:20: note: place parentheses around the assignment to silence this warning
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:191:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:192:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:192:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:192:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:207:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:207:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:207:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:225:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("reformat_log");
    ^~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:231:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:244:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("reformat_log");
    ^~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:251:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:271:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:271:24: note: place parentheses around the assignment to silence this warning
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:271:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:288:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:288:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:288:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:289:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:289:21: note: place parentheses around the assignment to silence this warning
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:289:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:290:51: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:290:51: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:290:51: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:312:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:312:27: note: place parentheses around the assignment to silence this warning
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:312:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:317:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:317:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:317:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:319:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:319:21: note: place parentheses around the assignment to silence this warning
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:319:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:340:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:340:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:340:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:341:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:341:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                  (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:341:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:354:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:354:20: note: place parentheses around the assignment to silence this warning
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:354:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:355:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:355:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:355:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:369:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:369:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:369:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:385:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("reformat_log");
    ^~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:391:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:404:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("reformat_log");
    ^~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/mapping.c:410:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
33 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTreformat/printmap.c:99:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("FILTER");
  ^~~~~ ~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/printmap.c:105:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:18:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:18:21: note: place parentheses around the assignment to silence this warning
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:18:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:19:45: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:19:45: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:19:45: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:20:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyLen = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:20:24: note: place parentheses around the assignment to silence this warning
  assert(data->preyLen = (int *) calloc(nprey, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:20:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyLen = (int *) calloc(nprey, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:21:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:21:25: note: place parentheses around the assignment to silence this warning
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:21:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:22:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:22:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:22:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:26:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:32:7: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
      fscanf(fpprey, "%s", buf);
      ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:35:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:54:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:54:21: note: place parentheses around the assignment to silence this warning
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:54:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:55:43: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:55:43: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:55:43: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:56:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:56:19: note: place parentheses around the assignment to silence this warning
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:56:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:57:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:57:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:57:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:58:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:58:21: note: place parentheses around the assignment to silence this warning
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:58:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:59:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:59:25: note: place parentheses around the assignment to silence this warning
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:59:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:62:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:64:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:66:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:85:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:85:21: note: place parentheses around the assignment to silence this warning
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:85:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:86:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(250, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:86:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:86:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:87:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:87:21: note: place parentheses around the assignment to silence this warning
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:87:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:88:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(250, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:88:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:88:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:89:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:89:19: note: place parentheses around the assignment to silence this warning
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:89:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:90:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(250, sizeof(char)));
                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:90:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(250, sizeof(char)));
                                                 ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:90:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(250, sizeof(char)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:91:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d = (double *) calloc(data->ninter, sizeof(double)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:91:18: note: place parentheses around the assignment to silence this warning
  assert(data->d = (double *) calloc(data->ninter, sizeof(double)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:91:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->d = (double *) calloc(data->ninter, sizeof(double)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:92:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->iprob = (double *) calloc(data->ninter, sizeof(double)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:92:22: note: place parentheses around the assignment to silence this warning
  assert(data->iprob = (double *) calloc(data->ninter, sizeof(double)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:92:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->iprob = (double *) calloc(data->ninter, sizeof(double)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:94:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:94:20: note: place parentheses around the assignment to silence this warning
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:94:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:97:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:99:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:101:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/remap.c:103:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
30 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTreformat/saint.c:25:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  fgets(buf, sizeof(buf), fp);
  ^~~~~ ~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/saint.c:103:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("rm -rf interaction.intermediate");
  ^~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTreformat/saint.c:129:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir reformat_log");      /* mapping logs */
  ^~~~~~ ~~~~~~~~~~~~~~~~~~~~
3 warnings generated.
mv *.o /<<PKGBUILDDIR>>/build
gcc -Wl,-z,relro -Wl,-z,now /<<PKGBUILDDIR>>/build/*.o -o /<<PKGBUILDDIR>>/bin/saint-reformat -lm -lgsl -lgslcblas 
rm /<<PKGBUILDDIR>>/build/*.o


gcc -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now -c /<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/*.c /<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/*.h
clang: warning: -Wl,-z,relro: 'linker' input unused [-Wunused-command-line-argument]
clang: warning: -Wl,-z,now: 'linker' input unused [-Wunused-command-line-argument]
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:7:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:7:18: note: place parentheses around the assignment to silence this warning
  assert(data->d = (double **) calloc(*p, sizeof(double *)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:7:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->d = (double **) calloc(*p, sizeof(double *)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:9:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->d[i] = (double *) calloc(*q, sizeof(double)));
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:9:23: note: place parentheses around the assignment to silence this warning
    assert(data->d[i] = (double *) calloc(*q, sizeof(double)));
                      ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:9:23: note: use '==' to turn this assignment into an equality comparison
    assert(data->d[i] = (double *) calloc(*q, sizeof(double)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:11:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->maxRow = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:11:23: note: place parentheses around the assignment to silence this warning
  assert(data->maxRow = (double *) calloc(*p, sizeof(double)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:11:23: note: use '==' to turn this assignment into an equality comparison
  assert(data->maxRow = (double *) calloc(*p, sizeof(double)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:12:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyORF = (char **) calloc(*p, sizeof(char *)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:12:24: note: place parentheses around the assignment to silence this warning
  assert(data->preyORF = (char **) calloc(*p, sizeof(char *)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:12:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyORF = (char **) calloc(*p, sizeof(char *)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:13:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->override = (char *) calloc(*p, sizeof(char)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:13:25: note: place parentheses around the assignment to silence this warning
  assert(data->override = (char *) calloc(*p, sizeof(char)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:13:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->override = (char *) calloc(*p, sizeof(char)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:16:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->preyORF[i] = (char *) calloc(_MAX_NAME_, sizeof(char)));
    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:16:29: note: place parentheses around the assignment to silence this warning
    assert(data->preyORF[i] = (char *) calloc(_MAX_NAME_, sizeof(char)));
                            ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:16:29: note: use '==' to turn this assignment into an equality comparison
    assert(data->preyORF[i] = (char *) calloc(_MAX_NAME_, sizeof(char)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:18:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prey = (char **) calloc(*p, sizeof(char *))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:18:21: note: place parentheses around the assignment to silence this warning
  assert(data->prey = (char **) calloc(*p, sizeof(char *))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:18:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prey = (char **) calloc(*p, sizeof(char *))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:20:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->prey[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:20:26: note: place parentheses around the assignment to silence this warning
    assert(data->prey[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
                         ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:20:26: note: use '==' to turn this assignment into an equality comparison
    assert(data->prey[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:22:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->experiment = (char **) calloc(*q, sizeof(char *)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:22:27: note: place parentheses around the assignment to silence this warning
  assert(data->experiment = (char **) calloc(*q, sizeof(char *)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:22:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->experiment = (char **) calloc(*q, sizeof(char *)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:24:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->experiment[i] = (char *) calloc(_MAX_NAME_, sizeof(char)));
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:24:32: note: place parentheses around the assignment to silence this warning
    assert(data->experiment[i] = (char *) calloc(_MAX_NAME_, sizeof(char)));
                               ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:24:32: note: use '==' to turn this assignment into an equality comparison
    assert(data->experiment[i] = (char *) calloc(_MAX_NAME_, sizeof(char)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:26:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->bait = (char **) calloc(*q, sizeof(char *))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:26:21: note: place parentheses around the assignment to silence this warning
  assert(data->bait = (char **) calloc(*q, sizeof(char *))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:26:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->bait = (char **) calloc(*q, sizeof(char *))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:28:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->bait[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:28:26: note: place parentheses around the assignment to silence this warning
    assert(data->bait[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
                         ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:28:26: note: use '==' to turn this assignment into an equality comparison
    assert(data->bait[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:30:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->unique = (char **) calloc(*q, sizeof(char *))); 
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:30:23: note: place parentheses around the assignment to silence this warning
  assert(data->unique = (char **) calloc(*q, sizeof(char *))); 
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:30:23: note: use '==' to turn this assignment into an equality comparison
  assert(data->unique = (char **) calloc(*q, sizeof(char *))); 
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:32:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->unique[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
    ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:32:28: note: place parentheses around the assignment to silence this warning
    assert(data->unique[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
                           ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:32:28: note: use '==' to turn this assignment into an equality comparison
    assert(data->unique[i] = (char *) calloc(_MAX_NAME_, sizeof(char))); 
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:34:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->uniqueSize = (int *) calloc(*q, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:34:27: note: place parentheses around the assignment to silence this warning
  assert(data->uniqueSize = (int *) calloc(*q, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:34:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->uniqueSize = (int *) calloc(*q, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:35:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->mtu = (int *) calloc(*q, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:35:20: note: place parentheses around the assignment to silence this warning
  assert(data->mtu = (int *) calloc(*q, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:35:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->mtu = (int *) calloc(*q, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:36:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->mfu = (int **) calloc(*q, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:36:20: note: place parentheses around the assignment to silence this warning
  assert(data->mfu = (int **) calloc(*q, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:36:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->mfu = (int **) calloc(*q, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:38:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->mfu[i] = (int *) calloc(_MAX_REPLICA_, sizeof(int)));
    ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:38:25: note: place parentheses around the assignment to silence this warning
    assert(data->mfu[i] = (int *) calloc(_MAX_REPLICA_, sizeof(int)));
                        ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:38:25: note: use '==' to turn this assignment into an equality comparison
    assert(data->mfu[i] = (int *) calloc(_MAX_REPLICA_, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:40:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitCoverage = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:40:29: note: place parentheses around the assignment to silence this warning
  assert(data->baitCoverage = (double *) calloc(*q, sizeof(double)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:40:29: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitCoverage = (double *) calloc(*q, sizeof(double)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:41:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyAbundance = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:41:30: note: place parentheses around the assignment to silence this warning
  assert(data->preyAbundance = (double *) calloc(*p, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:41:30: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyAbundance = (double *) calloc(*p, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:42:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyLogLength = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:42:30: note: place parentheses around the assignment to silence this warning
  assert(data->preyLogLength = (double *) calloc(*p, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:42:30: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyLogLength = (double *) calloc(*p, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:95:20: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  for(j=0;j<4;j++) fscanf(fp,"%s",buf);
                   ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:97:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:101:20: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  for(j=0;j<4;j++) fscanf(fp,"%s",buf);
                   ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:103:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:107:20: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  for(j=0;j<4;j++) fscanf(fp,"%s",buf);
                   ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:109:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:119:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:121:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:123:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:125:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fp,"%s",buf);
    ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:128:7: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
      fscanf(fp,"%s",buf);
      ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:163:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ninterUnique = (int *) calloc(data->uniqueNum, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:163:29: note: place parentheses around the assignment to silence this warning
  assert(data->ninterUnique = (int *) calloc(data->uniqueNum, sizeof(int)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:163:29: note: use '==' to turn this assignment into an equality comparison
  assert(data->ninterUnique = (int *) calloc(data->uniqueNum, sizeof(int)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:164:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->useUnique = (int **) calloc(data->uniqueNum, sizeof(int *)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:164:26: note: place parentheses around the assignment to silence this warning
  assert(data->useUnique = (int **) calloc(data->uniqueNum, sizeof(int *)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:164:26: note: use '==' to turn this assignment into an equality comparison
  assert(data->useUnique = (int **) calloc(data->uniqueNum, sizeof(int *)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:165:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ninter = (int *) calloc(*q, sizeof(int)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:165:23: note: place parentheses around the assignment to silence this warning
  assert(data->ninter = (int *) calloc(*q, sizeof(int)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:165:23: note: use '==' to turn this assignment into an equality comparison
  assert(data->ninter = (int *) calloc(*q, sizeof(int)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:166:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->use = (int **) calloc(*q, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:166:20: note: place parentheses around the assignment to silence this warning
  assert(data->use = (int **) calloc(*q, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:166:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->use = (int **) calloc(*q, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:168:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ninterRowUnique = (int *) calloc(*p, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:168:32: note: place parentheses around the assignment to silence this warning
  assert(data->ninterRowUnique = (int *) calloc(*p, sizeof(int)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:168:32: note: use '==' to turn this assignment into an equality comparison
  assert(data->ninterRowUnique = (int *) calloc(*p, sizeof(int)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:169:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->useRowUnique = (int **) calloc(*p, sizeof(int *)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:169:29: note: place parentheses around the assignment to silence this warning
  assert(data->useRowUnique = (int **) calloc(*p, sizeof(int *)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:169:29: note: use '==' to turn this assignment into an equality comparison
  assert(data->useRowUnique = (int **) calloc(*p, sizeof(int *)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:170:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ninterRow = (int *) calloc(*p, sizeof(int)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:170:26: note: place parentheses around the assignment to silence this warning
  assert(data->ninterRow = (int *) calloc(*p, sizeof(int)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:170:26: note: use '==' to turn this assignment into an equality comparison
  assert(data->ninterRow = (int *) calloc(*p, sizeof(int)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:171:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->useRow = (int **) calloc(*p, sizeof(int *)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:171:23: note: place parentheses around the assignment to silence this warning
  assert(data->useRow = (int **) calloc(*p, sizeof(int *)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:171:23: note: use '==' to turn this assignment into an equality comparison
  assert(data->useRow = (int **) calloc(*p, sizeof(int *)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:191:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
     assert(data->use[k] = (int *) calloc(data->ninterUnique[data->mtu[k]], sizeof(int)));  
            ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:191:26: note: place parentheses around the assignment to silence this warning
     assert(data->use[k] = (int *) calloc(data->ninterUnique[data->mtu[k]], sizeof(int)));  
                         ^
            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:191:26: note: use '==' to turn this assignment into an equality comparison
     assert(data->use[k] = (int *) calloc(data->ninterUnique[data->mtu[k]], sizeof(int)));  
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:194:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->useUnique[j] = (int *) calloc(data->ninterUnique[j], sizeof(int)));  
           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:194:31: note: place parentheses around the assignment to silence this warning
    assert(data->useUnique[j] = (int *) calloc(data->ninterUnique[j], sizeof(int)));  
                              ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:194:31: note: use '==' to turn this assignment into an equality comparison
    assert(data->useUnique[j] = (int *) calloc(data->ninterUnique[j], sizeof(int)));  
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:227:44: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(data->useRow[i] = (int *) calloc(data->ninterRow[i], sizeof(int)));  
                           ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:227:44: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(data->useRow[i] = (int *) calloc(data->ninterRow[i], sizeof(int)));  
                                           ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:227:44: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(data->useRow[i] = (int *) calloc(data->ninterRow[i], sizeof(int)));  
                                           ^
                                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:228:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(data->useRowUnique[i] = (int *) calloc(data->ninterRowUnique[i], sizeof(int)));  
                           ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:228:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(data->useRowUnique[i] = (int *) calloc(data->ninterRowUnique[i], sizeof(int)));  
                                                 ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:228:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(data->useRowUnique[i] = (int *) calloc(data->ninterRowUnique[i], sizeof(int)));  
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:279:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglikRow = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:279:27: note: place parentheses around the assignment to silence this warning
  assert(param->loglikRow = (double *) calloc(*p, sizeof(double)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:279:27: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglikRow = (double *) calloc(*p, sizeof(double)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:280:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglikCol = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:280:27: note: place parentheses around the assignment to silence this warning
  assert(param->loglikCol = (double *) calloc(*q, sizeof(double)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:280:27: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglikCol = (double *) calloc(*q, sizeof(double)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:281:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglikRow_tmp = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:281:31: note: place parentheses around the assignment to silence this warning
  assert(param->loglikRow_tmp = (double *) calloc(*p, sizeof(double)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:281:31: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglikRow_tmp = (double *) calloc(*p, sizeof(double)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:282:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglikCol_tmp = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:282:31: note: place parentheses around the assignment to silence this warning
  assert(param->loglikCol_tmp = (double *) calloc(*q, sizeof(double)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:282:31: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglikCol_tmp = (double *) calloc(*q, sizeof(double)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:285:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->beta = (double *) calloc(param->nvar, sizeof(double )));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:285:22: note: place parentheses around the assignment to silence this warning
  assert(param->beta = (double *) calloc(param->nvar, sizeof(double )));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:285:22: note: use '==' to turn this assignment into an equality comparison
  assert(param->beta = (double *) calloc(param->nvar, sizeof(double )));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:286:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->gamma = (double *) calloc(param->nvar, sizeof(double )));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:286:23: note: place parentheses around the assignment to silence this warning
  assert(param->gamma = (double *) calloc(param->nvar, sizeof(double )));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:286:23: note: use '==' to turn this assignment into an equality comparison
  assert(param->gamma = (double *) calloc(param->nvar, sizeof(double )));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:291:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_prey = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:291:28: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_prey = (double *) calloc(*p, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:291:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_prey = (double *) calloc(*p, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:292:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->delta_prey = (double *) calloc(*p, sizeof(double)));  
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:292:28: note: place parentheses around the assignment to silence this warning
  assert(param->delta_prey = (double *) calloc(*p, sizeof(double)));  
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:292:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->delta_prey = (double *) calloc(*p, sizeof(double)));  
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:293:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_bait = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:293:28: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_bait = (double *) calloc(*q, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:293:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_bait = (double *) calloc(*q, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:294:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->delta_bait = (double *) calloc(*q, sizeof(double)));  
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:294:28: note: place parentheses around the assignment to silence this warning
  assert(param->delta_bait = (double *) calloc(*q, sizeof(double)));  
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:294:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->delta_bait = (double *) calloc(*q, sizeof(double)));  
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:295:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu_prey = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:295:25: note: place parentheses around the assignment to silence this warning
  assert(param->mu_prey = (double *) calloc(*p, sizeof(double)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:295:25: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu_prey = (double *) calloc(*p, sizeof(double)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:296:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu_prey_flag = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:296:30: note: place parentheses around the assignment to silence this warning
  assert(param->mu_prey_flag = (double *) calloc(*p, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:296:30: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu_prey_flag = (double *) calloc(*p, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:298:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->beta_tmp = (double *) calloc(param->nvar, sizeof(double )));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:298:26: note: place parentheses around the assignment to silence this warning
  assert(param->beta_tmp = (double *) calloc(param->nvar, sizeof(double )));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:298:26: note: use '==' to turn this assignment into an equality comparison
  assert(param->beta_tmp = (double *) calloc(param->nvar, sizeof(double )));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:299:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->gamma_tmp = (double *) calloc(param->nvar, sizeof(double )));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:299:27: note: place parentheses around the assignment to silence this warning
  assert(param->gamma_tmp = (double *) calloc(param->nvar, sizeof(double )));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:299:27: note: use '==' to turn this assignment into an equality comparison
  assert(param->gamma_tmp = (double *) calloc(param->nvar, sizeof(double )));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:304:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_prey_tmp = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:304:32: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_prey_tmp = (double *) calloc(*p, sizeof(double)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:304:32: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_prey_tmp = (double *) calloc(*p, sizeof(double)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:305:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->delta_prey_tmp = (double *) calloc(*p, sizeof(double)));  
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:305:32: note: place parentheses around the assignment to silence this warning
  assert(param->delta_prey_tmp = (double *) calloc(*p, sizeof(double)));  
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:305:32: note: use '==' to turn this assignment into an equality comparison
  assert(param->delta_prey_tmp = (double *) calloc(*p, sizeof(double)));  
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:306:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_bait_tmp = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:306:32: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_bait_tmp = (double *) calloc(*q, sizeof(double)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:306:32: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_bait_tmp = (double *) calloc(*q, sizeof(double)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:307:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->delta_bait_tmp = (double *) calloc(*q, sizeof(double)));  
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:307:32: note: place parentheses around the assignment to silence this warning
  assert(param->delta_bait_tmp = (double *) calloc(*q, sizeof(double)));  
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:307:32: note: use '==' to turn this assignment into an equality comparison
  assert(param->delta_bait_tmp = (double *) calloc(*q, sizeof(double)));  
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:308:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu_prey_tmp = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:308:29: note: place parentheses around the assignment to silence this warning
  assert(param->mu_prey_tmp = (double *) calloc(*p, sizeof(double)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:308:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu_prey_tmp = (double *) calloc(*p, sizeof(double)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:309:34: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu_prey_flag_tmp = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:309:34: note: place parentheses around the assignment to silence this warning
  assert(param->mu_prey_flag_tmp = (double *) calloc(*p, sizeof(double)));
                                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:309:34: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu_prey_flag_tmp = (double *) calloc(*p, sizeof(double)));
                                 ^
                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:312:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->iZ = (int **) calloc(*p, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:312:20: note: place parentheses around the assignment to silence this warning
  assert(param->iZ = (int **) calloc(*p, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:312:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->iZ = (int **) calloc(*p, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:313:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(param->iZ[i] = (int *) calloc(*q, sizeof(int)));
                           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:313:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(param->iZ[i] = (int *) calloc(*q, sizeof(int)));
                                        ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:313:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(param->iZ[i] = (int *) calloc(*q, sizeof(int)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:314:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->Z = (int **) calloc(*p, sizeof(int *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:314:19: note: place parentheses around the assignment to silence this warning
  assert(param->Z = (int **) calloc(*p, sizeof(int *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:314:19: note: use '==' to turn this assignment into an equality comparison
  assert(param->Z = (int **) calloc(*p, sizeof(int *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:315:40: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(param->Z[i] = (int *) calloc(data->uniqueNum, sizeof(int)));
                           ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:315:40: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(param->Z[i] = (int *) calloc(data->uniqueNum, sizeof(int)));
                                       ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:315:40: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(param->Z[i] = (int *) calloc(data->uniqueNum, sizeof(int)));
                                       ^
                                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:316:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->Y = (int *) calloc(*p, sizeof(int)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:316:19: note: place parentheses around the assignment to silence this warning
  assert(param->Y = (int *) calloc(*p, sizeof(int)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:316:19: note: use '==' to turn this assignment into an equality comparison
  assert(param->Y = (int *) calloc(*p, sizeof(int)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:320:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_real = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:320:29: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_real = (double **) calloc(*p, sizeof(double *)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:320:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_real = (double **) calloc(*p, sizeof(double *)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:321:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(param->lambda_real[i] = (double *) calloc(*q, sizeof(double)));
                           ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:321:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(param->lambda_real[i] = (double *) calloc(*q, sizeof(double)));
                                                 ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:321:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(param->lambda_real[i] = (double *) calloc(*q, sizeof(double)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:322:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_cont = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:322:29: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_cont = (double **) calloc(*p, sizeof(double *)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:322:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_cont = (double **) calloc(*p, sizeof(double *)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:323:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(param->lambda_cont[i] = (double *) calloc(*q, sizeof(double)));
                           ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:323:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(param->lambda_cont[i] = (double *) calloc(*q, sizeof(double)));
                                                 ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:323:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(param->lambda_cont[i] = (double *) calloc(*q, sizeof(double)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:324:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->r0 = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:324:20: note: place parentheses around the assignment to silence this warning
  assert(param->r0 = (double *) calloc(*q, sizeof(double)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:324:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->r0 = (double *) calloc(*q, sizeof(double)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:325:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_real0 = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:325:30: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_real0 = (double *) calloc(*q, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:325:30: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_real0 = (double *) calloc(*q, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:327:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_real_tmp = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:327:33: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_real_tmp = (double **) calloc(*p, sizeof(double *)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:327:33: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_real_tmp = (double **) calloc(*p, sizeof(double *)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:328:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(param->lambda_real_tmp[i] = (double *) calloc(*q, sizeof(double)));
                           ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:328:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(param->lambda_real_tmp[i] = (double *) calloc(*q, sizeof(double)));
                                                     ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:328:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(param->lambda_real_tmp[i] = (double *) calloc(*q, sizeof(double)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:329:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_cont_tmp = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:329:33: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_cont_tmp = (double **) calloc(*p, sizeof(double *)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:329:33: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_cont_tmp = (double **) calloc(*p, sizeof(double *)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:330:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(param->lambda_cont_tmp[i] = (double *) calloc(*q, sizeof(double)));
                           ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:330:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(param->lambda_cont_tmp[i] = (double *) calloc(*q, sizeof(double)));
                                                     ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:330:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(param->lambda_cont_tmp[i] = (double *) calloc(*q, sizeof(double)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:331:34: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_real0_tmp = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:331:34: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_real0_tmp = (double *) calloc(*q, sizeof(double)));
                                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:331:34: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_real0_tmp = (double *) calloc(*q, sizeof(double)));
                                 ^
                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:333:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->flagged = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:333:25: note: place parentheses around the assignment to silence this warning
  assert(param->flagged = (double *) calloc(*p, sizeof(double)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:333:25: note: use '==' to turn this assignment into an equality comparison
  assert(param->flagged = (double *) calloc(*p, sizeof(double)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:334:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->appearCont = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:334:28: note: place parentheses around the assignment to silence this warning
  assert(param->appearCont = (double *) calloc(*q, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:334:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->appearCont = (double *) calloc(*q, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:475:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->mean_beta = (double *) calloc(prior->nvar, sizeof(double)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:475:27: note: place parentheses around the assignment to silence this warning
  assert(prior->mean_beta = (double *) calloc(prior->nvar, sizeof(double)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:475:27: note: use '==' to turn this assignment into an equality comparison
  assert(prior->mean_beta = (double *) calloc(prior->nvar, sizeof(double)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:476:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->var_beta = (double *) calloc(prior->nvar * prior->nvar, sizeof(double)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:476:26: note: place parentheses around the assignment to silence this warning
  assert(prior->var_beta = (double *) calloc(prior->nvar * prior->nvar, sizeof(double)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:476:26: note: use '==' to turn this assignment into an equality comparison
  assert(prior->var_beta = (double *) calloc(prior->nvar * prior->nvar, sizeof(double)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:477:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->mean_delta_bait = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:477:33: note: place parentheses around the assignment to silence this warning
  assert(prior->mean_delta_bait = (double *) calloc(*p, sizeof(double)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:477:33: note: use '==' to turn this assignment into an equality comparison
  assert(prior->mean_delta_bait = (double *) calloc(*p, sizeof(double)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:478:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->var_delta_bait = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:478:32: note: place parentheses around the assignment to silence this warning
  assert(prior->var_delta_bait = (double *) calloc(*p, sizeof(double)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:478:32: note: use '==' to turn this assignment into an equality comparison
  assert(prior->var_delta_bait = (double *) calloc(*p, sizeof(double)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:479:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->mean_alpha_prey = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:479:33: note: place parentheses around the assignment to silence this warning
  assert(prior->mean_alpha_prey = (double *) calloc(*p, sizeof(double)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:479:33: note: use '==' to turn this assignment into an equality comparison
  assert(prior->mean_alpha_prey = (double *) calloc(*p, sizeof(double)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:480:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->var_alpha_prey = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:480:32: note: place parentheses around the assignment to silence this warning
  assert(prior->var_alpha_prey = (double *) calloc(*p, sizeof(double)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:480:32: note: use '==' to turn this assignment into an equality comparison
  assert(prior->var_alpha_prey = (double *) calloc(*p, sizeof(double)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:481:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->mean_alpha_bait = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:481:33: note: place parentheses around the assignment to silence this warning
  assert(prior->mean_alpha_bait = (double *) calloc(*q, sizeof(double)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:481:33: note: use '==' to turn this assignment into an equality comparison
  assert(prior->mean_alpha_bait = (double *) calloc(*q, sizeof(double)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:482:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->var_alpha_bait = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:482:32: note: place parentheses around the assignment to silence this warning
  assert(prior->var_alpha_bait = (double *) calloc(*q, sizeof(double)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:482:32: note: use '==' to turn this assignment into an equality comparison
  assert(prior->var_alpha_bait = (double *) calloc(*q, sizeof(double)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:483:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->mean_gamma = (double *) calloc(prior->nvar, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:483:28: note: place parentheses around the assignment to silence this warning
  assert(prior->mean_gamma = (double *) calloc(prior->nvar, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:483:28: note: use '==' to turn this assignment into an equality comparison
  assert(prior->mean_gamma = (double *) calloc(prior->nvar, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:484:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->var_gamma = (double *) calloc(prior->nvar * prior->nvar, sizeof(double)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:484:27: note: place parentheses around the assignment to silence this warning
  assert(prior->var_gamma = (double *) calloc(prior->nvar * prior->nvar, sizeof(double)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:484:27: note: use '==' to turn this assignment into an equality comparison
  assert(prior->var_gamma = (double *) calloc(prior->nvar * prior->nvar, sizeof(double)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:485:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->mean_mu_prey = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:485:30: note: place parentheses around the assignment to silence this warning
  assert(prior->mean_mu_prey = (double *) calloc(*p, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:485:30: note: use '==' to turn this assignment into an equality comparison
  assert(prior->mean_mu_prey = (double *) calloc(*p, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:486:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->var_mu_prey = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:486:29: note: place parentheses around the assignment to silence this warning
  assert(prior->var_mu_prey = (double *) calloc(*p, sizeof(double)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:486:29: note: use '==' to turn this assignment into an equality comparison
  assert(prior->var_mu_prey = (double *) calloc(*p, sizeof(double)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:487:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->epsilon_real = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:487:30: note: place parentheses around the assignment to silence this warning
  assert(prior->epsilon_real = (double *) calloc(*q, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:487:30: note: use '==' to turn this assignment into an equality comparison
  assert(prior->epsilon_real = (double *) calloc(*q, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:488:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->epsilon_cont = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:488:30: note: place parentheses around the assignment to silence this warning
  assert(prior->epsilon_cont = (double *) calloc(*q, sizeof(double)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:488:30: note: use '==' to turn this assignment into an equality comparison
  assert(prior->epsilon_cont = (double *) calloc(*q, sizeof(double)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:489:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->kappa_real = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:489:28: note: place parentheses around the assignment to silence this warning
  assert(prior->kappa_real = (double *) calloc(*q, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:489:28: note: use '==' to turn this assignment into an equality comparison
  assert(prior->kappa_real = (double *) calloc(*q, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:490:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->kappa_cont = (double *) calloc(*q, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:490:28: note: place parentheses around the assignment to silence this warning
  assert(prior->kappa_cont = (double *) calloc(*q, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:490:28: note: use '==' to turn this assignment into an equality comparison
  assert(prior->kappa_cont = (double *) calloc(*q, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:568:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->iZ = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:568:22: note: place parentheses around the assignment to silence this warning
  assert(summary->iZ = (double **) calloc(*p, sizeof(double *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:568:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->iZ = (double **) calloc(*p, sizeof(double *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:569:43: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(summary->iZ[i] = (double *) calloc(*q, sizeof(double)));
                           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:569:43: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(summary->iZ[i] = (double *) calloc(*q, sizeof(double)));
                                          ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:569:43: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(summary->iZ[i] = (double *) calloc(*q, sizeof(double)));
                                          ^
                                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:570:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->Z = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:570:21: note: place parentheses around the assignment to silence this warning
  assert(summary->Z = (double **) calloc(*p, sizeof(double *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:570:21: note: use '==' to turn this assignment into an equality comparison
  assert(summary->Z = (double **) calloc(*p, sizeof(double *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:571:42: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(summary->Z[i] = (double *) calloc(data->uniqueNum, sizeof(double)));
                           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:571:42: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(summary->Z[i] = (double *) calloc(data->uniqueNum, sizeof(double)));
                                         ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:571:42: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(summary->Z[i] = (double *) calloc(data->uniqueNum, sizeof(double)));
                                         ^
                                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:576:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->expect = (double **) calloc(*p, sizeof(double *)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:576:26: note: place parentheses around the assignment to silence this warning
  assert(summary->expect = (double **) calloc(*p, sizeof(double *)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:576:26: note: use '==' to turn this assignment into an equality comparison
  assert(summary->expect = (double **) calloc(*p, sizeof(double *)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:577:47: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<*p;i++) assert(summary->expect[i] = (double *) calloc(*q, sizeof(double)));  
                           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:577:47: note: place parentheses around the assignment to silence this warning
  for(i=0;i<*p;i++) assert(summary->expect[i] = (double *) calloc(*q, sizeof(double)));  
                                              ^
                           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:577:47: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<*p;i++) assert(summary->expect[i] = (double *) calloc(*q, sizeof(double)));  
                                              ^
                                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:579:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->Y = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:579:21: note: place parentheses around the assignment to silence this warning
  assert(summary->Y = (double *) calloc(*p, sizeof(double)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:579:21: note: use '==' to turn this assignment into an equality comparison
  assert(summary->Y = (double *) calloc(*p, sizeof(double)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:580:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->max_prob = (double *) calloc(*p, sizeof(double)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:580:28: note: place parentheses around the assignment to silence this warning
  assert(summary->max_prob = (double *) calloc(*p, sizeof(double)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/init_data.c:580:28: note: use '==' to turn this assignment into an equality comparison
  assert(summary->max_prob = (double *) calloc(*p, sizeof(double)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
106 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:25:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  fgets(buf, sizeof(buf), fp);
  ^~~~~ ~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:99:9: warning: comparison of address of 'tmp' not equal to a null pointer is always true [-Wtautological-pointer-compare]
    if(&tmp != NULL) {
        ^~~    ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:104:9: warning: comparison of address of 'tmp' not equal to a null pointer is always true [-Wtautological-pointer-compare]
    if(&tmp != NULL) {
        ^~~    ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:109:9: warning: comparison of address of 'tmp' not equal to a null pointer is always true [-Wtautological-pointer-compare]
    if(&tmp != NULL) {
        ^~~    ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:119:7: warning: comparison of address of 'p' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if(&p == NULL) { 
      ^    ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:123:7: warning: comparison of address of 'q' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if(&q == NULL) { 
      ^    ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:127:7: warning: comparison of address of 'burn' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if(&burn == NULL) { 
      ^~~~    ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl-matrix/saint.c:131:7: warning: comparison of address of 'iter' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if(&iter == NULL) { 
      ^~~~    ~~~~
8 warnings generated.
mv *.o /<<PKGBUILDDIR>>/build
gcc -Wl,-z,relro -Wl,-z,now /<<PKGBUILDDIR>>/build/*.o -o /<<PKGBUILDDIR>>/bin/saint-spc-noctrl-matrix -lm -lgsl -lgslcblas 
rm /<<PKGBUILDDIR>>/build/*.o


gcc -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now -c /<<PKGBUILDDIR>>/src/SAINTspc-noctrl/*.c /<<PKGBUILDDIR>>/src/SAINTspc-noctrl/*.h
clang: warning: -Wl,-z,relro: 'linker' input unused [-Wunused-command-line-argument]
clang: warning: -Wl,-z,now: 'linker' input unused [-Wunused-command-line-argument]
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:13:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:13:21: note: place parentheses around the assignment to silence this warning
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:13:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:14:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:14:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:14:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:15:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:15:21: note: place parentheses around the assignment to silence this warning
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:15:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:16:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:16:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:16:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:17:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:17:19: note: place parentheses around the assignment to silence this warning
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:17:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:18:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:18:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:18:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:19:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:19:18: note: place parentheses around the assignment to silence this warning
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:19:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:20:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d2 = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:20:19: note: place parentheses around the assignment to silence this warning
  assert(data->d2 = (float *) calloc(data->ninter, sizeof(float)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:20:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->d2 = (float *) calloc(data->ninter, sizeof(float)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:21:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:21:22: note: place parentheses around the assignment to silence this warning
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:21:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:22:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->l = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:22:18: note: place parentheses around the assignment to silence this warning
  assert(data->l = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:22:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->l = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:23:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->c = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:23:18: note: place parentheses around the assignment to silence this warning
  assert(data->c = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:23:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->c = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:24:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:24:20: note: place parentheses around the assignment to silence this warning
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:24:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:27:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:29:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:31:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:33:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:93:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:93:22: note: place parentheses around the assignment to silence this warning
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:93:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:94:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:94:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:94:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:95:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:95:22: note: place parentheses around the assignment to silence this warning
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:95:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:96:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:96:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:96:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:97:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:97:21: note: place parentheses around the assignment to silence this warning
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:97:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:114:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:114:22: note: place parentheses around the assignment to silence this warning
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:114:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:115:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:115:20: note: place parentheses around the assignment to silence this warning
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:115:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:118:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:118:25: note: place parentheses around the assignment to silence this warning
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:118:25: note: use '==' to turn this assignment into an equality comparison
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:203:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:203:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:203:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:215:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:215:20: note: place parentheses around the assignment to silence this warning
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:215:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:216:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:216:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:216:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:229:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:229:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:229:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:247:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:253:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:266:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:272:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:289:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:289:21: note: place parentheses around the assignment to silence this warning
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:289:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:290:45: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:290:45: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:290:45: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:292:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:292:25: note: place parentheses around the assignment to silence this warning
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:292:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:293:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:293:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:293:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:295:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:295:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:295:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:296:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:296:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:296:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:297:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyFlag = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:297:25: note: place parentheses around the assignment to silence this warning
  assert(data->preyFlag = (int *) calloc(nprey, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:297:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyFlag = (int *) calloc(nprey, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:298:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:298:24: note: place parentheses around the assignment to silence this warning
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:298:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:301:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:303:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:307:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:327:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:327:24: note: place parentheses around the assignment to silence this warning
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:327:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:349:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:349:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:349:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:350:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:350:21: note: place parentheses around the assignment to silence this warning
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:350:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:351:51: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:351:51: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:351:51: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:374:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:374:27: note: place parentheses around the assignment to silence this warning
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:374:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:379:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:379:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:379:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:381:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:381:21: note: place parentheses around the assignment to silence this warning
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:381:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:402:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:402:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:402:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:403:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:403:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                  (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:403:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:416:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:416:20: note: place parentheses around the assignment to silence this warning
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:416:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:417:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:417:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:417:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:431:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:431:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:431:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:447:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:453:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:466:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:472:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:484:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:484:31: note: place parentheses around the assignment to silence this warning
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:484:31: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:485:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:485:33: note: place parentheses around the assignment to silence this warning
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:485:33: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:529:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:529:21: note: place parentheses around the assignment to silence this warning
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:529:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:530:43: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:530:43: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:530:43: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:531:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:531:19: note: place parentheses around the assignment to silence this warning
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:531:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:532:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:532:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:532:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:533:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:533:21: note: place parentheses around the assignment to silence this warning
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:533:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:534:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:534:25: note: place parentheses around the assignment to silence this warning
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:534:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:537:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:539:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/initdata.c:541:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
70 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/printmap.c:99:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("MAPPING");
  ^~~~~ ~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/printmap.c:105:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/result.c:155:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("RESULT");
  ^~~~~ ~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/result.c:164:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:25:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  fgets(buf, sizeof(buf), fp);
  ^~~~~ ~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:177:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir LOG");      /* error logs */
  ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:178:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir MAPPING");      /* mapping logs */
  ^~~~~~ ~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:179:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir MCMC");     /* posterior samples */
  ^~~~~~ ~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:180:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir RESULT");   /* posterior probabilities, other summaries */
  ^~~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:196:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("MCMC");
  ^~~~~ ~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/saint.c:244:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
7 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:8:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:8:29: note: place parentheses around the assignment to silence this warning
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:8:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:9:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:9:27: note: place parentheses around the assignment to silence this warning
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:9:27: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:10:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:10:28: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:10:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:11:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:11:26: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:11:26: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:12:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:12:20: note: place parentheses around the assignment to silence this warning
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:12:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:13:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:13:21: note: place parentheses around the assignment to silence this warning
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:13:21: note: use '==' to turn this assignment into an equality comparison
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:14:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:14:22: note: place parentheses around the assignment to silence this warning
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:14:22: note: use '==' to turn this assignment into an equality comparison
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:15:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:15:20: note: place parentheses around the assignment to silence this warning
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:15:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:16:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:16:19: note: place parentheses around the assignment to silence this warning
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:16:19: note: use '==' to turn this assignment into an equality comparison
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:17:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:17:29: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:17:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:18:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:18:30: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:18:30: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:19:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:19:33: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:19:33: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:20:34: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:20:34: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setparam.c:20:34: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                 ^
                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
13 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:4:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:4:30: note: place parentheses around the assignment to silence this warning
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:4:30: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:5:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:5:28: note: place parentheses around the assignment to silence this warning
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:5:28: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:6:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:6:22: note: place parentheses around the assignment to silence this warning
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:6:22: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:7:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:7:23: note: place parentheses around the assignment to silence this warning
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:7:23: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:8:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:8:24: note: place parentheses around the assignment to silence this warning
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setprior.c:8:24: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
5 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:8:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:8:22: note: place parentheses around the assignment to silence this warning
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:8:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:9:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:9:21: note: place parentheses around the assignment to silence this warning
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:9:21: note: use '==' to turn this assignment into an equality comparison
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:10:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:10:30: note: place parentheses around the assignment to silence this warning
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:10:30: note: use '==' to turn this assignment into an equality comparison
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:11:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:11:28: note: place parentheses around the assignment to silence this warning
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:11:28: note: use '==' to turn this assignment into an equality comparison
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:12:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:12:22: note: place parentheses around the assignment to silence this warning
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:12:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:13:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:13:23: note: place parentheses around the assignment to silence this warning
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:13:23: note: use '==' to turn this assignment into an equality comparison
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:14:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:14:24: note: place parentheses around the assignment to silence this warning
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:14:24: note: use '==' to turn this assignment into an equality comparison
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:15:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:15:31: note: place parentheses around the assignment to silence this warning
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:15:31: note: use '==' to turn this assignment into an equality comparison
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:16:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:16:32: note: place parentheses around the assignment to silence this warning
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-noctrl/setsummary.c:16:32: note: use '==' to turn this assignment into an equality comparison
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
9 warnings generated.
mv *.o /<<PKGBUILDDIR>>/build
gcc -Wl,-z,relro -Wl,-z,now /<<PKGBUILDDIR>>/build/*.o -o /<<PKGBUILDDIR>>/bin/saint-spc-noctrl -lm -lgsl -lgslcblas 
rm /<<PKGBUILDDIR>>/build/*.o


gcc -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now -c /<<PKGBUILDDIR>>/src/SAINTspc-ctrl/*.c /<<PKGBUILDDIR>>/src/SAINTspc-ctrl/*.h
clang: warning: -Wl,-z,relro: 'linker' input unused [-Wunused-command-line-argument]
clang: warning: -Wl,-z,now: 'linker' input unused [-Wunused-command-line-argument]
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:13:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:13:21: note: place parentheses around the assignment to silence this warning
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:13:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:14:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(250, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:14:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:14:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:15:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:15:21: note: place parentheses around the assignment to silence this warning
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:15:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:16:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(250, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:16:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:16:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(250, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:17:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:17:19: note: place parentheses around the assignment to silence this warning
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:17:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:18:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(250, sizeof(char)));
                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:18:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(250, sizeof(char)));
                                                 ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:18:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(250, sizeof(char)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:19:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:19:18: note: place parentheses around the assignment to silence this warning
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:19:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:20:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d2 = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:20:19: note: place parentheses around the assignment to silence this warning
  assert(data->d2 = (float *) calloc(data->ninter, sizeof(float)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:20:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->d2 = (float *) calloc(data->ninter, sizeof(float)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:21:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:21:22: note: place parentheses around the assignment to silence this warning
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:21:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:22:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->l = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:22:18: note: place parentheses around the assignment to silence this warning
  assert(data->l = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:22:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->l = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:23:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->c = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:23:18: note: place parentheses around the assignment to silence this warning
  assert(data->c = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:23:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->c = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:25:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:25:20: note: place parentheses around the assignment to silence this warning
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:25:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:28:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:30:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:32:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:34:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:92:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:92:22: note: place parentheses around the assignment to silence this warning
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:92:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:93:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(250, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:93:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(250, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:93:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(250, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:94:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:94:22: note: place parentheses around the assignment to silence this warning
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:94:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:95:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(250, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:95:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(250, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:95:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(250, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:96:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:96:21: note: place parentheses around the assignment to silence this warning
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:96:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:113:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:113:22: note: place parentheses around the assignment to silence this warning
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:113:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:114:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:114:20: note: place parentheses around the assignment to silence this warning
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:114:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:117:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:117:25: note: place parentheses around the assignment to silence this warning
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:117:25: note: use '==' to turn this assignment into an equality comparison
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:202:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:202:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:202:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:214:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:214:20: note: place parentheses around the assignment to silence this warning
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:214:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:215:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:215:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:215:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:228:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:228:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:228:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:246:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:252:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:265:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:271:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:288:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:288:21: note: place parentheses around the assignment to silence this warning
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:288:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:289:45: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(250, sizeof(char)));
                              ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:289:45: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(250, sizeof(char)));
                                            ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:289:45: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(250, sizeof(char)));
                                            ^
                                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:290:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:290:25: note: place parentheses around the assignment to silence this warning
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:290:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:291:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(250, sizeof(char)));
                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:291:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(250, sizeof(char)));
                                                ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:291:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(250, sizeof(char)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:292:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:292:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:292:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:293:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:293:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:293:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:294:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:294:24: note: place parentheses around the assignment to silence this warning
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:294:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:297:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:299:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:303:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:324:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:324:24: note: place parentheses around the assignment to silence this warning
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:324:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:346:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:346:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:346:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:347:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:347:21: note: place parentheses around the assignment to silence this warning
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:347:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:348:51: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:348:51: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:348:51: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:372:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:372:27: note: place parentheses around the assignment to silence this warning
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:372:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:377:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:377:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:377:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:379:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:379:21: note: place parentheses around the assignment to silence this warning
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:379:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:400:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:400:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:400:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:401:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:401:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                  (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:401:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:414:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:414:20: note: place parentheses around the assignment to silence this warning
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:414:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:415:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:415:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:415:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:429:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:429:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:429:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:445:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:451:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:464:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:470:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:482:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:482:31: note: place parentheses around the assignment to silence this warning
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:482:31: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:483:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:483:33: note: place parentheses around the assignment to silence this warning
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:483:33: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:527:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:527:21: note: place parentheses around the assignment to silence this warning
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:527:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:528:43: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(250, sizeof(char)));
                            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:528:43: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(250, sizeof(char)));
                                          ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:528:43: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(250, sizeof(char)));
                                          ^
                                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:529:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:529:19: note: place parentheses around the assignment to silence this warning
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:529:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:530:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(250, sizeof(char)));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:530:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(250, sizeof(char)));
                                        ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:530:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(250, sizeof(char)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:531:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:531:21: note: place parentheses around the assignment to silence this warning
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:531:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:532:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:532:25: note: place parentheses around the assignment to silence this warning
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:532:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:535:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:537:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/initdata.c:539:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
69 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/printmap.c:99:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("MAPPING");
  ^~~~~ ~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/printmap.c:105:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/result.c:168:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("RESULT");
  ^~~~~ ~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/result.c:177:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:25:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  fgets(buf, sizeof(buf), fp);
  ^~~~~ ~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:151:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir LOG");      /* error logs */
  ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:152:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir MAPPING");      /* mapping logs */
  ^~~~~~ ~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:153:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir MCMC");     /* posterior samples */
  ^~~~~~ ~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:154:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir RESULT");   /* posterior probabilities, other summaries */
  ^~~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:166:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("MCMC");
  ^~~~~ ~~~~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/saint.c:214:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
7 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:8:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:8:29: note: place parentheses around the assignment to silence this warning
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:8:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:9:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:9:27: note: place parentheses around the assignment to silence this warning
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:9:27: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:10:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:10:28: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:10:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:11:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:11:26: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:11:26: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:12:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:12:20: note: place parentheses around the assignment to silence this warning
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:12:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:13:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:13:21: note: place parentheses around the assignment to silence this warning
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:13:21: note: use '==' to turn this assignment into an equality comparison
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:14:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:14:22: note: place parentheses around the assignment to silence this warning
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:14:22: note: use '==' to turn this assignment into an equality comparison
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:15:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:15:20: note: place parentheses around the assignment to silence this warning
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:15:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:16:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:16:19: note: place parentheses around the assignment to silence this warning
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:16:19: note: use '==' to turn this assignment into an equality comparison
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:17:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:17:29: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:17:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:18:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:18:30: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:18:30: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:19:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:19:33: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:19:33: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:20:34: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:20:34: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setparam.c:20:34: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                 ^
                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
13 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:4:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:4:30: note: place parentheses around the assignment to silence this warning
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:4:30: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:5:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:5:28: note: place parentheses around the assignment to silence this warning
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:5:28: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:6:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:6:22: note: place parentheses around the assignment to silence this warning
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:6:22: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:7:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:7:23: note: place parentheses around the assignment to silence this warning
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:7:23: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:8:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:8:24: note: place parentheses around the assignment to silence this warning
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setprior.c:8:24: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
5 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:8:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:8:22: note: place parentheses around the assignment to silence this warning
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:8:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:9:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:9:21: note: place parentheses around the assignment to silence this warning
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:9:21: note: use '==' to turn this assignment into an equality comparison
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:10:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:10:30: note: place parentheses around the assignment to silence this warning
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:10:30: note: use '==' to turn this assignment into an equality comparison
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:11:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:11:28: note: place parentheses around the assignment to silence this warning
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:11:28: note: use '==' to turn this assignment into an equality comparison
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:12:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:12:22: note: place parentheses around the assignment to silence this warning
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:12:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:13:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:13:23: note: place parentheses around the assignment to silence this warning
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:13:23: note: use '==' to turn this assignment into an equality comparison
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:14:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:14:24: note: place parentheses around the assignment to silence this warning
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:14:24: note: use '==' to turn this assignment into an equality comparison
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:15:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:15:31: note: place parentheses around the assignment to silence this warning
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:15:31: note: use '==' to turn this assignment into an equality comparison
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:16:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:16:32: note: place parentheses around the assignment to silence this warning
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:16:32: note: use '==' to turn this assignment into an equality comparison
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:17:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(summary->FDR = (float *) calloc(data->nuinter, sizeof(float)));
           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:17:25: note: place parentheses around the assignment to silence this warning
    assert(summary->FDR = (float *) calloc(data->nuinter, sizeof(float)));
                        ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTspc-ctrl/setsummary.c:17:25: note: use '==' to turn this assignment into an equality comparison
    assert(summary->FDR = (float *) calloc(data->nuinter, sizeof(float)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
10 warnings generated.
mv *.o /<<PKGBUILDDIR>>/build
gcc -Wl,-z,relro -Wl,-z,now /<<PKGBUILDDIR>>/build/*.o -o /<<PKGBUILDDIR>>/bin/saint-spc-ctrl -lm -lgsl -lgslcblas 
rm /<<PKGBUILDDIR>>/build/*.o


gcc -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -Wl,-z,relro -Wl,-z,now -c /<<PKGBUILDDIR>>/src/SAINTint-ctrl/*.c /<<PKGBUILDDIR>>/src/SAINTint-ctrl/*.h
clang: warning: -Wl,-z,relro: 'linker' input unused [-Wunused-command-line-argument]
clang: warning: -Wl,-z,now: 'linker' input unused [-Wunused-command-line-argument]
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:15:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:15:21: note: place parentheses around the assignment to silence this warning
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:15:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prey = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:16:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:16:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:16:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->prey[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:17:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:17:21: note: place parentheses around the assignment to silence this warning
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:17:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->bait = (char **) calloc(data->ninter, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:18:52: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:18:52: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:18:52: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->bait[i] = (char *) calloc(500, sizeof(char)));
                                                   ^
                                                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:19:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:19:19: note: place parentheses around the assignment to silence this warning
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:19:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->ip = (char **) calloc(data->ninter, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:20:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:20:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                     (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:20:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->ninter;i++) assert(data->ip[i] = (char *) calloc(500, sizeof(char)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:21:18: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:21:18: note: place parentheses around the assignment to silence this warning
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:21:18: note: use '==' to turn this assignment into an equality comparison
  assert(data->d = (float *) calloc(data->ninter, sizeof(float)));
                 ^
                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:22:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->miss = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:22:21: note: place parentheses around the assignment to silence this warning
  assert(data->miss = (int *) calloc(data->ninter, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:22:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->miss = (int *) calloc(data->ninter, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:23:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:23:22: note: place parentheses around the assignment to silence this warning
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:23:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->iprob = (float *) calloc(data->ninter, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:25:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:25:20: note: place parentheses around the assignment to silence this warning
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:25:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->a2u = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:28:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:30:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:32:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:34:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpinter, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:121:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:121:22: note: place parentheses around the assignment to silence this warning
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:121:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->uprey = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:122:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:122:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:122:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->uprey[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:123:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:123:22: note: place parentheses around the assignment to silence this warning
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:123:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->ubait = (char **) calloc(data->nuinter, sizeof(char *)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:124:54: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:124:54: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                      (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:124:54: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nuinter;i++) assert(data->ubait[i] = (char *) calloc(500, sizeof(char)));
                                                     ^
                                                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:125:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:125:21: note: place parentheses around the assignment to silence this warning
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:125:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->prob = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:142:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:142:22: note: place parentheses around the assignment to silence this warning
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:142:22: note: use '==' to turn this assignment into an equality comparison
  assert(data->n_u2a = (int *) calloc(data->nuinter, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:143:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:143:20: note: place parentheses around the assignment to silence this warning
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:143:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->u2a = (int **) calloc(data->nuinter, sizeof(int *)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:146:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:146:25: note: place parentheses around the assignment to silence this warning
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
           (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:146:25: note: use '==' to turn this assignment into an equality comparison
    assert(data->u2a[i] = (int *) calloc(data->n_u2a[i], sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:231:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:231:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:231:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2p = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:243:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:243:20: note: place parentheses around the assignment to silence this warning
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:243:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->p2i = (int **) calloc(data->nprey, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:244:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:244:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:244:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nprey;i++) assert(data->p2i[i] = (int *) calloc(data->preyNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:257:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:257:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:257:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2p = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:275:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:281:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:294:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:300:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:317:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:317:21: note: place parentheses around the assignment to silence this warning
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:317:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREY = (char **) calloc(nprey, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:318:45: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:318:45: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:318:45: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREY[i] = (char *) calloc(500, sizeof(char)));
                                            ^
                                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:320:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:320:25: note: place parentheses around the assignment to silence this warning
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:320:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->PREYGENE = (char **) calloc(nprey, sizeof(char *)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:321:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                              ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:321:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                              (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:321:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nprey;i++) assert(data->PREYGENE[i] = (char *) calloc(500, sizeof(char)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:323:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:323:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:323:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyLength = (float *) calloc(nprey, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:324:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:324:27: note: place parentheses around the assignment to silence this warning
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:324:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->preyNinter = (int *) calloc(nprey, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:325:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:325:24: note: place parentheses around the assignment to silence this warning
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:325:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrlavg = (float *) calloc(nprey, sizeof(float)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:328:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:331:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpprey, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:351:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:351:24: note: place parentheses around the assignment to silence this warning
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:351:24: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNIP = (int *) calloc(nbait, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:373:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:373:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:373:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2b = (int *) calloc(data->nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:374:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:374:21: note: place parentheses around the assignment to silence this warning
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:374:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2IP = (int **) calloc(data->nbait, sizeof(int *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:375:51: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:375:51: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:375:51: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2IP[i] = (int *) calloc(data->baitNIP[i], sizeof(int)));
                                                  ^
                                                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:399:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:399:27: note: place parentheses around the assignment to silence this warning
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:399:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->baitNinter = (int *) calloc(data->nbait, sizeof(int)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:404:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:404:20: note: place parentheses around the assignment to silence this warning
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:404:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2b = (int *) calloc(data->ninter, sizeof(int))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:406:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:406:21: note: place parentheses around the assignment to silence this warning
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:406:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->i2IP = (int *) calloc(data->ninter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:427:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:427:21: note: place parentheses around the assignment to silence this warning
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:427:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP2i = (int **) calloc(data->nIP, sizeof(int *))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:428:49: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:428:49: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                  (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:428:49: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nIP;i++) assert(data->IP2i[i] = (int *) calloc(data->IPNinter[i], sizeof(int)));
                                                ^
                                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:441:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:441:20: note: place parentheses around the assignment to silence this warning
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:441:20: note: use '==' to turn this assignment into an equality comparison
  assert(data->b2i = (int **) calloc(data->nbait, sizeof(int *))); 
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:442:50: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                    ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:442:50: note: place parentheses around the assignment to silence this warning
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                    (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:442:50: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<data->nbait;i++) assert(data->b2i[i] = (int *) calloc(data->baitNinter[i], sizeof(int)));
                                                 ^
                                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:456:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:456:21: note: place parentheses around the assignment to silence this warning
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:456:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ui2b = (int *) calloc(data->nuinter, sizeof(int))); 
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:472:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:478:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:491:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("LOG");
    ^~~~~ ~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:497:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    chdir("..");
    ^~~~~ ~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:509:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:509:31: note: place parentheses around the assignment to silence this warning
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:509:31: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPbaitCoverage = (float *) calloc(data->nIP, sizeof(float)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:510:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:510:33: note: place parentheses around the assignment to silence this warning
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:510:33: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPtotalAbundance = (float *) calloc(data->nIP, sizeof(float)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:554:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:554:21: note: place parentheses around the assignment to silence this warning
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:554:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->BAIT = (char **) calloc(nIP, sizeof(char *)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:555:43: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:555:43: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:555:43: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->BAIT[i] = (char *) calloc(500, sizeof(char)));
                                          ^
                                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:556:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:556:19: note: place parentheses around the assignment to silence this warning
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:556:19: note: use '==' to turn this assignment into an equality comparison
  assert(data->IP = (char **) calloc(nIP, sizeof(char *)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:557:41: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:557:41: note: place parentheses around the assignment to silence this warning
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                            (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:557:41: note: use '==' to turn this assignment into an equality comparison
  for(i=0;i<nIP;i++) assert(data->IP[i] = (char *) calloc(500, sizeof(char)));
                                        ^
                                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:558:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:558:21: note: place parentheses around the assignment to silence this warning
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:558:21: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrl = (int *) calloc(nIP, sizeof(int)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:559:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:559:25: note: place parentheses around the assignment to silence this warning
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:559:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->IPNinter = (int *) calloc(nIP, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:562:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:564:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:566:5: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    fscanf(fpbait, "%s", buf);
    ^~~~~~ ~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:611:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->dmin_ctrl = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:611:26: note: place parentheses around the assignment to silence this warning
  assert(data->dmin_ctrl = (float *) calloc(data->nprey, sizeof(float)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:611:26: note: use '==' to turn this assignment into an equality comparison
  assert(data->dmin_ctrl = (float *) calloc(data->nprey, sizeof(float)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:612:25: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->ctrl_obs = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:612:25: note: place parentheses around the assignment to silence this warning
  assert(data->ctrl_obs = (int *) calloc(data->nprey, sizeof(int)));
                        ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:612:25: note: use '==' to turn this assignment into an equality comparison
  assert(data->ctrl_obs = (int *) calloc(data->nprey, sizeof(int)));
                        ^
                        ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:613:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(data->dmin_inter = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:613:27: note: place parentheses around the assignment to silence this warning
  assert(data->dmin_inter = (float *) calloc(data->ninter, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/initdata.c:613:27: note: use '==' to turn this assignment into an equality comparison
  assert(data->dmin_inter = (float *) calloc(data->ninter, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
69 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/printmap.c:99:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("MAPPING");
  ^~~~~ ~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/printmap.c:105:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/result.c:183:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("RESULT");
  ^~~~~ ~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/result.c:192:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
2 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:25:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  fgets(buf, sizeof(buf), fp);
  ^~~~~ ~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:142:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir LOG");      /* error logs */
  ^~~~~~ ~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:143:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir MAPPING");      /* mapping logs */
  ^~~~~~ ~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:144:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir MCMC");     /* posterior samples */
  ^~~~~~ ~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:145:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  system("mkdir RESULT");   /* posterior probabilities, other summaries */
  ^~~~~~ ~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:160:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("MCMC");
  ^~~~~ ~~~~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/saint.c:209:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
  chdir("..");
  ^~~~~ ~~~~
7 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:8:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:8:29: note: place parentheses around the assignment to silence this warning
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:8:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglik_prey = (float *) calloc(data->nprey, sizeof(float)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:9:27: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:9:27: note: place parentheses around the assignment to silence this warning
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
                          ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:9:27: note: use '==' to turn this assignment into an equality comparison
  assert(param->loglik_IP = (float *) calloc(data->nIP, sizeof(float)));
                          ^
                          ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:10:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:10:28: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:10:28: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:11:26: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:11:26: note: place parentheses around the assignment to silence this warning
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                         ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:11:26: note: use '==' to turn this assignment into an equality comparison
  assert(param->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                         ^
                         ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:12:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:12:20: note: place parentheses around the assignment to silence this warning
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:12:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->mu = (float *) calloc(data->nprey, sizeof(float)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:13:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:13:21: note: place parentheses around the assignment to silence this warning
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:13:21: note: use '==' to turn this assignment into an equality comparison
  assert(param->eta = (float *) calloc(data->nprey, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:14:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:14:22: note: place parentheses around the assignment to silence this warning
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:14:22: note: use '==' to turn this assignment into an equality comparison
  assert(param->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:15:20: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:15:20: note: place parentheses around the assignment to silence this warning
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
                   ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:15:20: note: use '==' to turn this assignment into an equality comparison
  assert(param->iZ = (int *) calloc(data->ninter, sizeof(int)));
                   ^
                   ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:16:19: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:16:19: note: place parentheses around the assignment to silence this warning
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
                  ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:16:19: note: use '==' to turn this assignment into an equality comparison
  assert(param->Z = (int *) calloc(data->nuinter, sizeof(int)));
                  ^
                  ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:17:29: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:17:29: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                            ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:17:29: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                            ^
                            ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:18:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:18:30: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:18:30: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:19:33: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:19:33: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:19:33: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_true_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                ^
                                ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:20:34: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:20:34: note: place parentheses around the assignment to silence this warning
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                 ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setparam.c:20:34: note: use '==' to turn this assignment into an equality comparison
  assert(param->lambda_false_tmp = (float *) calloc(data->ninter, sizeof(float)));
                                 ^
                                 ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
13 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:4:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:4:30: note: place parentheses around the assignment to silence this warning
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:4:30: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_alpha_prey = (int *) calloc(data->nprey, sizeof(int)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:5:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:5:28: note: place parentheses around the assignment to silence this warning
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:5:28: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_alpha_IP = (int *) calloc(data->nIP, sizeof(int)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:6:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:6:22: note: place parentheses around the assignment to silence this warning
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:6:22: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_mu = (int *) calloc(data->nprey, sizeof(int)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:7:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:7:23: note: place parentheses around the assignment to silence this warning
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:7:23: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_eta = (int *) calloc(data->nprey, sizeof(int)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:8:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:8:24: note: place parentheses around the assignment to silence this warning
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setprior.c:8:24: note: use '==' to turn this assignment into an equality comparison
  assert(prior->w_eta0 = (int *) calloc(data->nprey, sizeof(int)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
5 warnings generated.
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:8:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:8:22: note: place parentheses around the assignment to silence this warning
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:8:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->iZ = (float *) calloc(data->ninter, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:9:21: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:9:21: note: place parentheses around the assignment to silence this warning
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:9:21: note: use '==' to turn this assignment into an equality comparison
  assert(summary->Z = (float *) calloc(data->nuinter, sizeof(float)));
                    ^
                    ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:10:30: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:10:30: note: place parentheses around the assignment to silence this warning
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                             ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:10:30: note: use '==' to turn this assignment into an equality comparison
  assert(summary->alpha_prey = (float *) calloc(data->nprey, sizeof(float)));
                             ^
                             ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:11:28: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:11:28: note: place parentheses around the assignment to silence this warning
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                           ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:11:28: note: use '==' to turn this assignment into an equality comparison
  assert(summary->alpha_IP = (float *) calloc(data->nIP, sizeof(float)));
                           ^
                           ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:12:22: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:12:22: note: place parentheses around the assignment to silence this warning
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
                     ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:12:22: note: use '==' to turn this assignment into an equality comparison
  assert(summary->mu = (float *) calloc(data->nprey, sizeof(float)));
                     ^
                     ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:13:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:13:23: note: place parentheses around the assignment to silence this warning
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:13:23: note: use '==' to turn this assignment into an equality comparison
  assert(summary->eta = (float *) calloc(data->nprey, sizeof(float)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:14:24: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:14:24: note: place parentheses around the assignment to silence this warning
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                       ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:14:24: note: use '==' to turn this assignment into an equality comparison
  assert(summary->eta0 = (float *) calloc(data->nprey, sizeof(float)));
                       ^
                       ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:15:31: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:15:31: note: place parentheses around the assignment to silence this warning
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                              ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:15:31: note: use '==' to turn this assignment into an equality comparison
  assert(summary->lambda_true = (float *) calloc(data->ninter, sizeof(float)));
                              ^
                              ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:16:32: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
         ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:16:32: note: place parentheses around the assignment to silence this warning
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                               ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:16:32: note: use '==' to turn this assignment into an equality comparison
  assert(summary->lambda_false = (float *) calloc(data->ninter, sizeof(float)));
                               ^
                               ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:17:23: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
  assert(summary->FDR = (float *) calloc(data->nuinter, sizeof(float)));
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^~~~
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:17:23: note: place parentheses around the assignment to silence this warning
  assert(summary->FDR = (float *) calloc(data->nuinter, sizeof(float)));
                      ^
         (
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
/<<PKGBUILDDIR>>/src/SAINTint-ctrl/setsummary.c:17:23: note: use '==' to turn this assignment into an equality comparison
  assert(summary->FDR = (float *) calloc(data->nuinter, sizeof(float)));
                      ^
                      ==
/usr/include/assert.h:109:11: note: expanded from macro 'assert'
      if (expr)                                                         \
          ^
10 warnings generated.
mv *.o /<<PKGBUILDDIR>>/build
gcc -Wl,-z,relro -Wl,-z,now /<<PKGBUILDDIR>>/build/*.o -o /<<PKGBUILDDIR>>/bin/saint-int-ctrl -lm -lgsl -lgslcblas 
rm /<<PKGBUILDDIR>>/build/*.o


rm -rf /<<PKGBUILDDIR>>/build
rm -f /<<PKGBUILDDIR>>/src/*/*.gch
-e 

### All executables are in /<<PKGBUILDDIR>>/bin ###


make[2]: Leaving directory '/<<PKGBUILDDIR>>'
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_auto_test
   create-stamp debian/debhelper-build-stamp
 fakeroot debian/rules binary
dh binary
   dh_testroot
   dh_prep
   dh_auto_install
   dh_install
   dh_installdocs
   dh_installchangelogs
   dh_installman
   dh_perl
   dh_link
   dh_strip_nondeterminism
   dh_compress
   dh_fixperms
   dh_missing
   dh_strip
   dh_makeshlibs
   dh_shlibdeps
dpkg-shlibdeps: warning: package could avoid a useless dependency if debian/saint/usr/bin/saint-spc-noctrl-matrix debian/saint/usr/bin/saint-spc-noctrl debian/saint/usr/bin/saint-reformat debian/saint/usr/bin/saint-spc-ctrl debian/saint/usr/bin/saint-int-ctrl were not linked against libgslcblas.so.0 (they use none of the library's symbols)
   dh_installdeb
   dh_gencontrol
   dh_md5sums
   dh_builddeb
dpkg-deb: building package 'saint' in '../saint_2.5.0+dfsg-3_amd64.deb'.
dpkg-deb: building package 'saint-dbgsym' in '../saint-dbgsym_2.5.0+dfsg-3_amd64.deb'.
 dpkg-genbuildinfo --build=binary
 dpkg-genchanges --build=binary >../saint_2.5.0+dfsg-3_amd64.changes
dpkg-genchanges: info: binary-only upload (no source code included)
 dpkg-source --after-build .
dpkg-buildpackage: info: binary-only upload (no source included)
--------------------------------------------------------------------------------
Build finished at 2020-02-25T06:36:46Z

Finished
--------

I: Built successfully

+------------------------------------------------------------------------------+
| Changes                                                                      |
+------------------------------------------------------------------------------+


saint_2.5.0+dfsg-3_amd64.changes:
---------------------------------

Format: 1.8
Date: Thu, 05 Jul 2018 09:13:51 +0200
Source: saint
Binary: saint saint-dbgsym
Architecture: amd64
Version: 2.5.0+dfsg-3
Distribution: unstable
Urgency: medium
Maintainer: Debian Med Packaging Team <debian-med-packaging@lists.alioth.debian.org>
Changed-By: Andreas Tille <tille@debian.org>
Description:
 saint      - Significance Analysis of INTeractome
Changes:
 saint (2.5.0+dfsg-3) unstable; urgency=medium
 .
   * Remove unneeded get-orig-source target
   * hardening=+all
   * debhelper 11 (but --no-parallel needed)
   * Point Vcs fields to salsa.debian.org
   * Standards-Version: 4.1.4
Checksums-Sha1:
 2f876771671a39bed437a381ab9db16f423066c3 212568 saint-dbgsym_2.5.0+dfsg-3_amd64.deb
 b719850afcc122b8fcdffb4c870c8d639c479603 5255 saint_2.5.0+dfsg-3_amd64.buildinfo
 3729d45a7efc4aba257da119c3e6b2449dc3394d 98852 saint_2.5.0+dfsg-3_amd64.deb
Checksums-Sha256:
 69bc2bc71ff7cb7bf62c2f842f6c4091ba8b184c7523738f516bc6b039154fd3 212568 saint-dbgsym_2.5.0+dfsg-3_amd64.deb
 8d9e19d7774e8ec7a4507b9bb77fb808d68a98692be0a9c966067e0018164b24 5255 saint_2.5.0+dfsg-3_amd64.buildinfo
 4fff446aaa4f9dccbc552c617cc1ba09040d0acd209786653cf6e3b97b7211fa 98852 saint_2.5.0+dfsg-3_amd64.deb
Files:
 b5a6c06d4851614b622ea2f1ffbb5add 212568 debug optional saint-dbgsym_2.5.0+dfsg-3_amd64.deb
 1c6810ddfb4f5f5838adbc17c12c4fa1 5255 science optional saint_2.5.0+dfsg-3_amd64.buildinfo
 f5560d491ab8f3f24614b437ac299a1d 98852 science optional saint_2.5.0+dfsg-3_amd64.deb

+------------------------------------------------------------------------------+
| Buildinfo                                                                    |
+------------------------------------------------------------------------------+

Format: 1.0
Source: saint
Binary: saint
Architecture: amd64
Version: 2.5.0+dfsg-3
Checksums-Md5:
 b5a6c06d4851614b622ea2f1ffbb5add 212568 saint-dbgsym_2.5.0+dfsg-3_amd64.deb
 f5560d491ab8f3f24614b437ac299a1d 98852 saint_2.5.0+dfsg-3_amd64.deb
Checksums-Sha1:
 2f876771671a39bed437a381ab9db16f423066c3 212568 saint-dbgsym_2.5.0+dfsg-3_amd64.deb
 3729d45a7efc4aba257da119c3e6b2449dc3394d 98852 saint_2.5.0+dfsg-3_amd64.deb
Checksums-Sha256:
 69bc2bc71ff7cb7bf62c2f842f6c4091ba8b184c7523738f516bc6b039154fd3 212568 saint-dbgsym_2.5.0+dfsg-3_amd64.deb
 4fff446aaa4f9dccbc552c617cc1ba09040d0acd209786653cf6e3b97b7211fa 98852 saint_2.5.0+dfsg-3_amd64.deb
Build-Origin: Debian
Build-Architecture: amd64
Build-Date: Tue, 25 Feb 2020 06:36:46 +0000
Build-Path: /<<PKGBUILDDIR>>
Installed-Build-Depends:
 autoconf (= 2.69-11.1),
 automake (= 1:1.16.1-4),
 autopoint (= 0.19.8.1-10),
 autotools-dev (= 20180224.1),
 base-files (= 11),
 base-passwd (= 3.5.47),
 bash (= 5.0-5),
 binutils (= 2.34-3),
 binutils-common (= 2.34-3),
 binutils-x86-64-linux-gnu (= 2.34-3),
 bsdmainutils (= 11.1.2+b1),
 bsdutils (= 1:2.34-0.1),
 build-essential (= 12.8),
 bzip2 (= 1.0.8-2),
 clang-9 (= 1:9.0.1-8),
 coreutils (= 8.30-3+b1),
 cpp (= 4:9.2.1-3.1),
 cpp-9 (= 9.2.1-29),
 dash (= 0.5.10.2-6),
 debconf (= 1.5.73),
 debhelper (= 12.9),
 debianutils (= 4.9.1),
 dh-autoreconf (= 19),
 dh-strip-nondeterminism (= 1.6.3-2),
 diffutils (= 1:3.7-3),
 dpkg (= 1.19.7),
 dpkg-dev (= 1.19.7),
 dwz (= 0.13-5),
 fdisk (= 2.34-0.1),
 file (= 1:5.38-4),
 findutils (= 4.7.0-1),
 g++ (= 4:9.2.1-3.1),
 g++-9 (= 9.2.1-29),
 gcc (= 4:9.2.1-3.1),
 gcc-10-base (= 10-20200222-1),
 gcc-8-base (= 8.3.0-29),
 gcc-9 (= 9.2.1-29),
 gcc-9-base (= 9.2.1-29),
 gettext (= 0.19.8.1-10),
 gettext-base (= 0.19.8.1-10),
 grep (= 3.4-1),
 groff-base (= 1.22.4-4),
 gzip (= 1.9-3+b1),
 hostname (= 3.23),
 init-system-helpers (= 1.57),
 intltool-debian (= 0.35.0+20060710.5),
 lib32gcc-s1 (= 10-20200222-1),
 lib32gcc1 (= 1:10-20200222-1),
 lib32stdc++6 (= 10-20200222-1),
 libacl1 (= 2.2.53-5),
 libarchive-zip-perl (= 1.67-1),
 libasan5 (= 9.2.1-29),
 libatomic1 (= 10-20200222-1),
 libattr1 (= 1:2.4.48-5),
 libaudit-common (= 1:2.8.5-2),
 libaudit1 (= 1:2.8.5-2+b1),
 libbinutils (= 2.34-3),
 libblkid1 (= 2.34-0.1),
 libbsd0 (= 0.10.0-1),
 libbz2-1.0 (= 1.0.8-2),
 libc-bin (= 2.29-10),
 libc-dev-bin (= 2.29-10),
 libc6 (= 2.29-10),
 libc6-dev (= 2.29-10),
 libc6-i386 (= 2.29-10),
 libcap-ng0 (= 0.7.9-2.1+b1),
 libcc1-0 (= 10-20200222-1),
 libclang-common-9-dev (= 1:9.0.1-8),
 libclang-cpp9 (= 1:9.0.1-8),
 libcroco3 (= 0.6.13-1),
 libcrypt-dev (= 1:4.4.10-10),
 libcrypt1 (= 1:4.4.10-10),
 libctf-nobfd0 (= 2.34-3),
 libctf0 (= 2.34-3),
 libdb5.3 (= 5.3.28+dfsg1-0.6),
 libdebconfclient0 (= 0.251),
 libdebhelper-perl (= 12.9),
 libdpkg-perl (= 1.19.7),
 libedit2 (= 3.1-20191231-1),
 libelf1 (= 0.176-1.1),
 libfdisk1 (= 2.34-0.1),
 libffi7 (= 3.3-3),
 libfile-stripnondeterminism-perl (= 1.6.3-2),
 libgc1c2 (= 1:7.6.4-0.4),
 libgcc-8-dev (= 8.3.0-29),
 libgcc-9-dev (= 9.2.1-29),
 libgcc-s1 (= 10-20200222-1),
 libgcc1 (= 1:10-20200222-1),
 libgcrypt20 (= 1.8.5-5),
 libgdbm-compat4 (= 1.18.1-5),
 libgdbm6 (= 1.18.1-5),
 libglib2.0-0 (= 2.62.4-2),
 libgmp10 (= 2:6.2.0+dfsg-4),
 libgomp1 (= 10-20200222-1),
 libgpg-error0 (= 1.37-1),
 libgsl-dev (= 2.5+dfsg-6+b1),
 libgsl23 (= 2.5+dfsg-6+b1),
 libgslcblas0 (= 2.5+dfsg-6+b1),
 libicu63 (= 63.2-2),
 libisl22 (= 0.22.1-1),
 libitm1 (= 10-20200222-1),
 libllvm9 (= 1:9.0.1-8),
 liblsan0 (= 10-20200222-1),
 liblz4-1 (= 1.9.2-2),
 liblzma5 (= 5.2.4-1+b1),
 libmagic-mgc (= 1:5.38-4),
 libmagic1 (= 1:5.38-4),
 libmount1 (= 2.34-0.1),
 libmpc3 (= 1.1.0-1),
 libmpfr6 (= 4.0.2-1),
 libmpx2 (= 8.3.0-29),
 libncursesw6 (= 6.1+20191019-1),
 libobjc-8-dev (= 8.3.0-29),
 libobjc4 (= 10-20200222-1),
 libpam-modules (= 1.3.1-5),
 libpam-modules-bin (= 1.3.1-5),
 libpam-runtime (= 1.3.1-5),
 libpam0g (= 1.3.1-5),
 libpcre2-8-0 (= 10.34-7),
 libpcre3 (= 2:8.39-12+b1),
 libperl5.30 (= 5.30.0-9),
 libpipeline1 (= 1.5.2-2),
 libquadmath0 (= 10-20200222-1),
 libseccomp2 (= 2.4.2-2),
 libselinux1 (= 3.0-1+b1),
 libsigsegv2 (= 2.12-2),
 libsmartcols1 (= 2.34-0.1),
 libstdc++-8-dev (= 8.3.0-29),
 libstdc++-9-dev (= 9.2.1-29),
 libstdc++6 (= 10-20200222-1),
 libsub-override-perl (= 0.09-2),
 libsystemd0 (= 244.3-1),
 libtinfo6 (= 6.1+20191019-1),
 libtool (= 2.4.6-13),
 libtsan0 (= 10-20200222-1),
 libubsan1 (= 10-20200222-1),
 libuchardet0 (= 0.0.6-3),
 libudev1 (= 244.3-1),
 libunistring2 (= 0.9.10-2),
 libuuid1 (= 2.34-0.1),
 libxml2 (= 2.9.10+dfsg-3),
 libz3-4 (= 4.8.7-4),
 linux-libc-dev (= 5.4.19-1),
 login (= 1:4.8.1-1),
 lsb-base (= 11.1.0),
 m4 (= 1.4.18-4),
 make (= 4.2.1-1.2),
 man-db (= 2.9.0-2),
 mawk (= 1.3.4.20200120-2),
 ncurses-base (= 6.1+20191019-1),
 ncurses-bin (= 6.1+20191019-1),
 patch (= 2.7.6-6),
 perl (= 5.30.0-9),
 perl-base (= 5.30.0-9),
 perl-modules-5.30 (= 5.30.0-9),
 po-debconf (= 1.0.21),
 sed (= 4.7-1),
 sensible-utils (= 0.0.12+nmu1),
 sysvinit-utils (= 2.96-2.1),
 tar (= 1.30+dfsg-6+b1),
 util-linux (= 2.34-0.1),
 xz-utils (= 5.2.4-1+b1),
 zlib1g (= 1:1.2.11.dfsg-2)
Environment:
 DEB_BUILD_OPTIONS="parallel=4"
 LANG="C.UTF-8"
 LC_ALL="C.UTF-8"
 SOURCE_DATE_EPOCH="1530774831"


+------------------------------------------------------------------------------+
| Package contents                                                             |
+------------------------------------------------------------------------------+


saint-dbgsym_2.5.0+dfsg-3_amd64.deb
-----------------------------------

 new Debian package, version 2.0.
 size 212568 bytes: control archive=756 bytes.
     536 bytes,    12 lines      control              
     530 bytes,     5 lines      md5sums              
 Package: saint-dbgsym
 Source: saint
 Version: 2.5.0+dfsg-3
 Auto-Built-Package: debug-symbols
 Architecture: amd64
 Maintainer: Debian Med Packaging Team <debian-med-packaging@lists.alioth.debian.org>
 Installed-Size: 269
 Depends: saint (= 2.5.0+dfsg-3)
 Section: debug
 Priority: optional
 Description: debug symbols for saint
 Build-Ids: 192e81aee8cbe1945435cd362069d2e754a7ca58 31a12b6c982ae76f884b81ae7201e72733770f69 5635cf8258f30b8d3574a495769f368729f011cf 8daa389505fc05c7e0a86cbbdfc5c031c4641e00 fcbf15874fc3916357e4fd7415feeeacb72b5e1f

drwxr-xr-x root/root         0 2018-07-05 07:13 ./
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/.build-id/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/.build-id/19/
-rw-r--r-- root/root     26120 2018-07-05 07:13 ./usr/lib/debug/.build-id/19/2e81aee8cbe1945435cd362069d2e754a7ca58.debug
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/.build-id/31/
-rw-r--r-- root/root     63352 2018-07-05 07:13 ./usr/lib/debug/.build-id/31/a12b6c982ae76f884b81ae7201e72733770f69.debug
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/.build-id/56/
-rw-r--r-- root/root     65160 2018-07-05 07:13 ./usr/lib/debug/.build-id/56/35cf8258f30b8d3574a495769f368729f011cf.debug
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/.build-id/8d/
-rw-r--r-- root/root     63976 2018-07-05 07:13 ./usr/lib/debug/.build-id/8d/aa389505fc05c7e0a86cbbdfc5c031c4641e00.debug
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/lib/debug/.build-id/fc/
-rw-r--r-- root/root     40392 2018-07-05 07:13 ./usr/lib/debug/.build-id/fc/bf15874fc3916357e4fd7415feeeacb72b5e1f.debug
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/doc/
lrwxrwxrwx root/root         0 2018-07-05 07:13 ./usr/share/doc/saint-dbgsym -> saint


saint_2.5.0+dfsg-3_amd64.deb
----------------------------

 new Debian package, version 2.0.
 size 98852 bytes: control archive=1180 bytes.
     893 bytes,    21 lines      control              
     878 bytes,    13 lines      md5sums              
 Package: saint
 Version: 2.5.0+dfsg-3
 Architecture: amd64
 Maintainer: Debian Med Packaging Team <debian-med-packaging@lists.alioth.debian.org>
 Installed-Size: 444
 Depends: libc6 (>= 2.29), libgsl23 (>= 2.5), libgslcblas0 (>= 2.4)
 Section: science
 Priority: optional
 Homepage: http://saint-apms.sourceforge.net/Main.html
 Description: Significance Analysis of INTeractome
  SAINT implements the scoring algorithm for protein-protein interaction
  data using label free quantitative proteomics data in AP-MS experiments.
  It was used for spectral count data in the yeast kinase interactome work
  not incorporating control purification, as well as a generalized
  implementation for spectral count data with and without control
  purification.
  .
  Alternatively, you can also run SAINT in combination with ProHits.
  .
  The package was written for either doing analysis without or with
  control IPs and

drwxr-xr-x root/root         0 2018-07-05 07:13 ./
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/bin/
-rwxr-xr-x root/root    100344 2018-07-05 07:13 ./usr/bin/saint-int-ctrl
-rwxr-xr-x root/root     43000 2018-07-05 07:13 ./usr/bin/saint-reformat
-rwxr-xr-x root/root    108536 2018-07-05 07:13 ./usr/bin/saint-spc-ctrl
-rwxr-xr-x root/root    108536 2018-07-05 07:13 ./usr/bin/saint-spc-noctrl
-rwxr-xr-x root/root     75768 2018-07-05 07:13 ./usr/bin/saint-spc-noctrl-matrix
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/doc/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/doc/saint/
-rw-r--r-- root/root       593 2018-07-05 07:13 ./usr/share/doc/saint/README.Debian
-rw-r--r-- root/root       722 2018-07-05 07:13 ./usr/share/doc/saint/changelog.Debian.gz
-rw-r--r-- root/root      1338 2018-07-05 07:13 ./usr/share/doc/saint/copyright
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/man/
drwxr-xr-x root/root         0 2018-07-05 07:13 ./usr/share/man/man1/
-rw-r--r-- root/root       354 2018-07-05 07:13 ./usr/share/man/man1/saint-int-ctrl.1.gz
-rw-r--r-- root/root       383 2018-07-05 07:13 ./usr/share/man/man1/saint-reformat.1.gz
-rw-r--r-- root/root       669 2018-07-05 07:13 ./usr/share/man/man1/saint-spc-ctrl.1.gz
-rw-r--r-- root/root       434 2018-07-05 07:13 ./usr/share/man/man1/saint-spc-noctrl-matrix.1.gz
-rw-r--r-- root/root       620 2018-07-05 07:13 ./usr/share/man/man1/saint-spc-noctrl.1.gz


+------------------------------------------------------------------------------+
| Post Build                                                                   |
+------------------------------------------------------------------------------+


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: binary
Build-Space: 2984
Build-Time: 17
Distribution: unstable
Host Architecture: amd64
Install-Time: 5
Job: saint_2.5.0+dfsg-3
Machine Architecture: amd64
Package: saint
Package-Time: 37
Source-Version: 2.5.0+dfsg-3
Space: 2984
Status: successful
Version: 2.5.0+dfsg-3
--------------------------------------------------------------------------------
Finished at 2020-02-25T06:36:46Z
Build needed 00:00:37, 2984k disk space
DC-Status: OK 38.451160048s

DC-Build-Header: golang-github-pelletier-go-toml 1.6.0-1 / 2020-02-24 21:31:37 +0000
DC-Task: type:rebuild-binarch-only source:golang-github-pelletier-go-toml version:1.6.0-1 chroot:unstable esttime:270 logfile:/tmp/golang-github-pelletier-go-toml_1.6.0-1_unstable_clang8.log modes:clang8:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v --no-run-lintian --chroot-setup-commands=/tmp/clang8 golang-github-pelletier-go-toml_1.6.0-1'
sbuild (Debian sbuild) 0.78.1 (09 February 2019) on ip-172-31-7-42.eu-central-1.compute.internal

+=================================================================================+
| golang-github-pelletier-go-toml 1.6.0-1 (amd64) Mon, 24 Feb 2020 21:31:38 +0000 |
+=================================================================================+

Package: golang-github-pelletier-go-toml
Version: 1.6.0-1
Source Version: 1.6.0-1
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: binary

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/sid-amd64-sbuild-0f1984d1-8172-4ea3-a671-a87c7ae6288a' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang8
-----------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=8
+ echo 'Install of clang-8'
Install of clang-8
+ apt-get update
Get:1 http://127.0.0.1:12990/debian sid InRelease [142 kB]
Get:2 http://127.0.0.1:12990/debian sid/main Sources.diff/Index [27.9 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 Packages.diff/Index [27.9 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-0823.32.pdiff [11.0 kB]
Get:5 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-1420.34.pdiff [30.2 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-2014.03.pdiff [16.9 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-2014.03.pdiff [16.9 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-0823.32.pdiff [15.5 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-1420.34.pdiff [27.5 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-2014.03.pdiff [21.6 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-2014.03.pdiff [21.6 kB]
Get:10 http://127.0.0.1:12990/debian sid/main Translation-en [6193 kB]
Fetched 6514 kB in 5s (1374 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-8 libomp-8-dev libobjc-9-dev
Reading package lists...
Building dependency tree...
The following additional packages will be installed:
  gcc-8-base lib32gcc-s1 lib32gcc1 lib32stdc++6 libbsd0 libc6-i386
  libclang-common-8-dev libclang1-8 libedit2 libgc1c2 libgcc-8-dev libllvm8
  libmpx2 libobjc-8-dev libobjc4 libomp5-8 libstdc++-8-dev
Suggested packages:
  clang-8-doc libomp-8-doc libstdc++-8-doc
Recommended packages:
  llvm-8-dev python3
The following NEW packages will be installed:
  clang-8 gcc-8-base lib32gcc-s1 lib32gcc1 lib32stdc++6 libbsd0 libc6-i386
  libclang-common-8-dev libclang1-8 libedit2 libgc1c2 libgcc-8-dev libllvm8
  libmpx2 libobjc-8-dev libobjc-9-dev libobjc4 libomp-8-dev libomp5-8
  libstdc++-8-dev
0 upgraded, 20 newly installed, 0 to remove and 1 not upgraded.
Need to get 39.9 MB of archives.
After this operation, 223 MB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libbsd0 amd64 0.10.0-1 [107 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 libedit2 amd64 3.1-20191231-1 [95.4 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libllvm8 amd64 1:8.0.1-7 [13.8 MB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 gcc-8-base amd64 8.3.0-29 [194 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libmpx2 amd64 8.3.0-29 [11.4 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 libgcc-8-dev amd64 8.3.0-29 [2297 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libstdc++-8-dev amd64 8.3.0-29 [1543 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libgc1c2 amd64 1:7.6.4-0.4 [224 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libobjc4 amd64 10-20200222-1 [41.6 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libobjc-8-dev amd64 8.3.0-29 [227 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libc6-i386 amd64 2.29-10 [2918 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc-s1 amd64 10-20200222-1 [49.4 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc1 amd64 1:10-20200222-1 [1104 B]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 lib32stdc++6 amd64 10-20200222-1 [510 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 libclang-common-8-dev amd64 1:8.0.1-7 [2989 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 libclang1-8 amd64 1:8.0.1-7 [6244 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 clang-8 amd64 1:8.0.1-7 [8010 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libobjc-9-dev amd64 9.2.1-29 [219 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 libomp5-8 amd64 1:8.0.1-7 [331 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libomp-8-dev amd64 1:8.0.1-7 [62.3 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 39.9 MB in 1s (44.1 MB/s)
Selecting previously unselected package libbsd0:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 12119 files and directories currently installed.)
Preparing to unpack .../00-libbsd0_0.10.0-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.10.0-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../01-libedit2_3.1-20191231-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20191231-1) ...
Selecting previously unselected package libllvm8:amd64.
Preparing to unpack .../02-libllvm8_1%3a8.0.1-7_amd64.deb ...
Unpacking libllvm8:amd64 (1:8.0.1-7) ...
Selecting previously unselected package gcc-8-base:amd64.
Preparing to unpack .../03-gcc-8-base_8.3.0-29_amd64.deb ...
Unpacking gcc-8-base:amd64 (8.3.0-29) ...
Selecting previously unselected package libmpx2:amd64.
Preparing to unpack .../04-libmpx2_8.3.0-29_amd64.deb ...
Unpacking libmpx2:amd64 (8.3.0-29) ...
Selecting previously unselected package libgcc-8-dev:amd64.
Preparing to unpack .../05-libgcc-8-dev_8.3.0-29_amd64.deb ...
Unpacking libgcc-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libstdc++-8-dev:amd64.
Preparing to unpack .../06-libstdc++-8-dev_8.3.0-29_amd64.deb ...
Unpacking libstdc++-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libgc1c2:amd64.
Preparing to unpack .../07-libgc1c2_1%3a7.6.4-0.4_amd64.deb ...
Unpacking libgc1c2:amd64 (1:7.6.4-0.4) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../08-libobjc4_10-20200222-1_amd64.deb ...
Unpacking libobjc4:amd64 (10-20200222-1) ...
Selecting previously unselected package libobjc-8-dev:amd64.
Preparing to unpack .../09-libobjc-8-dev_8.3.0-29_amd64.deb ...
Unpacking libobjc-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../10-libc6-i386_2.29-10_amd64.deb ...
Unpacking libc6-i386 (2.29-10) ...
Selecting previously unselected package lib32gcc-s1.
Preparing to unpack .../11-lib32gcc-s1_10-20200222-1_amd64.deb ...
Unpacking lib32gcc-s1 (10-20200222-1) ...
Selecting previously unselected package lib32gcc1.
Preparing to unpack .../12-lib32gcc1_1%3a10-20200222-1_amd64.deb ...
Unpacking lib32gcc1 (1:10-20200222-1) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../13-lib32stdc++6_10-20200222-1_amd64.deb ...
Unpacking lib32stdc++6 (10-20200222-1) ...
Selecting previously unselected package libclang-common-8-dev.
Preparing to unpack .../14-libclang-common-8-dev_1%3a8.0.1-7_amd64.deb ...
Unpacking libclang-common-8-dev (1:8.0.1-7) ...
Selecting previously unselected package libclang1-8.
Preparing to unpack .../15-libclang1-8_1%3a8.0.1-7_amd64.deb ...
Unpacking libclang1-8 (1:8.0.1-7) ...
Selecting previously unselected package clang-8.
Preparing to unpack .../16-clang-8_1%3a8.0.1-7_amd64.deb ...
Unpacking clang-8 (1:8.0.1-7) ...
Selecting previously unselected package libobjc-9-dev:amd64.
Preparing to unpack .../17-libobjc-9-dev_9.2.1-29_amd64.deb ...
Unpacking libobjc-9-dev:amd64 (9.2.1-29) ...
Selecting previously unselected package libomp5-8:amd64.
Preparing to unpack .../18-libomp5-8_1%3a8.0.1-7_amd64.deb ...
Unpacking libomp5-8:amd64 (1:8.0.1-7) ...
Selecting previously unselected package libomp-8-dev.
Preparing to unpack .../19-libomp-8-dev_1%3a8.0.1-7_amd64.deb ...
Unpacking libomp-8-dev (1:8.0.1-7) ...
Setting up libgc1c2:amd64 (1:7.6.4-0.4) ...
Setting up libobjc4:amd64 (10-20200222-1) ...
Setting up gcc-8-base:amd64 (8.3.0-29) ...
Setting up libobjc-9-dev:amd64 (9.2.1-29) ...
Setting up libmpx2:amd64 (8.3.0-29) ...
Setting up libc6-i386 (2.29-10) ...
Setting up libbsd0:amd64 (0.10.0-1) ...
Setting up libomp5-8:amd64 (1:8.0.1-7) ...
Setting up libomp-8-dev (1:8.0.1-7) ...
Setting up libedit2:amd64 (3.1-20191231-1) ...
Setting up lib32gcc-s1 (10-20200222-1) ...
Setting up libgcc-8-dev:amd64 (8.3.0-29) ...
Setting up libstdc++-8-dev:amd64 (8.3.0-29) ...
Setting up libllvm8:amd64 (1:8.0.1-7) ...
Setting up libclang1-8 (1:8.0.1-7) ...
Setting up lib32gcc1 (1:10-20200222-1) ...
Setting up libobjc-8-dev:amd64 (8.3.0-29) ...
Setting up lib32stdc++6 (10-20200222-1) ...
Setting up libclang-common-8-dev (1:8.0.1-7) ...
Setting up clang-8 (1:8.0.1-7) ...
Processing triggers for libc-bin (2.29-10) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8 9 10'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-8 g++-4.6
+ ln -s clang-8 gcc-4.6
+ ln -s clang-8 cpp-4.6
+ ln -s clang-8 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-8 g++-4.7
+ ln -s clang-8 gcc-4.7
+ ln -s clang-8 cpp-4.7
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-4.7 hold'
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ dpkg --set-selections
+ echo 'g++-4.7 hold'
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-8 g++-4.8
+ ln -s clang-8 gcc-4.8
+ ln -s clang-8 cpp-4.8
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-4.8 hold'
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-8 g++-4.9
+ ln -s clang-8 gcc-4.9
+ ln -s clang-8 cpp-4.9
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-4.9 hold'
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-8 g++-5
+ ln -s clang-8 gcc-5
+ ln -s clang-8 cpp-5
+ ln -s clang-8 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-8 g++-6
+ ln -s clang-8 gcc-6
+ ln -s clang-8 cpp-6
+ ln -s clang-8 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ dpkg --set-selections
+ echo 'g++-6 hold'
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-8 g++-7
+ ln -s clang-8 gcc-7
+ ln -s clang-8 cpp-7
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-7 hold'
dpkg: warning: package not in status nor available database at line 1: gcc-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-8 g++-8
+ ln -s clang-8 gcc-8
+ ln -s clang-8 cpp-8
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-8 hold'
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-9 gcc-9 cpp-9 gcc
+ ln -s clang++-8 g++-9
+ ln -s clang-8 gcc-9
+ ln -s clang-8 cpp-9
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-9 hold'
+ echo 'g++-9 hold'
+ dpkg --set-selections
+ for VERSION in $VERSIONS
+ rm -f g++-10 gcc-10 cpp-10 gcc
+ ln -s clang++-8 g++-10
+ ln -s clang-8 gcc-10
+ ln -s clang-8 cpp-10
+ ln -s clang-8 gcc
+ dpkg --set-selections
+ echo 'gcc-10 hold'
dpkg: warning: package not in status nor available database at line 1: gcc-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ dpkg --set-selections
+ echo 'g++-10 hold'
dpkg: warning: package not in status nor available database at line 1: g++-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ cd -
/build/golang-github-pelletier-go-toml-s7kgD7
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version

I: Finished running '/tmp/clang8'.

Finished processing commands.
--------------------------------------------------------------------------------
I: NOTICE: Log filtering will replace 'build/golang-github-pelletier-go-toml-s7kgD7/resolver-O0lVgZ' with '<<RESOLVERDIR>>'

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:12990/debian sid InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  libgmp10
1 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 253 kB of archives.
After this operation, 0 B of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libgmp10 amd64 2:6.2.0+dfsg-4 [253 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 253 kB in 0s (4317 kB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13887 files and directories currently installed.)
Preparing to unpack .../libgmp10_2%3a6.2.0+dfsg-4_amd64.deb ...
Unpacking libgmp10:amd64 (2:6.2.0+dfsg-4) over (2:6.2.0+dfsg-3) ...
Setting up libgmp10:amd64 (2:6.2.0+dfsg-4) ...
Processing triggers for libc-bin (2.29-10) ...

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
NOTICE: 'golang-github-pelletier-go-toml' packaging is maintained in the 'Git' version control system at:
https://salsa.debian.org/go-team/packages/golang-github-pelletier-go-toml.git
Please use:
git clone https://salsa.debian.org/go-team/packages/golang-github-pelletier-go-toml.git
to retrieve the latest (possibly unreleased) updates to the package.
Need to get 89.7 kB of source archives.
Get:1 http://127.0.0.1:12990/debian sid/main golang-github-pelletier-go-toml 1.6.0-1 (dsc) [2512 B]
Get:2 http://127.0.0.1:12990/debian sid/main golang-github-pelletier-go-toml 1.6.0-1 (tar) [82.7 kB]
Get:3 http://127.0.0.1:12990/debian sid/main golang-github-pelletier-go-toml 1.6.0-1 (diff) [4488 B]
Fetched 89.7 kB in 0s (355 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/golang-github-pelletier-go-toml-s7kgD7/golang-github-pelletier-go-toml-1.6.0' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/golang-github-pelletier-go-toml-s7kgD7' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper-compat (= 12), dh-golang, golang-any, golang-github-burntsushi-toml-dev, golang-github-davecgh-go-spew-dev, golang-gopkg-yaml.v2-dev (>= 2.2.4~), build-essential, fakeroot
Filtered Build-Depends: debhelper-compat (= 12), dh-golang, golang-any, golang-github-burntsushi-toml-dev, golang-github-davecgh-go-spew-dev, golang-gopkg-yaml.v2-dev (>= 2.2.4~), build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-main-dummy' in '/<<RESOLVERDIR>>/apt_archive/sbuild-build-depends-main-dummy.deb'.
Ign:1 copy:/<<RESOLVERDIR>>/apt_archive ./ InRelease
Get:2 copy:/<<RESOLVERDIR>>/apt_archive ./ Release [957 B]
Ign:3 copy:/<<RESOLVERDIR>>/apt_archive ./ Release.gpg
Get:4 copy:/<<RESOLVERDIR>>/apt_archive ./ Sources [439 B]
Get:5 copy:/<<RESOLVERDIR>>/apt_archive ./ Packages [520 B]
Fetched 1916 B in 0s (68.6 kB/s)
Reading package lists...
Reading package lists...

Install main build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils debhelper
  dh-autoreconf dh-golang dh-strip-nondeterminism dwz file gettext
  gettext-base golang-1.13-go golang-1.13-src golang-any
  golang-github-burntsushi-toml-dev golang-github-davecgh-go-spew-dev
  golang-github-kr-pretty-dev golang-github-kr-pty-dev
  golang-github-kr-text-dev golang-go golang-gopkg-check.v1-dev
  golang-gopkg-yaml.v2-dev golang-src groff-base intltool-debian
  libarchive-zip-perl libcroco3 libdebhelper-perl libelf1
  libfile-stripnondeterminism-perl libglib2.0-0 libicu63 libmagic-mgc
  libmagic1 libpipeline1 libsigsegv2 libsub-override-perl libtool libuchardet0
  libxml2 m4 man-db po-debconf sensible-utils
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc wamerican | wordlist whois
  vacation dh-make gettext-doc libasprintf-dev libgettextpo-dev bzr | brz
  ca-certificates git mercurial subversion groff libtool-doc gfortran
  | fortran95-compiler gcj-jdk m4-doc apparmor less www-browser
  libmail-box-perl
Recommended packages:
  curl | wget | lynx pkg-config libarchive-cpio-perl libglib2.0-data
  shared-mime-info xdg-user-dirs libltdl-dev libmail-sendmail-perl
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils debhelper
  dh-autoreconf dh-golang dh-strip-nondeterminism dwz file gettext
  gettext-base golang-1.13-go golang-1.13-src golang-any
  golang-github-burntsushi-toml-dev golang-github-davecgh-go-spew-dev
  golang-github-kr-pretty-dev golang-github-kr-pty-dev
  golang-github-kr-text-dev golang-go golang-gopkg-check.v1-dev
  golang-gopkg-yaml.v2-dev golang-src groff-base intltool-debian
  libarchive-zip-perl libcroco3 libdebhelper-perl libelf1
  libfile-stripnondeterminism-perl libglib2.0-0 libicu63 libmagic-mgc
  libmagic1 libpipeline1 libsigsegv2 libsub-override-perl libtool libuchardet0
  libxml2 m4 man-db po-debconf sbuild-build-depends-main-dummy sensible-utils
0 upgraded, 47 newly installed, 0 to remove and 0 not upgraded.
Need to get 79.7 MB of archives.
After this operation, 389 MB of additional disk space will be used.
Get:1 copy:/<<RESOLVERDIR>>/apt_archive ./ sbuild-build-depends-main-dummy 0.invalid.0 [944 B]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 bsdmainutils amd64 11.1.2+b1 [191 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libuchardet0 amd64 0.0.6-3 [64.9 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 groff-base amd64 1.22.4-4 [919 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libpipeline1 amd64 1.5.2-2 [33.9 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 man-db amd64 2.9.0-2 [1307 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 sensible-utils all 0.0.12+nmu1 [16.0 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libmagic-mgc amd64 1:5.38-4 [262 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libmagic1 amd64 1:5.38-4 [120 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 file amd64 1:5.38-4 [67.9 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 gettext-base amd64 0.19.8.1-10 [123 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libsigsegv2 amd64 2.12-2 [32.8 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 m4 amd64 1.4.18-4 [203 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 autoconf all 2.69-11.1 [341 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 autotools-dev all 20180224.1 [77.0 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 automake all 1:1.16.1-4 [771 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 autopoint all 0.19.8.1-10 [435 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libtool all 2.4.6-13 [513 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 dh-autoreconf all 19 [16.9 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 libdebhelper-perl all 12.9 [183 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libarchive-zip-perl all 1.67-1 [104 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libsub-override-perl all 0.09-2 [10.2 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libfile-stripnondeterminism-perl all 1.6.3-2 [23.7 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 dh-strip-nondeterminism all 1.6.3-2 [14.7 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 libelf1 amd64 0.176-1.1 [161 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 dwz amd64 0.13-5 [151 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 libglib2.0-0 amd64 2.62.4-2 [1319 kB]
Get:28 http://127.0.0.1:12990/debian sid/main amd64 libicu63 amd64 63.2-2 [8301 kB]
Get:29 http://127.0.0.1:12990/debian sid/main amd64 libxml2 amd64 2.9.10+dfsg-3 [709 kB]
Get:30 http://127.0.0.1:12990/debian sid/main amd64 libcroco3 amd64 0.6.13-1 [146 kB]
Get:31 http://127.0.0.1:12990/debian sid/main amd64 gettext amd64 0.19.8.1-10 [1303 kB]
Get:32 http://127.0.0.1:12990/debian sid/main amd64 intltool-debian all 0.35.0+20060710.5 [26.8 kB]
Get:33 http://127.0.0.1:12990/debian sid/main amd64 po-debconf all 1.0.21 [248 kB]
Get:34 http://127.0.0.1:12990/debian sid/main amd64 debhelper all 12.9 [994 kB]
Get:35 http://127.0.0.1:12990/debian sid/main amd64 dh-golang all 1.46 [23.2 kB]
Get:36 http://127.0.0.1:12990/debian sid/main amd64 golang-1.13-src amd64 1.13.8-1 [12.7 MB]
Get:37 http://127.0.0.1:12990/debian sid/main amd64 golang-1.13-go amd64 1.13.8-1 [47.6 MB]
Get:38 http://127.0.0.1:12990/debian sid/main amd64 golang-src amd64 2:1.13~1 [4572 B]
Get:39 http://127.0.0.1:12990/debian sid/main amd64 golang-go amd64 2:1.13~1 [23.7 kB]
Get:40 http://127.0.0.1:12990/debian sid/main amd64 golang-any amd64 2:1.13~1 [4692 B]
Get:41 http://127.0.0.1:12990/debian sid/main amd64 golang-github-burntsushi-toml-dev all 0.3.1-1 [38.5 kB]
Get:42 http://127.0.0.1:12990/debian sid/main amd64 golang-github-davecgh-go-spew-dev all 1.1.1-2 [29.7 kB]
Get:43 http://127.0.0.1:12990/debian sid/main amd64 golang-github-kr-pty-dev all 1.1.6-1 [10.6 kB]
Get:44 http://127.0.0.1:12990/debian sid/main amd64 golang-github-kr-text-dev all 0.1.0-1 [10.8 kB]
Get:45 http://127.0.0.1:12990/debian sid/main amd64 golang-github-kr-pretty-dev all 0.1.0-1 [10.2 kB]
Get:46 http://127.0.0.1:12990/debian sid/main amd64 golang-gopkg-check.v1-dev all 0.0+git20180628.788fd78-1 [31.6 kB]
Get:47 http://127.0.0.1:12990/debian sid/main amd64 golang-gopkg-yaml.v2-dev all 2.2.8-1 [60.7 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 79.7 MB in 2s (40.2 MB/s)
Selecting previously unselected package bsdmainutils.
(Reading database ... 13887 files and directories currently installed.)
Preparing to unpack .../00-bsdmainutils_11.1.2+b1_amd64.deb ...
Unpacking bsdmainutils (11.1.2+b1) ...
Selecting previously unselected package libuchardet0:amd64.
Preparing to unpack .../01-libuchardet0_0.0.6-3_amd64.deb ...
Unpacking libuchardet0:amd64 (0.0.6-3) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../02-groff-base_1.22.4-4_amd64.deb ...
Unpacking groff-base (1.22.4-4) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../03-libpipeline1_1.5.2-2_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.2-2) ...
Selecting previously unselected package man-db.
Preparing to unpack .../04-man-db_2.9.0-2_amd64.deb ...
Unpacking man-db (2.9.0-2) ...
Selecting previously unselected package sensible-utils.
Preparing to unpack .../05-sensible-utils_0.0.12+nmu1_all.deb ...
Unpacking sensible-utils (0.0.12+nmu1) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../06-libmagic-mgc_1%3a5.38-4_amd64.deb ...
Unpacking libmagic-mgc (1:5.38-4) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../07-libmagic1_1%3a5.38-4_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.38-4) ...
Selecting previously unselected package file.
Preparing to unpack .../08-file_1%3a5.38-4_amd64.deb ...
Unpacking file (1:5.38-4) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../09-gettext-base_0.19.8.1-10_amd64.deb ...
Unpacking gettext-base (0.19.8.1-10) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../10-libsigsegv2_2.12-2_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.12-2) ...
Selecting previously unselected package m4.
Preparing to unpack .../11-m4_1.4.18-4_amd64.deb ...
Unpacking m4 (1.4.18-4) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../12-autoconf_2.69-11.1_all.deb ...
Unpacking autoconf (2.69-11.1) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../13-autotools-dev_20180224.1_all.deb ...
Unpacking autotools-dev (20180224.1) ...
Selecting previously unselected package automake.
Preparing to unpack .../14-automake_1%3a1.16.1-4_all.deb ...
Unpacking automake (1:1.16.1-4) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../15-autopoint_0.19.8.1-10_all.deb ...
Unpacking autopoint (0.19.8.1-10) ...
Selecting previously unselected package libtool.
Preparing to unpack .../16-libtool_2.4.6-13_all.deb ...
Unpacking libtool (2.4.6-13) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../17-dh-autoreconf_19_all.deb ...
Unpacking dh-autoreconf (19) ...
Selecting previously unselected package libdebhelper-perl.
Preparing to unpack .../18-libdebhelper-perl_12.9_all.deb ...
Unpacking libdebhelper-perl (12.9) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../19-libarchive-zip-perl_1.67-1_all.deb ...
Unpacking libarchive-zip-perl (1.67-1) ...
Selecting previously unselected package libsub-override-perl.
Preparing to unpack .../20-libsub-override-perl_0.09-2_all.deb ...
Unpacking libsub-override-perl (0.09-2) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../21-libfile-stripnondeterminism-perl_1.6.3-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (1.6.3-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../22-dh-strip-nondeterminism_1.6.3-2_all.deb ...
Unpacking dh-strip-nondeterminism (1.6.3-2) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../23-libelf1_0.176-1.1_amd64.deb ...
Unpacking libelf1:amd64 (0.176-1.1) ...
Selecting previously unselected package dwz.
Preparing to unpack .../24-dwz_0.13-5_amd64.deb ...
Unpacking dwz (0.13-5) ...
Selecting previously unselected package libglib2.0-0:amd64.
Preparing to unpack .../25-libglib2.0-0_2.62.4-2_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.62.4-2) ...
Selecting previously unselected package libicu63:amd64.
Preparing to unpack .../26-libicu63_63.2-2_amd64.deb ...
Unpacking libicu63:amd64 (63.2-2) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../27-libxml2_2.9.10+dfsg-3_amd64.deb ...
Unpacking libxml2:amd64 (2.9.10+dfsg-3) ...
Selecting previously unselected package libcroco3:amd64.
Preparing to unpack .../28-libcroco3_0.6.13-1_amd64.deb ...
Unpacking libcroco3:amd64 (0.6.13-1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../29-gettext_0.19.8.1-10_amd64.deb ...
Unpacking gettext (0.19.8.1-10) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../30-intltool-debian_0.35.0+20060710.5_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.5) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../31-po-debconf_1.0.21_all.deb ...
Unpacking po-debconf (1.0.21) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../32-debhelper_12.9_all.deb ...
Unpacking debhelper (12.9) ...
Selecting previously unselected package dh-golang.
Preparing to unpack .../33-dh-golang_1.46_all.deb ...
Unpacking dh-golang (1.46) ...
Selecting previously unselected package golang-1.13-src.
Preparing to unpack .../34-golang-1.13-src_1.13.8-1_amd64.deb ...
Unpacking golang-1.13-src (1.13.8-1) ...
Selecting previously unselected package golang-1.13-go.
Preparing to unpack .../35-golang-1.13-go_1.13.8-1_amd64.deb ...
Unpacking golang-1.13-go (1.13.8-1) ...
Selecting previously unselected package golang-src.
Preparing to unpack .../36-golang-src_2%3a1.13~1_amd64.deb ...
Unpacking golang-src (2:1.13~1) ...
Selecting previously unselected package golang-go.
Preparing to unpack .../37-golang-go_2%3a1.13~1_amd64.deb ...
Unpacking golang-go (2:1.13~1) ...
Selecting previously unselected package golang-any.
Preparing to unpack .../38-golang-any_2%3a1.13~1_amd64.deb ...
Unpacking golang-any (2:1.13~1) ...
Selecting previously unselected package golang-github-burntsushi-toml-dev.
Preparing to unpack .../39-golang-github-burntsushi-toml-dev_0.3.1-1_all.deb ...
Unpacking golang-github-burntsushi-toml-dev (0.3.1-1) ...
Selecting previously unselected package golang-github-davecgh-go-spew-dev.
Preparing to unpack .../40-golang-github-davecgh-go-spew-dev_1.1.1-2_all.deb ...
Unpacking golang-github-davecgh-go-spew-dev (1.1.1-2) ...
Selecting previously unselected package golang-github-kr-pty-dev.
Preparing to unpack .../41-golang-github-kr-pty-dev_1.1.6-1_all.deb ...
Unpacking golang-github-kr-pty-dev (1.1.6-1) ...
Selecting previously unselected package golang-github-kr-text-dev.
Preparing to unpack .../42-golang-github-kr-text-dev_0.1.0-1_all.deb ...
Unpacking golang-github-kr-text-dev (0.1.0-1) ...
Selecting previously unselected package golang-github-kr-pretty-dev.
Preparing to unpack .../43-golang-github-kr-pretty-dev_0.1.0-1_all.deb ...
Unpacking golang-github-kr-pretty-dev (0.1.0-1) ...
Selecting previously unselected package golang-gopkg-check.v1-dev.
Preparing to unpack .../44-golang-gopkg-check.v1-dev_0.0+git20180628.788fd78-1_all.deb ...
Unpacking golang-gopkg-check.v1-dev (0.0+git20180628.788fd78-1) ...
Selecting previously unselected package golang-gopkg-yaml.v2-dev.
Preparing to unpack .../45-golang-gopkg-yaml.v2-dev_2.2.8-1_all.deb ...
Unpacking golang-gopkg-yaml.v2-dev (2.2.8-1) ...
Selecting previously unselected package sbuild-build-depends-main-dummy.
Preparing to unpack .../46-sbuild-build-depends-main-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-main-dummy (0.invalid.0) ...
Setting up libpipeline1:amd64 (1.5.2-2) ...
Setting up golang-1.13-src (1.13.8-1) ...
Setting up libmagic-mgc (1:5.38-4) ...
Setting up libarchive-zip-perl (1.67-1) ...
Setting up libglib2.0-0:amd64 (2.62.4-2) ...
No schema files found: doing nothing.
Setting up libdebhelper-perl (12.9) ...
Setting up golang-github-burntsushi-toml-dev (0.3.1-1) ...
Setting up libmagic1:amd64 (1:5.38-4) ...
Setting up gettext-base (0.19.8.1-10) ...
Setting up file (1:5.38-4) ...
Setting up libicu63:amd64 (63.2-2) ...
Setting up golang-github-davecgh-go-spew-dev (1.1.1-2) ...
Setting up autotools-dev (20180224.1) ...
Setting up libsigsegv2:amd64 (2.12-2) ...
Setting up bsdmainutils (11.1.2+b1) ...
update-alternatives: using /usr/bin/bsd-write to provide /usr/bin/write (write) in auto mode
update-alternatives: using /usr/bin/bsd-from to provide /usr/bin/from (from) in auto mode
Setting up autopoint (0.19.8.1-10) ...
Setting up golang-github-kr-pty-dev (1.1.6-1) ...
Setting up golang-1.13-go (1.13.8-1) ...
Setting up sensible-utils (0.0.12+nmu1) ...
Setting up libuchardet0:amd64 (0.0.6-3) ...
Setting up libsub-override-perl (0.09-2) ...
Setting up golang-src (2:1.13~1) ...
Setting up libelf1:amd64 (0.176-1.1) ...
Setting up libxml2:amd64 (2.9.10+dfsg-3) ...
Setting up libfile-stripnondeterminism-perl (1.6.3-2) ...
Setting up libtool (2.4.6-13) ...
Setting up golang-go (2:1.13~1) ...
Setting up m4 (1.4.18-4) ...
Setting up golang-any (2:1.13~1) ...
Setting up golang-github-kr-text-dev (0.1.0-1) ...
Setting up libcroco3:amd64 (0.6.13-1) ...
Setting up autoconf (2.69-11.1) ...
Setting up dh-strip-nondeterminism (1.6.3-2) ...
Setting up dwz (0.13-5) ...
Setting up groff-base (1.22.4-4) ...
Setting up automake (1:1.16.1-4) ...
update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Setting up golang-github-kr-pretty-dev (0.1.0-1) ...
Setting up gettext (0.19.8.1-10) ...
Setting up golang-gopkg-check.v1-dev (0.0+git20180628.788fd78-1) ...
Setting up man-db (2.9.0-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up intltool-debian (0.35.0+20060710.5) ...
Setting up golang-gopkg-yaml.v2-dev (2.2.8-1) ...
Setting up po-debconf (1.0.21) ...
Setting up dh-autoreconf (19) ...
Setting up debhelper (12.9) ...
Setting up dh-golang (1.46) ...
Setting up sbuild-build-depends-main-dummy (0.invalid.0) ...
Processing triggers for libc-bin (2.29-10) ...

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any all)

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) amd64 (x86_64)
Toolchain package versions: binutils_2.34-3 dpkg-dev_1.19.7 g++-9_9.2.1-29 gcc-9_9.2.1-29 libc6-dev_2.29-10 libstdc++-8-dev_8.3.0-29 libstdc++-9-dev_9.2.1-29 libstdc++6_10-20200222-1 linux-libc-dev_5.4.19-1
Package versions: adduser_3.118 apt_1.8.4 autoconf_2.69-11.1 automake_1:1.16.1-4 autopoint_0.19.8.1-10 autotools-dev_20180224.1 base-files_11 base-passwd_3.5.47 bash_5.0-5 binutils_2.34-3 binutils-common_2.34-3 binutils-x86-64-linux-gnu_2.34-3 bsdmainutils_11.1.2+b1 bsdutils_1:2.34-0.1 build-essential_12.8 bzip2_1.0.8-2 clang-8_1:8.0.1-7 coreutils_8.30-3+b1 cpp_4:9.2.1-3.1 cpp-9_9.2.1-29 dash_0.5.10.2-6 debconf_1.5.73 debhelper_12.9 debian-archive-keyring_2019.1 debianutils_4.9.1 dh-autoreconf_19 dh-golang_1.46 dh-strip-nondeterminism_1.6.3-2 diffutils_1:3.7-3 dpkg_1.19.7 dpkg-dev_1.19.7 dwz_0.13-5 e2fsprogs_1.45.5-2 fakeroot_1.24-1 fdisk_2.34-0.1 file_1:5.38-4 findutils_4.7.0-1 g++_4:9.2.1-3.1 g++-9_9.2.1-29 gcc_4:9.2.1-3.1 gcc-10-base_10-20200222-1 gcc-8-base_8.3.0-29 gcc-9_9.2.1-29 gcc-9-base_9.2.1-29 gettext_0.19.8.1-10 gettext-base_0.19.8.1-10 golang-1.13-go_1.13.8-1 golang-1.13-src_1.13.8-1 golang-any_2:1.13~1 golang-github-burntsushi-toml-dev_0.3.1-1 golang-github-davecgh-go-spew-dev_1.1.1-2 golang-github-kr-pretty-dev_0.1.0-1 golang-github-kr-pty-dev_1.1.6-1 golang-github-kr-text-dev_0.1.0-1 golang-go_2:1.13~1 golang-gopkg-check.v1-dev_0.0+git20180628.788fd78-1 golang-gopkg-yaml.v2-dev_2.2.8-1 golang-src_2:1.13~1 gpgv_2.2.19-1 grep_3.4-1 groff-base_1.22.4-4 gzip_1.9-3+b1 hostname_3.23 init-system-helpers_1.57 intltool-debian_0.35.0+20060710.5 lib32gcc-s1_10-20200222-1 lib32gcc1_1:10-20200222-1 lib32stdc++6_10-20200222-1 libacl1_2.2.53-5 libapt-pkg5.0_1.8.4 libarchive-zip-perl_1.67-1 libasan5_9.2.1-29 libatomic1_10-20200222-1 libattr1_1:2.4.48-5 libaudit-common_1:2.8.5-2 libaudit1_1:2.8.5-2+b1 libbinutils_2.34-3 libblkid1_2.34-0.1 libbsd0_0.10.0-1 libbz2-1.0_1.0.8-2 libc-bin_2.29-10 libc-dev-bin_2.29-10 libc6_2.29-10 libc6-dev_2.29-10 libc6-i386_2.29-10 libcap-ng0_0.7.9-2.1+b1 libcc1-0_10-20200222-1 libclang-common-8-dev_1:8.0.1-7 libclang1-8_1:8.0.1-7 libcom-err2_1.45.5-2 libcroco3_0.6.13-1 libcrypt-dev_1:4.4.10-10 libcrypt1_1:4.4.10-10 libctf-nobfd0_2.34-3 libctf0_2.34-3 libdb5.3_5.3.28+dfsg1-0.6 libdebconfclient0_0.251 libdebhelper-perl_12.9 libdpkg-perl_1.19.7 libedit2_3.1-20191231-1 libelf1_0.176-1.1 libext2fs2_1.45.5-2 libfakeroot_1.24-1 libfdisk1_2.34-0.1 libffi7_3.3-3 libfile-stripnondeterminism-perl_1.6.3-2 libgc1c2_1:7.6.4-0.4 libgcc-8-dev_8.3.0-29 libgcc-9-dev_9.2.1-29 libgcc-s1_10-20200222-1 libgcc1_1:10-20200222-1 libgcrypt20_1.8.5-5 libgdbm-compat4_1.18.1-5 libgdbm6_1.18.1-5 libglib2.0-0_2.62.4-2 libgmp10_2:6.2.0+dfsg-4 libgnutls30_3.6.12-2 libgomp1_10-20200222-1 libgpg-error0_1.37-1 libhogweed5_3.5.1+really3.5.1-2 libicu63_63.2-2 libidn2-0_2.2.0-2 libisl22_0.22.1-1 libitm1_10-20200222-1 libllvm8_1:8.0.1-7 liblsan0_10-20200222-1 liblz4-1_1.9.2-2 liblzma5_5.2.4-1+b1 libmagic-mgc_1:5.38-4 libmagic1_1:5.38-4 libmount1_2.34-0.1 libmpc3_1.1.0-1 libmpfr6_4.0.2-1 libmpx2_8.3.0-29 libncursesw6_6.1+20191019-1 libnettle7_3.5.1+really3.5.1-2 libobjc-8-dev_8.3.0-29 libobjc-9-dev_9.2.1-29 libobjc4_10-20200222-1 libomp-8-dev_1:8.0.1-7 libomp5-8_1:8.0.1-7 libp11-kit0_0.23.20-1 libpam-modules_1.3.1-5 libpam-modules-bin_1.3.1-5 libpam-runtime_1.3.1-5 libpam0g_1.3.1-5 libpcre2-8-0_10.34-7 libpcre3_2:8.39-12+b1 libperl5.30_5.30.0-9 libpipeline1_1.5.2-2 libquadmath0_10-20200222-1 libseccomp2_2.4.2-2 libselinux1_3.0-1+b1 libsemanage-common_3.0-1 libsemanage1_3.0-1+b1 libsepol1_3.0-1 libsigsegv2_2.12-2 libsmartcols1_2.34-0.1 libss2_1.45.5-2 libstdc++-8-dev_8.3.0-29 libstdc++-9-dev_9.2.1-29 libstdc++6_10-20200222-1 libsub-override-perl_0.09-2 libsystemd0_244.3-1 libtasn1-6_4.16.0-2 libtinfo6_6.1+20191019-1 libtool_2.4.6-13 libtsan0_10-20200222-1 libubsan1_10-20200222-1 libuchardet0_0.0.6-3 libudev1_244.3-1 libunistring2_0.9.10-2 libuuid1_2.34-0.1 libxml2_2.9.10+dfsg-3 libzstd1_1.4.4+dfsg-3 linux-libc-dev_5.4.19-1 login_1:4.8.1-1 logsave_1.45.5-2 lsb-base_11.1.0 m4_1.4.18-4 make_4.2.1-1.2 man-db_2.9.0-2 mawk_1.3.4.20200120-2 mount_2.34-0.1 ncurses-base_6.1+20191019-1 ncurses-bin_6.1+20191019-1 passwd_1:4.8.1-1 patch_2.7.6-6 perl_5.30.0-9 perl-base_5.30.0-9 perl-modules-5.30_5.30.0-9 po-debconf_1.0.21 sbuild-build-depends-main-dummy_0.invalid.0 sed_4.7-1 sensible-utils_0.0.12+nmu1 sysvinit-utils_2.96-2.1 tar_1.30+dfsg-6+b1 tzdata_2019c-3 util-linux_2.34-0.1 xz-utils_5.2.4-1+b1 zlib1g_1:1.2.11.dfsg-1.2

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: golang-github-pelletier-go-toml
Binary: golang-github-pelletier-go-toml-dev, golang-github-pelletier-go-toml
Architecture: any all
Version: 1.6.0-1
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: Dr. Tobias Quathamer <toddy@debian.org>, Anthony Fok <foka@debian.org>
Homepage: https://github.com/pelletier/go-toml
Standards-Version: 4.5.0
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-github-pelletier-go-toml
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-github-pelletier-go-toml.git
Testsuite: autopkgtest-pkg-go
Build-Depends: debhelper-compat (= 12), dh-golang, golang-any, golang-github-burntsushi-toml-dev, golang-github-davecgh-go-spew-dev, golang-gopkg-yaml.v2-dev (>= 2.2.4~)
Package-List:
 golang-github-pelletier-go-toml deb devel optional arch=any
 golang-github-pelletier-go-toml-dev deb devel optional arch=all
Checksums-Sha1:
 e3bfbdf674712704b8ecdd70c2e5e9dffaacbe38 82730 golang-github-pelletier-go-toml_1.6.0.orig.tar.gz
 b9339278d8e249c6c8212e434a63b4a9ef8c1d5f 4488 golang-github-pelletier-go-toml_1.6.0-1.debian.tar.xz
Checksums-Sha256:
 25913c50b634b554980c8e8134558684b001850c1ed720910edf6a9dbc06da45 82730 golang-github-pelletier-go-toml_1.6.0.orig.tar.gz
 987e0271278647a1466312f67be7e82eeba6c3016566c1534aad12e992fe115c 4488 golang-github-pelletier-go-toml_1.6.0-1.debian.tar.xz
Files:
 197e35b5c46d54ddbecc4eaf908bbe21 82730 golang-github-pelletier-go-toml_1.6.0.orig.tar.gz
 92a29aa2b7d3a78dc13ffbcb9074ce9b 4488 golang-github-pelletier-go-toml_1.6.0-1.debian.tar.xz
Go-Import-Path: github.com/pelletier/go-toml

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEFCQhsZrUqVmW+VBy6iUAtBLFms8FAl5PxscACgkQ6iUAtBLF
ms9OcxAAsywvaPei0ITNXt5Kyczw+oLTYGgTcUCdfIhgtRC4MM27MFoGP5BbPO6B
cMT9Vkml4bmnTi/799ffET6rprMSfWAAmth5ZXJ952ogDKpnBk9OEOAoRlL1NzFo
17vkWVsyJJDstPhBO19tyRr5okNiUrDKbYfublGqeA2B7jGu7osJOywzeSwQvefw
7E4EBi/glsIaScDQGK5WgBukBttRM+pMnOCZYCh2gdzIaiKXYzCbkMoTOXdzyx39
EMUInEDf1jypjqOp3y4pN6fIYNYTs4SZ6DSMdcFwScXZ8ZccxFqxnGT/kusG1jth
Yx9zDk4hPj8hEIEGg8UY/YbwxhaZC3E6hKAi6kpmACxktljhxEuyF52MWYxMXyWC
G1HTvnIjih7+WT2zuVFb/eKdVXP0y0LKlcizbmwwGdZIfcZSaP2LDFg4LgZjRJhY
RM4s401ircec11BSPnZFiRE7fN1PVSyA1T0HgvSxTWjKf4z5T88MMrCSJZYAdDUI
/F0b1LBgol9t8tbcwhoVE8Zr7a72EOcvlLCIC11IBGHXHpk9kRb54TOiEBjNn2kR
HQna0rljN3r6L9CEhaXGLkjA0616QuFnfmHVBum22iGeGxe5SbGADdq8EVUQgts1
WYSfzwZrASYNoaKLmhp4Tx62tc2cVSrPe/FmHBndzrb2C2+QSvc=
=jicr
-----END PGP SIGNATURE-----

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/sbuild-nonexistent/.gnupg/trustedkeys.kbx': General error
gpgv: Signature made Fri Feb 21 12:02:15 2020 UTC
gpgv:                using RSA key 142421B19AD4A95996F95072EA2500B412C59ACF
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./golang-github-pelletier-go-toml_1.6.0-1.dsc
dpkg-source: info: extracting golang-github-pelletier-go-toml in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking golang-github-pelletier-go-toml_1.6.0.orig.tar.gz
dpkg-source: info: unpacking golang-github-pelletier-go-toml_1.6.0-1.debian.tar.xz

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=C.UTF-8
LC_ALL=C.UTF-8
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable
SCHROOT_CHROOT_NAME=sid-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=sid-amd64-sbuild-0f1984d1-8172-4ea3-a671-a87c7ae6288a
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

Command: dpkg-buildpackage -us -uc -b -rfakeroot
dpkg-buildpackage: info: source package golang-github-pelletier-go-toml
dpkg-buildpackage: info: source version 1.6.0-1
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Anthony Fok <foka@debian.org>
 dpkg-source --before-build .
dpkg-buildpackage: info: host architecture amd64
 debian/rules clean
dh clean --buildsystem=golang --with=golang
   dh_auto_clean -O--buildsystem=golang
   dh_autoreconf_clean -O--buildsystem=golang
   dh_clean -O--buildsystem=golang
 debian/rules binary
dh binary --buildsystem=golang --with=golang
   dh_update_autotools_config -O--buildsystem=golang
   dh_autoreconf -O--buildsystem=golang
   dh_auto_configure -O--buildsystem=golang
   dh_auto_build -O--buildsystem=golang
	cd obj-x86_64-linux-gnu && go install -trimpath -v -p 4 github.com/pelletier/go-toml github.com/pelletier/go-toml/cmd/jsontoml github.com/pelletier/go-toml/cmd/tomljson github.com/pelletier/go-toml/cmd/tomll github.com/pelletier/go-toml/cmd/tomltestgen github.com/pelletier/go-toml/query
runtime/internal/sys
internal/race
runtime/internal/atomic
runtime/internal/math
sync/atomic
internal/cpu
unicode
unicode/utf8
math/bits
internal/bytealg
internal/testlog
encoding
math
unicode/utf16
container/list
crypto/internal/subtle
crypto/subtle
vendor/golang.org/x/crypto/cryptobyte/asn1
internal/nettrace
runtime
vendor/golang.org/x/crypto/internal/subtle
runtime/cgo
vendor/golang.org/x/crypto/curve25519
sync
internal/reflectlite
internal/singleflight
math/rand
sort
errors
io
strconv
internal/oserror
vendor/golang.org/x/net/dns/dnsmessage
syscall
bytes
reflect
strings
bufio
hash
hash/crc32
regexp/syntax
time
internal/syscall/unix
path
text/tabwriter
crypto
crypto/internal/randutil
crypto/hmac
crypto/rc4
regexp
internal/poll
context
vendor/golang.org/x/crypto/hkdf
os
vendor/golang.org/x/text/transform
encoding/binary
internal/fmtsort
crypto/cipher
crypto/sha512
encoding/base64
fmt
path/filepath
crypto/ed25519/internal/edwards25519
crypto/aes
io/ioutil
crypto/des
math/big
encoding/json
flag
compress/flate
go/token
go/scanner
archive/zip
go/ast
log
compress/gzip
crypto/md5
crypto/sha1
crypto/sha256
github.com/pelletier/go-toml
crypto/rand
go/parser
go/printer
crypto/elliptic
encoding/asn1
crypto/ed25519
go/format
crypto/rsa
crypto/dsa
encoding/hex
encoding/pem
crypto/ecdsa
crypto/x509/pkix
vendor/golang.org/x/crypto/cryptobyte
net
github.com/pelletier/go-toml/cmd/jsontoml
github.com/pelletier/go-toml/cmd/tomljson
github.com/pelletier/go-toml/cmd/tomll
net/url
vendor/golang.org/x/crypto/internal/chacha20
vendor/golang.org/x/crypto/poly1305
vendor/golang.org/x/sys/cpu
vendor/golang.org/x/text/unicode/bidi
vendor/golang.org/x/text/unicode/norm
vendor/golang.org/x/crypto/chacha20poly1305
vendor/golang.org/x/text/secure/bidirule
vendor/golang.org/x/net/http2/hpack
mime
mime/quotedprintable
net/http/internal
text/template/parse
github.com/pelletier/go-toml/query
vendor/golang.org/x/net/idna
text/template
vendor/golang.org/x/net/http/httpproxy
net/textproto
crypto/x509
mime/multipart
vendor/golang.org/x/net/http/httpguts
crypto/tls
net/http/httptrace
net/http
github.com/pelletier/go-toml/cmd/tomltestgen
   dh_auto_test -O--buildsystem=golang
	cd obj-x86_64-linux-gnu && go test -vet=off -v -p 4 github.com/pelletier/go-toml github.com/pelletier/go-toml/cmd/jsontoml github.com/pelletier/go-toml/cmd/tomljson github.com/pelletier/go-toml/cmd/tomll github.com/pelletier/go-toml/cmd/tomltestgen github.com/pelletier/go-toml/query
=== RUN   TestBareKeyBasic
--- PASS: TestBareKeyBasic (0.00s)
    keysparsing_test.go:10: key=test expected=[test] parsed=[test]
=== RUN   TestBareKeyDotted
--- PASS: TestBareKeyDotted (0.00s)
    keysparsing_test.go:10: key=this.is.a.key expected=[this is a key] parsed=[this is a key]
=== RUN   TestDottedKeyBasic
--- PASS: TestDottedKeyBasic (0.00s)
    keysparsing_test.go:10: key="a.dotted.key" expected=[a.dotted.key] parsed=[a.dotted.key]
=== RUN   TestBaseKeyPound
--- PASS: TestBaseKeyPound (0.00s)
=== RUN   TestUnclosedSingleQuotedKey
--- PASS: TestUnclosedSingleQuotedKey (0.00s)
=== RUN   TestUnclosedDoubleQuotedKey
--- PASS: TestUnclosedDoubleQuotedKey (0.00s)
=== RUN   TestInvalidStartKeyCharacter
--- PASS: TestInvalidStartKeyCharacter (0.00s)
=== RUN   TestInvalidSpaceInKey
--- PASS: TestInvalidSpaceInKey (0.00s)
=== RUN   TestQuotedKeys
--- PASS: TestQuotedKeys (0.00s)
    keysparsing_test.go:10: key=hello."foo".bar expected=[hello foo bar] parsed=[hello foo bar]
    keysparsing_test.go:10: key="hello!" expected=[hello!] parsed=[hello!]
    keysparsing_test.go:10: key=foo."ba.r".baz expected=[foo ba.r baz] parsed=[foo ba.r baz]
    keysparsing_test.go:10: key="hello\tworld" expected=[hello\tworld] parsed=[hello\tworld]
=== RUN   TestEmptyKey
--- PASS: TestEmptyKey (0.00s)
    keysparsing_test.go:10: key="" expected=[] parsed=[]
=== RUN   TestValidKeyGroup
--- PASS: TestValidKeyGroup (0.00s)
=== RUN   TestNestedQuotedUnicodeKeyGroup
--- PASS: TestNestedQuotedUnicodeKeyGroup (0.00s)
=== RUN   TestUnclosedKeyGroup
--- PASS: TestUnclosedKeyGroup (0.00s)
=== RUN   TestComment
--- PASS: TestComment (0.00s)
=== RUN   TestKeyGroupComment
--- PASS: TestKeyGroupComment (0.00s)
=== RUN   TestMultipleKeyGroupsComment
--- PASS: TestMultipleKeyGroupsComment (0.00s)
=== RUN   TestSimpleWindowsCRLF
--- PASS: TestSimpleWindowsCRLF (0.00s)
=== RUN   TestBasicKey
--- PASS: TestBasicKey (0.00s)
=== RUN   TestBasicKeyWithUnderscore
--- PASS: TestBasicKeyWithUnderscore (0.00s)
=== RUN   TestBasicKeyWithDash
--- PASS: TestBasicKeyWithDash (0.00s)
=== RUN   TestBasicKeyWithUppercaseMix
--- PASS: TestBasicKeyWithUppercaseMix (0.00s)
=== RUN   TestBasicKeyWithInternationalCharacters
--- PASS: TestBasicKeyWithInternationalCharacters (0.00s)
=== RUN   TestBasicKeyAndEqual
--- PASS: TestBasicKeyAndEqual (0.00s)
=== RUN   TestKeyWithSharpAndEqual
--- PASS: TestKeyWithSharpAndEqual (0.00s)
=== RUN   TestKeyWithSymbolsAndEqual
--- PASS: TestKeyWithSymbolsAndEqual (0.00s)
=== RUN   TestKeyEqualStringEscape
--- PASS: TestKeyEqualStringEscape (0.00s)
=== RUN   TestKeyEqualStringUnfinished
--- PASS: TestKeyEqualStringUnfinished (0.00s)
=== RUN   TestKeyEqualString
--- PASS: TestKeyEqualString (0.00s)
=== RUN   TestKeyEqualTrue
--- PASS: TestKeyEqualTrue (0.00s)
=== RUN   TestKeyEqualFalse
--- PASS: TestKeyEqualFalse (0.00s)
=== RUN   TestArrayNestedString
--- PASS: TestArrayNestedString (0.00s)
=== RUN   TestArrayNestedInts
--- PASS: TestArrayNestedInts (0.00s)
=== RUN   TestArrayInts
--- PASS: TestArrayInts (0.00s)
=== RUN   TestMultilineArrayComments
--- PASS: TestMultilineArrayComments (0.00s)
=== RUN   TestNestedArraysComment
--- PASS: TestNestedArraysComment (0.00s)
=== RUN   TestKeyEqualArrayBools
--- PASS: TestKeyEqualArrayBools (0.00s)
=== RUN   TestKeyEqualArrayBoolsWithComments
--- PASS: TestKeyEqualArrayBoolsWithComments (0.00s)
=== RUN   TestDateRegexp
--- PASS: TestDateRegexp (0.00s)
=== RUN   TestKeyEqualDate
--- PASS: TestKeyEqualDate (0.00s)
=== RUN   TestFloatEndingWithDot
--- PASS: TestFloatEndingWithDot (0.00s)
=== RUN   TestFloatWithTwoDots
--- PASS: TestFloatWithTwoDots (0.00s)
=== RUN   TestFloatWithExponent1
--- PASS: TestFloatWithExponent1 (0.00s)
=== RUN   TestFloatWithExponent2
--- PASS: TestFloatWithExponent2 (0.00s)
=== RUN   TestFloatWithExponent3
--- PASS: TestFloatWithExponent3 (0.00s)
=== RUN   TestFloatWithExponent4
--- PASS: TestFloatWithExponent4 (0.00s)
=== RUN   TestFloatWithExponent5
--- PASS: TestFloatWithExponent5 (0.00s)
=== RUN   TestInvalidEsquapeSequence
--- PASS: TestInvalidEsquapeSequence (0.00s)
=== RUN   TestNestedArrays
--- PASS: TestNestedArrays (0.00s)
=== RUN   TestKeyEqualNumber
--- PASS: TestKeyEqualNumber (0.00s)
=== RUN   TestMultiline
--- PASS: TestMultiline (0.00s)
=== RUN   TestKeyEqualStringUnicodeEscape
--- PASS: TestKeyEqualStringUnicodeEscape (0.00s)
=== RUN   TestKeyEqualStringNoEscape
--- PASS: TestKeyEqualStringNoEscape (0.00s)
=== RUN   TestLiteralString
--- PASS: TestLiteralString (0.00s)
=== RUN   TestMultilineLiteralString
--- PASS: TestMultilineLiteralString (0.00s)
=== RUN   TestMultilineString
--- PASS: TestMultilineString (0.00s)
=== RUN   TestUnicodeString
--- PASS: TestUnicodeString (0.00s)
=== RUN   TestEscapeInString
--- PASS: TestEscapeInString (0.00s)
=== RUN   TestKeyGroupArray
--- PASS: TestKeyGroupArray (0.00s)
=== RUN   TestQuotedKey
--- PASS: TestQuotedKey (0.00s)
=== RUN   TestKeyNewline
--- PASS: TestKeyNewline (0.00s)
=== RUN   TestInvalidFloat
--- PASS: TestInvalidFloat (0.00s)
=== RUN   TestLexUnknownRvalue
--- PASS: TestLexUnknownRvalue (0.00s)
=== RUN   TestLexInlineTableBareKey
--- PASS: TestLexInlineTableBareKey (0.00s)
=== RUN   TestLexInlineTableBareKeyDash
--- PASS: TestLexInlineTableBareKeyDash (0.00s)
=== RUN   TestLexInlineTableBareKeyUnderscore
--- PASS: TestLexInlineTableBareKeyUnderscore (0.00s)
=== RUN   TestLexInlineTableQuotedKey
--- PASS: TestLexInlineTableQuotedKey (0.00s)
=== RUN   TestDates
--- PASS: TestDates (0.00s)
=== RUN   TestDateIsValid
--- PASS: TestDateIsValid (0.00s)
=== RUN   TestParseDate
--- PASS: TestParseDate (0.00s)
=== RUN   TestDateArithmetic
--- PASS: TestDateArithmetic (0.00s)
=== RUN   TestDateBefore
--- PASS: TestDateBefore (0.00s)
=== RUN   TestDateAfter
--- PASS: TestDateAfter (0.00s)
=== RUN   TestTimeToString
--- PASS: TestTimeToString (0.00s)
=== RUN   TestTimeOf
--- PASS: TestTimeOf (0.00s)
=== RUN   TestTimeIsValid
--- PASS: TestTimeIsValid (0.00s)
=== RUN   TestDateTimeToString
--- PASS: TestDateTimeToString (0.00s)
=== RUN   TestParseDateTimeErrors
--- PASS: TestParseDateTimeErrors (0.00s)
=== RUN   TestDateTimeOf
--- PASS: TestDateTimeOf (0.00s)
=== RUN   TestDateTimeIsValid
--- PASS: TestDateTimeIsValid (0.00s)
=== RUN   TestDateTimeIn
--- PASS: TestDateTimeIn (0.00s)
=== RUN   TestDateTimeBefore
--- PASS: TestDateTimeBefore (0.00s)
=== RUN   TestDateTimeAfter
--- PASS: TestDateTimeAfter (0.00s)
=== RUN   TestMarshalJSON
--- PASS: TestMarshalJSON (0.00s)
=== RUN   TestUnmarshalJSON
--- PASS: TestUnmarshalJSON (0.00s)
=== RUN   TestBasicMarshal
--- PASS: TestBasicMarshal (0.00s)
=== RUN   TestBasicMarshalOrdered
--- PASS: TestBasicMarshalOrdered (0.00s)
=== RUN   TestBasicMarshalWithPointer
--- PASS: TestBasicMarshalWithPointer (0.00s)
=== RUN   TestBasicMarshalOrderedWithPointer
--- PASS: TestBasicMarshalOrderedWithPointer (0.00s)
=== RUN   TestBasicUnmarshal
--- PASS: TestBasicUnmarshal (0.00s)
=== RUN   TestDocMarshal
--- PASS: TestDocMarshal (0.00s)
=== RUN   TestDocMarshalOrdered
--- PASS: TestDocMarshalOrdered (0.00s)
=== RUN   TestDocMarshalMaps
--- PASS: TestDocMarshalMaps (0.00s)
=== RUN   TestDocMarshalOrderedMaps
--- PASS: TestDocMarshalOrderedMaps (0.00s)
=== RUN   TestDocMarshalPointer
--- PASS: TestDocMarshalPointer (0.00s)
=== RUN   TestDocUnmarshal
--- PASS: TestDocUnmarshal (0.00s)
=== RUN   TestDocPartialUnmarshal
--- PASS: TestDocPartialUnmarshal (0.00s)
=== RUN   TestTypeChecks
--- PASS: TestTypeChecks (0.00s)
=== RUN   TestUnexportedUnmarshal
--- PASS: TestUnexportedUnmarshal (0.00s)
=== RUN   TestErrUnmarshal
--- PASS: TestErrUnmarshal (0.00s)
=== RUN   TestEmptyMarshal
--- PASS: TestEmptyMarshal (0.00s)
=== RUN   TestEmptyMarshalOmit
--- PASS: TestEmptyMarshalOmit (0.00s)
=== RUN   TestEmptyUnmarshal
--- PASS: TestEmptyUnmarshal (0.00s)
=== RUN   TestEmptyUnmarshalOmit
--- PASS: TestEmptyUnmarshalOmit (0.00s)
=== RUN   TestPointerMarshal
--- PASS: TestPointerMarshal (0.00s)
=== RUN   TestPointerUnmarshal
--- PASS: TestPointerUnmarshal (0.00s)
=== RUN   TestUnmarshalTypeMismatch
--- PASS: TestUnmarshalTypeMismatch (0.00s)
=== RUN   TestNestedMarshal
--- PASS: TestNestedMarshal (0.02s)
=== RUN   TestNestedUnmarshal
--- PASS: TestNestedUnmarshal (0.00s)
=== RUN   TestCustomMarshaler
--- PASS: TestCustomMarshaler (0.00s)
=== RUN   TestNestedCustomMarshaler
--- PASS: TestNestedCustomMarshaler (0.00s)
=== RUN   TestMarshalComment
--- PASS: TestMarshalComment (0.00s)
=== RUN   TestEncodeQuotedMapKeys
--- PASS: TestEncodeQuotedMapKeys (0.00s)
=== RUN   TestDecodeQuotedMapKeys
--- PASS: TestDecodeQuotedMapKeys (0.00s)
=== RUN   TestMarshalArray
--- PASS: TestMarshalArray (0.00s)
=== RUN   TestMarshalArrayOnePerLine
--- PASS: TestMarshalArrayOnePerLine (0.00s)
=== RUN   TestMarshalCustomTag
--- PASS: TestMarshalCustomTag (0.00s)
=== RUN   TestMarshalCustomComment
--- PASS: TestMarshalCustomComment (0.00s)
=== RUN   TestMarshalCustomCommented
--- PASS: TestMarshalCustomCommented (0.00s)
=== RUN   TestMarshalDirectMultilineString
--- PASS: TestMarshalDirectMultilineString (0.00s)
=== RUN   TestMarshalCustomMultiline
--- PASS: TestMarshalCustomMultiline (0.00s)
=== RUN   TestUnmarshalCustomTag
--- PASS: TestUnmarshalCustomTag (0.00s)
=== RUN   TestUnmarshalMap
--- PASS: TestUnmarshalMap (0.00s)
=== RUN   TestUnmarshalMapWithTypedKey
--- PASS: TestUnmarshalMapWithTypedKey (0.00s)
=== RUN   TestUnmarshalNonPointer
--- PASS: TestUnmarshalNonPointer (0.00s)
=== RUN   TestUnmarshalInvalidPointerKind
--- PASS: TestUnmarshalInvalidPointerKind (0.00s)
=== RUN   TestMarshalSlice
--- PASS: TestMarshalSlice (0.00s)
=== RUN   TestMarshalSlicePointer
--- PASS: TestMarshalSlicePointer (0.00s)
=== RUN   TestUnmarshalDuration
--- PASS: TestUnmarshalDuration (0.00s)
=== RUN   TestMarshalDuration
--- PASS: TestMarshalDuration (0.00s)
=== RUN   TestUnmarshalBadDuration
--- PASS: TestUnmarshalBadDuration (0.00s)
=== RUN   TestUnmarshalCamelCaseKey
--- PASS: TestUnmarshalCamelCaseKey (0.00s)
=== RUN   TestUnmarshalDefault
--- PASS: TestUnmarshalDefault (0.00s)
=== RUN   TestUnmarshalDefaultFailureBool
--- PASS: TestUnmarshalDefaultFailureBool (0.00s)
=== RUN   TestUnmarshalDefaultFailureInt
--- PASS: TestUnmarshalDefaultFailureInt (0.00s)
=== RUN   TestUnmarshalDefaultFailureInt64
--- PASS: TestUnmarshalDefaultFailureInt64 (0.00s)
=== RUN   TestUnmarshalDefaultFailureFloat64
--- PASS: TestUnmarshalDefaultFailureFloat64 (0.00s)
=== RUN   TestUnmarshalDefaultFailureUnsupported
--- PASS: TestUnmarshalDefaultFailureUnsupported (0.00s)
=== RUN   TestUnmarshalNestedAnonymousStructs
--- PASS: TestUnmarshalNestedAnonymousStructs (0.00s)
=== RUN   TestUnmarshalNestedAnonymousStructs_Controversial
--- PASS: TestUnmarshalNestedAnonymousStructs_Controversial (0.00s)
=== RUN   TestUnmarshalPreservesUnexportedFields
=== RUN   TestUnmarshalPreservesUnexportedFields/unexported_field_should_not_be_set_from_toml
=== RUN   TestUnmarshalPreservesUnexportedFields/unexported_field_should_be_preserved
--- PASS: TestUnmarshalPreservesUnexportedFields (0.00s)
    --- PASS: TestUnmarshalPreservesUnexportedFields/unexported_field_should_not_be_set_from_toml (0.00s)
    --- PASS: TestUnmarshalPreservesUnexportedFields/unexported_field_should_be_preserved (0.00s)
=== RUN   TestTreeMarshal
=== RUN   TestTreeMarshal/#00
=== RUN   TestTreeMarshal/#01
=== RUN   TestTreeMarshal/#02
=== RUN   TestTreeMarshal/#03
--- PASS: TestTreeMarshal (0.00s)
    --- PASS: TestTreeMarshal/#00 (0.00s)
    --- PASS: TestTreeMarshal/#01 (0.00s)
    --- PASS: TestTreeMarshal/#02 (0.00s)
    --- PASS: TestTreeMarshal/#03 (0.00s)
=== RUN   TestMarshalArrays
=== RUN   TestMarshalArrays/#00
=== RUN   TestMarshalArrays/#01
=== RUN   TestMarshalArrays/#02
=== RUN   TestMarshalArrays/#03
--- PASS: TestMarshalArrays (0.00s)
    --- PASS: TestMarshalArrays/#00 (0.00s)
    --- PASS: TestMarshalArrays/#01 (0.00s)
    --- PASS: TestMarshalArrays/#02 (0.00s)
    --- PASS: TestMarshalArrays/#03 (0.00s)
=== RUN   TestUnmarshalLocalDate
=== RUN   TestUnmarshalLocalDate/ToLocalDate
=== RUN   TestUnmarshalLocalDate/ToLocalDate#01
--- PASS: TestUnmarshalLocalDate (0.00s)
    --- PASS: TestUnmarshalLocalDate/ToLocalDate (0.00s)
    --- PASS: TestUnmarshalLocalDate/ToLocalDate#01 (0.00s)
=== RUN   TestMarshalLocalDate
--- PASS: TestMarshalLocalDate (0.00s)
=== RUN   TestUnmarshalLocalDateTime
=== RUN   TestUnmarshalLocalDateTime/ToLocalDateTime_0_normal
=== RUN   TestUnmarshalLocalDateTime/ToTime_0_normal
=== RUN   TestUnmarshalLocalDateTime/ToLocalDateTime_1_with_nanoseconds
=== RUN   TestUnmarshalLocalDateTime/ToTime_1_with_nanoseconds
--- PASS: TestUnmarshalLocalDateTime (0.00s)
    --- PASS: TestUnmarshalLocalDateTime/ToLocalDateTime_0_normal (0.00s)
    --- PASS: TestUnmarshalLocalDateTime/ToTime_0_normal (0.00s)
    --- PASS: TestUnmarshalLocalDateTime/ToLocalDateTime_1_with_nanoseconds (0.00s)
    --- PASS: TestUnmarshalLocalDateTime/ToTime_1_with_nanoseconds (0.00s)
=== RUN   TestMarshalLocalDateTime
=== RUN   TestMarshalLocalDateTime/0_normal
=== RUN   TestMarshalLocalDateTime/1_with_nanoseconds
--- PASS: TestMarshalLocalDateTime (0.00s)
    --- PASS: TestMarshalLocalDateTime/0_normal (0.00s)
    --- PASS: TestMarshalLocalDateTime/1_with_nanoseconds (0.00s)
=== RUN   TestUnmarshalLocalTime
=== RUN   TestUnmarshalLocalTime/ToLocalTime_0_normal
=== RUN   TestUnmarshalLocalTime/ToLocalTime_1_with_nanoseconds
--- PASS: TestUnmarshalLocalTime (0.00s)
    --- PASS: TestUnmarshalLocalTime/ToLocalTime_0_normal (0.00s)
    --- PASS: TestUnmarshalLocalTime/ToLocalTime_1_with_nanoseconds (0.00s)
=== RUN   TestMarshalLocalTime
=== RUN   TestMarshalLocalTime/0_normal
=== RUN   TestMarshalLocalTime/1_with_nanoseconds
--- PASS: TestMarshalLocalTime (0.00s)
    --- PASS: TestMarshalLocalTime/0_normal (0.00s)
    --- PASS: TestMarshalLocalTime/1_with_nanoseconds (0.00s)
=== RUN   TestCreateSubTree
--- PASS: TestCreateSubTree (0.00s)
=== RUN   TestSimpleKV
--- PASS: TestSimpleKV (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000337d70)(a = 42
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000337ec0)(a = 42
        b = 21
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:20: asserting path [b]
    parser_test.go:33: 	comparing key [b] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestNumberInKey
--- PASS: TestNumberInKey (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037a060)(hello2 = 42
        )
        
    parser_test.go:20: asserting path [hello2]
    parser_test.go:33: 	comparing key [hello2] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestIncorrectKeyExtraSquareBracket
--- PASS: TestIncorrectKeyExtraSquareBracket (0.00s)
=== RUN   TestSimpleNumbers
--- PASS: TestSimpleNumbers (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037a330)(a = 42
        b = -21
        c = 4.2
        d = -2.1
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:20: asserting path [b]
    parser_test.go:33: 	comparing key [b] by string representation because it's of type int64
    parser_test.go:20: asserting path [c]
    parser_test.go:33: 	comparing key [c] by string representation because it's of type float64
    parser_test.go:20: asserting path [d]
    parser_test.go:33: 	comparing key [d] by string representation because it's of type float64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestSpecialFloats
--- PASS: TestSpecialFloats (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037a540)(minusinf = -inf
        minusnan = nan
        normalinf = +inf
        normalnan = nan
        plusinf = +inf
        plusnan = nan
        )
        
    parser_test.go:20: asserting path [plusnan]
    parser_test.go:33: 	comparing key [plusnan] by string representation because it's of type float64
    parser_test.go:20: asserting path [minusnan]
    parser_test.go:33: 	comparing key [minusnan] by string representation because it's of type float64
    parser_test.go:20: asserting path [normalinf]
    parser_test.go:33: 	comparing key [normalinf] by string representation because it's of type float64
    parser_test.go:20: asserting path [plusinf]
    parser_test.go:33: 	comparing key [plusinf] by string representation because it's of type float64
    parser_test.go:20: asserting path [minusinf]
    parser_test.go:33: 	comparing key [minusinf] by string representation because it's of type float64
    parser_test.go:20: asserting path [normalnan]
    parser_test.go:33: 	comparing key [normalnan] by string representation because it's of type float64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestHexIntegers
--- PASS: TestHexIntegers (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037a6c0)(a = 3735928559
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037a7e0)(a = 3735928559
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037a900)(a = 3735928559
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestOctIntegers
--- PASS: TestOctIntegers (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037aae0)(a = 342391
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037ac00)(a = 493
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestBinIntegers
--- PASS: TestBinIntegers (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037ade0)(a = 214
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestBadIntegerBase
--- PASS: TestBadIntegerBase (0.00s)
=== RUN   TestIntegerNoDigit
--- PASS: TestIntegerNoDigit (0.00s)
=== RUN   TestNumbersWithUnderscores
--- PASS: TestNumbersWithUnderscores (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b140)(a = 1000
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b260)(a = 5349221
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b380)(a = 12345
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b4a0)(flt8 = 9224617.445991227
        )
        
    parser_test.go:20: asserting path [flt8]
    parser_test.go:33: 	comparing key [flt8] by string representation because it's of type float64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b5c0)(flt9 = 10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.0
        )
        
    parser_test.go:20: asserting path [flt9]
    parser_test.go:33: 	comparing key [flt9] by string representation because it's of type float64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestFloatsWithExponents
--- PASS: TestFloatsWithExponents (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b7d0)(a = 49999999999999995805696.0
        b = 49999999999999995805696.0
        c = -49999999999999995805696.0
        d = -0.0000000000000000000005
        e = 0.0000000000000000000000000000000006626
        )
        
    parser_test.go:20: asserting path [c]
    parser_test.go:33: 	comparing key [c] by string representation because it's of type float64
    parser_test.go:20: asserting path [d]
    parser_test.go:33: 	comparing key [d] by string representation because it's of type float64
    parser_test.go:20: asserting path [e]
    parser_test.go:33: 	comparing key [e] by string representation because it's of type float64
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type float64
    parser_test.go:20: asserting path [b]
    parser_test.go:33: 	comparing key [b] by string representation because it's of type float64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestSimpleDate
--- PASS: TestSimpleDate (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037b950)(a = 1979-05-27T07:32:00Z
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type time.Time
    parser_test.go:44: Finished tree assertion.
=== RUN   TestDateOffset
--- PASS: TestDateOffset (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037baa0)(a = 1979-05-27T00:32:00-07:00
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type time.Time
    parser_test.go:44: Finished tree assertion.
=== RUN   TestDateNano
--- PASS: TestDateNano (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037bbf0)(a = 1979-05-27T00:32:00-07:00
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type time.Time
    parser_test.go:44: Finished tree assertion.
=== RUN   TestLocalDateTime
--- PASS: TestLocalDateTime (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037bd40)(a = 1979-05-27T07:32:00
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type toml.LocalDateTime
    parser_test.go:44: Finished tree assertion.
=== RUN   TestLocalDateTimeNano
--- PASS: TestLocalDateTimeNano (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00037be90)(a = 1979-05-27T07:32:00.999999000
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type toml.LocalDateTime
    parser_test.go:44: Finished tree assertion.
=== RUN   TestLocalDate
--- PASS: TestLocalDate (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2000)(a = 1979-05-27
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type toml.LocalDate
    parser_test.go:44: Finished tree assertion.
=== RUN   TestLocalTime
--- PASS: TestLocalTime (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2150)(a = 07:32:00
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type toml.LocalTime
    parser_test.go:44: Finished tree assertion.
=== RUN   TestLocalTimeNano
--- PASS: TestLocalTimeNano (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f22a0)(a = 00:32:00.999999000
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type toml.LocalTime
    parser_test.go:44: Finished tree assertion.
=== RUN   TestSimpleString
--- PASS: TestSimpleString (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f23c0)(a = "hello world"
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestSpaceKey
--- PASS: TestSpaceKey (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f24e0)("a b" = "hello world"
        )
        
    parser_test.go:20: asserting path [a b]
    parser_test.go:33: 	comparing key [a b] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestDoubleQuotedKey
--- PASS: TestDoubleQuotedKey (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2600)("\t" = "b"
        key = "a"
        "❤" = "d"
        "🤔" = "c"
        )
        
    parser_test.go:20: asserting path [key]
    parser_test.go:33: 	comparing key [key] by string representation because it's of type string
    parser_test.go:20: asserting path [	]
    parser_test.go:33: 	comparing key [	] by string representation because it's of type string
    parser_test.go:20: asserting path [🤔]
    parser_test.go:33: 	comparing key [🤔] by string representation because it's of type string
    parser_test.go:20: asserting path [❤]
    parser_test.go:33: 	comparing key [❤] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestSingleQuotedKey
--- PASS: TestSingleQuotedKey (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2750)("\\U0001F914" = "c"
        "\\t" = "b"
        "\\u2764" = "d"
        key = "a"
        )
        
    parser_test.go:20: asserting path [key]
    parser_test.go:33: 	comparing key [key] by string representation because it's of type string
    parser_test.go:20: asserting path [\t]
    parser_test.go:33: 	comparing key [\t] by string representation because it's of type string
    parser_test.go:20: asserting path [\U0001F914]
    parser_test.go:33: 	comparing key [\U0001F914] by string representation because it's of type string
    parser_test.go:20: asserting path [\u2764]
    parser_test.go:33: 	comparing key [\u2764] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestStringEscapables
--- PASS: TestStringEscapables (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f28a0)(a = "a \n b"
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2990)(a = "a \t b"
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2a80)(a = "a \r b"
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2b70)(a = "a \\ b"
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestEmptyQuotedString
--- PASS: TestEmptyQuotedString (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2cc0)(
        []
           = 1
        )
        
    parser_test.go:20: asserting path []
    parser_test.go:30: 	comparing key [] by subtree assestion
    parser_test.go:20: asserting path [ ]
    parser_test.go:33: 	comparing key [ ] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestBools
--- PASS: TestBools (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2e70)(a = true
        b = false
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type bool
    parser_test.go:20: asserting path [b]
    parser_test.go:33: 	comparing key [b] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
=== RUN   TestNestedKeys
--- PASS: TestNestedKeys (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2ff0)(
        [a]
        
          [a.b]
        
            [a.b.c]
              d = 42
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:30: 	comparing key [a] by subtree assestion
    parser_test.go:20: asserting path [a b]
    parser_test.go:30: 	comparing key [a b] by subtree assestion
    parser_test.go:20: asserting path [a b c]
    parser_test.go:30: 	comparing key [a b c] by subtree assestion
    parser_test.go:20: asserting path [a b c d]
    parser_test.go:33: 	comparing key [a b c d] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestNestedQuotedUnicodeKeys
--- PASS: TestNestedQuotedUnicodeKeys (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f32f0)(
        [j]
        
          [j.ʞ]
        
            [j.ʞ.l]
              d = 42
        )
        
    parser_test.go:20: asserting path [j]
    parser_test.go:30: 	comparing key [j] by subtree assestion
    parser_test.go:20: asserting path [j ʞ]
    parser_test.go:30: 	comparing key [j ʞ] by subtree assestion
    parser_test.go:20: asserting path [j ʞ l]
    parser_test.go:30: 	comparing key [j ʞ l] by subtree assestion
    parser_test.go:20: asserting path [j ʞ l d]
    parser_test.go:33: 	comparing key [j ʞ l d] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f35c0)(
        [g]
        
          [g.h]
        
            [g.h.i]
              d = 42
        )
        
    parser_test.go:20: asserting path [g]
    parser_test.go:30: 	comparing key [g] by subtree assestion
    parser_test.go:20: asserting path [g h]
    parser_test.go:30: 	comparing key [g h] by subtree assestion
    parser_test.go:20: asserting path [g h i]
    parser_test.go:30: 	comparing key [g h i] by subtree assestion
    parser_test.go:20: asserting path [g h i d]
    parser_test.go:33: 	comparing key [g h i d] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f3890)(
        [d]
        
          [d.e]
        
            [d.e.f]
              k = 42
        )
        
    parser_test.go:20: asserting path [d]
    parser_test.go:30: 	comparing key [d] by subtree assestion
    parser_test.go:20: asserting path [d e]
    parser_test.go:30: 	comparing key [d e] by subtree assestion
    parser_test.go:20: asserting path [d e f]
    parser_test.go:30: 	comparing key [d e f] by subtree assestion
    parser_test.go:20: asserting path [d e f k]
    parser_test.go:33: 	comparing key [d e f k] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayOne
--- PASS: TestArrayOne (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f3b90)(a = [1]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayZero
--- PASS: TestArrayZero (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f3cb0)(a = []
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArraySimple
--- PASS: TestArraySimple (0.01s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f3e60)(a = [42,21,10]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480000)(a = [42,21,10]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayMultiline
--- PASS: TestArrayMultiline (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480180)(a = [42,21,10]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayNested
--- PASS: TestArrayNested (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480330)(a = [[42,21],[10]]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestNestedArrayComment
--- PASS: TestNestedArrayComment (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480480)(someArray = [["entry1"]]
        )
        
    parser_test.go:20: asserting path [someArray]
    parser_test.go:33: 	comparing key [someArray] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestNestedEmptyArrays
--- PASS: TestNestedEmptyArrays (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004805a0)(a = [[[]]]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayMixedTypes
--- PASS: TestArrayMixedTypes (0.00s)
=== RUN   TestArrayNestedStrings
--- PASS: TestArrayNestedStrings (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480840)(data = [["gamma","delta"],["Foo"]]
        )
        
    parser_test.go:20: asserting path [data]
    parser_test.go:33: 	comparing key [data] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestParseUnknownRvalue
--- PASS: TestParseUnknownRvalue (0.00s)
=== RUN   TestMissingValue
--- PASS: TestMissingValue (0.00s)
=== RUN   TestUnterminatedArray
--- PASS: TestUnterminatedArray (0.00s)
=== RUN   TestNewlinesInArrays
--- PASS: TestNewlinesInArrays (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480e10)(a = [1,2,3]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayWithExtraComma
--- PASS: TestArrayWithExtraComma (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000480fc0)(a = [1,2,3]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestArrayWithExtraCommaComment
--- PASS: TestArrayWithExtraCommaComment (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000481170)(a = [1,2,3]
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:33: 	comparing key [a] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestSimpleInlineGroup
--- PASS: TestSimpleInlineGroup (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004812c0)(
        [key]
          a = 42
        )
        
    parser_test.go:20: asserting path [key]
    parser_test.go:30: 	comparing key [key] by subtree assestion
    parser_test.go:20: asserting path [key a]
    parser_test.go:33: 	comparing key [key a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestDoubleInlineGroup
--- PASS: TestDoubleInlineGroup (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004814d0)(
        [key]
          a = 42
          b = "foo"
        )
        
    parser_test.go:20: asserting path [key]
    parser_test.go:30: 	comparing key [key] by subtree assestion
    parser_test.go:20: asserting path [key a]
    parser_test.go:33: 	comparing key [key a] by string representation because it's of type int64
    parser_test.go:20: asserting path [key b]
    parser_test.go:33: 	comparing key [key b] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestExampleInlineGroup
--- PASS: TestExampleInlineGroup (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000481770)(
        [name]
          first = "Tom"
          last = "Preston-Werner"
        
        [point]
          x = 1
          y = 2
        )
        
    parser_test.go:20: asserting path [name]
    parser_test.go:30: 	comparing key [name] by subtree assestion
    parser_test.go:20: asserting path [name first]
    parser_test.go:33: 	comparing key [name first] by string representation because it's of type string
    parser_test.go:20: asserting path [name last]
    parser_test.go:33: 	comparing key [name last] by string representation because it's of type string
    parser_test.go:20: asserting path [point]
    parser_test.go:30: 	comparing key [point] by subtree assestion
    parser_test.go:20: asserting path [point x]
    parser_test.go:33: 	comparing key [point x] by string representation because it's of type int64
    parser_test.go:20: asserting path [point y]
    parser_test.go:33: 	comparing key [point y] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestInlineGroupBareKeysUnderscore
--- PASS: TestInlineGroupBareKeysUnderscore (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000481a40)(
        [foo]
          _bar = "buz"
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:30: 	comparing key [foo] by subtree assestion
    parser_test.go:20: asserting path [foo _bar]
    parser_test.go:33: 	comparing key [foo _bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestInlineGroupBareKeysDash
--- PASS: TestInlineGroupBareKeysDash (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000481bf0)(
        [foo]
          -bar = "buz"
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:30: 	comparing key [foo] by subtree assestion
    parser_test.go:20: asserting path [foo -bar]
    parser_test.go:33: 	comparing key [foo -bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestInlineGroupKeyQuoted
--- PASS: TestInlineGroupKeyQuoted (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000481da0)(
        [foo]
          bar = "buz"
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:30: 	comparing key [foo] by subtree assestion
    parser_test.go:20: asserting path [foo bar]
    parser_test.go:33: 	comparing key [foo bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestExampleInlineGroupInArray
--- PASS: TestExampleInlineGroupInArray (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2030)(
        [[points]]
          x = 1
          y = 2
        )
        
    parser_test.go:20: asserting path [points]
    parser_test.go:25: 	comparing key [points] by array iteration
    parser_test.go:20: asserting path [points x]
    parser_test.go:33: 	comparing key [points x] by string representation because it's of type int64
    parser_test.go:20: asserting path [points y]
    parser_test.go:33: 	comparing key [points y] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestInlineTableUnterminated
--- PASS: TestInlineTableUnterminated (0.00s)
=== RUN   TestInlineTableCommaExpected
--- PASS: TestInlineTableCommaExpected (0.00s)
=== RUN   TestInlineTableCommaStart
--- PASS: TestInlineTableCommaStart (0.00s)
=== RUN   TestInlineTableDoubleComma
--- PASS: TestInlineTableDoubleComma (0.00s)
=== RUN   TestDuplicateGroups
--- PASS: TestDuplicateGroups (0.00s)
=== RUN   TestDuplicateKeys
--- PASS: TestDuplicateKeys (0.00s)
=== RUN   TestEmptyIntermediateTable
--- PASS: TestEmptyIntermediateTable (0.00s)
=== RUN   TestImplicitDeclarationBefore
--- PASS: TestImplicitDeclarationBefore (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2a20)(
        [a]
          better = 43
        
          [a.b]
        
            [a.b.c]
              answer = 42
        )
        
    parser_test.go:20: asserting path [a]
    parser_test.go:30: 	comparing key [a] by subtree assestion
    parser_test.go:20: asserting path [a b]
    parser_test.go:30: 	comparing key [a b] by subtree assestion
    parser_test.go:20: asserting path [a b c]
    parser_test.go:30: 	comparing key [a b c] by subtree assestion
    parser_test.go:20: asserting path [a b c answer]
    parser_test.go:33: 	comparing key [a b c answer] by string representation because it's of type int64
    parser_test.go:20: asserting path [a better]
    parser_test.go:33: 	comparing key [a better] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestFloatsWithoutLeadingZeros
--- PASS: TestFloatsWithoutLeadingZeros (0.00s)
=== RUN   TestMissingFile
--- PASS: TestMissingFile (0.00s)
=== RUN   TestParseFile
--- PASS: TestParseFile (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f2ff0)(title = "TOML Example"
        
        [clients]
          data = [["gamma","delta"],[1,2]]
        
        [database]
          connection_max = 5000
          enabled = true
          ports = [8001,8001,8002]
          server = "192.168.1.1"
        
        [owner]
          bio = "GitHub Cofounder & CEO\nLikes tater tots and beer."
          dob = 1979-05-27T07:32:00Z
          name = "Tom Preston-Werner"
          organization = "GitHub"
        
        [servers]
        
          [servers.alpha]
            dc = "eqdc10"
            ip = "10.0.0.1"
        
          [servers.beta]
            dc = "eqdc10"
            ip = "10.0.0.2"
        )
        
    parser_test.go:20: asserting path [clients]
    parser_test.go:30: 	comparing key [clients] by subtree assestion
    parser_test.go:20: asserting path [clients data]
    parser_test.go:33: 	comparing key [clients data] by string representation because it's of type []interface {}
    parser_test.go:20: asserting path [title]
    parser_test.go:33: 	comparing key [title] by string representation because it's of type string
    parser_test.go:20: asserting path [owner]
    parser_test.go:30: 	comparing key [owner] by subtree assestion
    parser_test.go:20: asserting path [owner dob]
    parser_test.go:33: 	comparing key [owner dob] by string representation because it's of type time.Time
    parser_test.go:20: asserting path [owner name]
    parser_test.go:33: 	comparing key [owner name] by string representation because it's of type string
    parser_test.go:20: asserting path [owner organization]
    parser_test.go:33: 	comparing key [owner organization] by string representation because it's of type string
    parser_test.go:20: asserting path [owner bio]
    parser_test.go:33: 	comparing key [owner bio] by string representation because it's of type string
    parser_test.go:20: asserting path [database]
    parser_test.go:30: 	comparing key [database] by subtree assestion
    parser_test.go:20: asserting path [database server]
    parser_test.go:33: 	comparing key [database server] by string representation because it's of type string
    parser_test.go:20: asserting path [database ports]
    parser_test.go:33: 	comparing key [database ports] by string representation because it's of type []interface {}
    parser_test.go:20: asserting path [database connection_max]
    parser_test.go:33: 	comparing key [database connection_max] by string representation because it's of type int64
    parser_test.go:20: asserting path [database enabled]
    parser_test.go:33: 	comparing key [database enabled] by string representation because it's of type bool
    parser_test.go:20: asserting path [servers]
    parser_test.go:30: 	comparing key [servers] by subtree assestion
    parser_test.go:20: asserting path [servers alpha]
    parser_test.go:30: 	comparing key [servers alpha] by subtree assestion
    parser_test.go:20: asserting path [servers alpha ip]
    parser_test.go:33: 	comparing key [servers alpha ip] by string representation because it's of type string
    parser_test.go:20: asserting path [servers alpha dc]
    parser_test.go:33: 	comparing key [servers alpha dc] by string representation because it's of type string
    parser_test.go:20: asserting path [servers beta]
    parser_test.go:30: 	comparing key [servers beta] by subtree assestion
    parser_test.go:20: asserting path [servers beta ip]
    parser_test.go:33: 	comparing key [servers beta ip] by string representation because it's of type string
    parser_test.go:20: asserting path [servers beta dc]
    parser_test.go:33: 	comparing key [servers beta dc] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestParseFileCRLF
--- PASS: TestParseFileCRLF (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f36e0)(title = "TOML Example"
        
        [clients]
          data = [["gamma","delta"],[1,2]]
        
        [database]
          connection_max = 5000
          enabled = true
          ports = [8001,8001,8002]
          server = "192.168.1.1"
        
        [owner]
          bio = "GitHub Cofounder & CEO\nLikes tater tots and beer."
          dob = 1979-05-27T07:32:00Z
          name = "Tom Preston-Werner"
          organization = "GitHub"
        
        [servers]
        
          [servers.alpha]
            dc = "eqdc10"
            ip = "10.0.0.1"
        
          [servers.beta]
            dc = "eqdc10"
            ip = "10.0.0.2"
        )
        
    parser_test.go:20: asserting path [title]
    parser_test.go:33: 	comparing key [title] by string representation because it's of type string
    parser_test.go:20: asserting path [owner]
    parser_test.go:30: 	comparing key [owner] by subtree assestion
    parser_test.go:20: asserting path [owner name]
    parser_test.go:33: 	comparing key [owner name] by string representation because it's of type string
    parser_test.go:20: asserting path [owner organization]
    parser_test.go:33: 	comparing key [owner organization] by string representation because it's of type string
    parser_test.go:20: asserting path [owner bio]
    parser_test.go:33: 	comparing key [owner bio] by string representation because it's of type string
    parser_test.go:20: asserting path [owner dob]
    parser_test.go:33: 	comparing key [owner dob] by string representation because it's of type time.Time
    parser_test.go:20: asserting path [database]
    parser_test.go:30: 	comparing key [database] by subtree assestion
    parser_test.go:20: asserting path [database ports]
    parser_test.go:33: 	comparing key [database ports] by string representation because it's of type []interface {}
    parser_test.go:20: asserting path [database connection_max]
    parser_test.go:33: 	comparing key [database connection_max] by string representation because it's of type int64
    parser_test.go:20: asserting path [database enabled]
    parser_test.go:33: 	comparing key [database enabled] by string representation because it's of type bool
    parser_test.go:20: asserting path [database server]
    parser_test.go:33: 	comparing key [database server] by string representation because it's of type string
    parser_test.go:20: asserting path [servers]
    parser_test.go:30: 	comparing key [servers] by subtree assestion
    parser_test.go:20: asserting path [servers alpha]
    parser_test.go:30: 	comparing key [servers alpha] by subtree assestion
    parser_test.go:20: asserting path [servers alpha ip]
    parser_test.go:33: 	comparing key [servers alpha ip] by string representation because it's of type string
    parser_test.go:20: asserting path [servers alpha dc]
    parser_test.go:33: 	comparing key [servers alpha dc] by string representation because it's of type string
    parser_test.go:20: asserting path [servers beta]
    parser_test.go:30: 	comparing key [servers beta] by subtree assestion
    parser_test.go:20: asserting path [servers beta ip]
    parser_test.go:33: 	comparing key [servers beta ip] by string representation because it's of type string
    parser_test.go:20: asserting path [servers beta dc]
    parser_test.go:33: 	comparing key [servers beta dc] by string representation because it's of type string
    parser_test.go:20: asserting path [clients]
    parser_test.go:30: 	comparing key [clients] by subtree assestion
    parser_test.go:20: asserting path [clients data]
    parser_test.go:33: 	comparing key [clients data] by string representation because it's of type []interface {}
    parser_test.go:44: Finished tree assertion.
=== RUN   TestParseKeyGroupArray
--- PASS: TestParseKeyGroupArray (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003f3ce0)(
        [foo]
        
          [[foo.bar]]
            a = 42
        
          [[foo.bar]]
            a = 69
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:30: 	comparing key [foo] by subtree assestion
    parser_test.go:20: asserting path [foo bar]
    parser_test.go:25: 	comparing key [foo bar] by array iteration
    parser_test.go:20: asserting path [foo bar a]
    parser_test.go:33: 	comparing key [foo bar a] by string representation because it's of type int64
    parser_test.go:20: asserting path [foo bar a]
    parser_test.go:33: 	comparing key [foo bar a] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestParseKeyGroupArrayUnfinished
--- PASS: TestParseKeyGroupArrayUnfinished (0.00s)
=== RUN   TestParseKeyGroupArrayQueryExample
--- PASS: TestParseKeyGroupArrayQueryExample (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004823f0)(
        [[book]]
          author = "Stephen King"
          title = "The Stand"
        
        [[book]]
          author = "Ernest Hemmingway"
          title = "For Whom the Bell Tolls"
        
        [[book]]
          author = "William Gibson"
          title = "Neuromancer"
        )
        
    parser_test.go:20: asserting path [book]
    parser_test.go:25: 	comparing key [book] by array iteration
    parser_test.go:20: asserting path [book title]
    parser_test.go:33: 	comparing key [book title] by string representation because it's of type string
    parser_test.go:20: asserting path [book author]
    parser_test.go:33: 	comparing key [book author] by string representation because it's of type string
    parser_test.go:20: asserting path [book title]
    parser_test.go:33: 	comparing key [book title] by string representation because it's of type string
    parser_test.go:20: asserting path [book author]
    parser_test.go:33: 	comparing key [book author] by string representation because it's of type string
    parser_test.go:20: asserting path [book title]
    parser_test.go:33: 	comparing key [book title] by string representation because it's of type string
    parser_test.go:20: asserting path [book author]
    parser_test.go:33: 	comparing key [book author] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestParseKeyGroupArraySpec
--- PASS: TestParseKeyGroupArraySpec (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000482750)(
        [[fruit]]
          name = "apple"
        
          [fruit.physical]
            color = "red"
            shape = "round"
        
        [[fruit]]
          name = "banana"
        )
        
    parser_test.go:20: asserting path [fruit]
    parser_test.go:25: 	comparing key [fruit] by array iteration
    parser_test.go:20: asserting path [fruit name]
    parser_test.go:33: 	comparing key [fruit name] by string representation because it's of type string
    parser_test.go:20: asserting path [fruit physical]
    parser_test.go:30: 	comparing key [fruit physical] by subtree assestion
    parser_test.go:20: asserting path [fruit physical shape]
    parser_test.go:33: 	comparing key [fruit physical shape] by string representation because it's of type string
    parser_test.go:20: asserting path [fruit physical color]
    parser_test.go:33: 	comparing key [fruit physical color] by string representation because it's of type string
    parser_test.go:20: asserting path [fruit name]
    parser_test.go:33: 	comparing key [fruit name] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestTomlValueStringRepresentation
--- PASS: TestTomlValueStringRepresentation (0.00s)
=== RUN   TestToStringMapStringString
--- PASS: TestToStringMapStringString (0.00s)
=== RUN   TestDocumentPositions
--- PASS: TestDocumentPositions (0.00s)
=== RUN   TestDocumentPositionsWithSpaces
--- PASS: TestDocumentPositionsWithSpaces (0.00s)
=== RUN   TestDocumentPositionsWithGroupArray
--- PASS: TestDocumentPositionsWithGroupArray (0.00s)
=== RUN   TestNestedTreePosition
--- PASS: TestNestedTreePosition (0.00s)
=== RUN   TestInvalidGroupArray
--- PASS: TestInvalidGroupArray (0.00s)
=== RUN   TestDoubleEqual
--- PASS: TestDoubleEqual (0.00s)
=== RUN   TestGroupArrayReassign
--- PASS: TestGroupArrayReassign (0.00s)
=== RUN   TestInvalidFloatParsing
--- PASS: TestInvalidFloatParsing (0.00s)
=== RUN   TestMapKeyIsNum
--- PASS: TestMapKeyIsNum (0.00s)
=== RUN   TestInvalidKeyInlineTable
--- PASS: TestInvalidKeyInlineTable (0.00s)
=== RUN   TestDottedKeys
--- PASS: TestDottedKeys (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000483b30)(name = "Orange"
        
        [physical]
          color = "orange"
          shape = "round"
        
        [site]
          "google.com" = true
        )
        
    parser_test.go:20: asserting path [name]
    parser_test.go:33: 	comparing key [name] by string representation because it's of type string
    parser_test.go:20: asserting path [physical]
    parser_test.go:30: 	comparing key [physical] by subtree assestion
    parser_test.go:20: asserting path [physical color]
    parser_test.go:33: 	comparing key [physical color] by string representation because it's of type string
    parser_test.go:20: asserting path [physical shape]
    parser_test.go:33: 	comparing key [physical shape] by string representation because it's of type string
    parser_test.go:20: asserting path [site]
    parser_test.go:30: 	comparing key [site] by subtree assestion
    parser_test.go:20: asserting path [site google.com]
    parser_test.go:33: 	comparing key [site google.com] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
=== RUN   TestInvalidDottedKeyEmptyGroup
--- PASS: TestInvalidDottedKeyEmptyGroup (0.00s)
=== RUN   TestAccidentalNewlines
--- PASS: TestAccidentalNewlines (0.00s)
=== RUN   TestPositionString
--- PASS: TestPositionString (0.00s)
=== RUN   TestInvalid
--- PASS: TestInvalid (0.00s)
=== RUN   TestTokenStringer
--- PASS: TestTokenStringer (0.00s)
=== RUN   TestTokenString
--- PASS: TestTokenString (0.00s)
=== RUN   TestTomlHas
--- PASS: TestTomlHas (0.00s)
=== RUN   TestTomlGet
--- PASS: TestTomlGet (0.00s)
=== RUN   TestTomlGetDefault
--- PASS: TestTomlGetDefault (0.00s)
=== RUN   TestTomlHasPath
--- PASS: TestTomlHasPath (0.00s)
=== RUN   TestTomlDelete
--- PASS: TestTomlDelete (0.00s)
=== RUN   TestTomlDeleteUnparsableKey
--- PASS: TestTomlDeleteUnparsableKey (0.00s)
=== RUN   TestTomlDeleteNestedKey
--- PASS: TestTomlDeleteNestedKey (0.00s)
=== RUN   TestTomlDeleteNonexistentNestedKey
--- PASS: TestTomlDeleteNonexistentNestedKey (0.00s)
=== RUN   TestTomlGetPath
--- PASS: TestTomlGetPath (0.00s)
=== RUN   TestTomlFromMap
--- PASS: TestTomlFromMap (0.00s)
=== RUN   TestLoadBytesBOM
--- PASS: TestLoadBytesBOM (0.00s)
=== RUN   TestInvalidArrayMixedTypesArraysAndInts
--- PASS: TestInvalidArrayMixedTypesArraysAndInts (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        arrays-and-ints =  [1, ["Arrays are not integers."]]
=== RUN   TestInvalidArrayMixedTypesIntsAndFloats
--- PASS: TestInvalidArrayMixedTypesIntsAndFloats (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        ints-and-floats = [1, 1.1]
=== RUN   TestInvalidArrayMixedTypesStringsAndInts
--- PASS: TestInvalidArrayMixedTypesStringsAndInts (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        strings-and-ints = ["hi", 42]
=== RUN   TestInvalidDatetimeMalformedNoLeads
--- PASS: TestInvalidDatetimeMalformedNoLeads (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        no-leads = 1987-7-05T17:45:00Z
=== RUN   TestInvalidDatetimeMalformedNoSecs
--- PASS: TestInvalidDatetimeMalformedNoSecs (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        no-secs = 1987-07-05T17:45Z
=== RUN   TestInvalidDatetimeMalformedNoT
--- PASS: TestInvalidDatetimeMalformedNoT (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        no-t = 1987-07-0517:45:00Z
=== RUN   TestInvalidDatetimeMalformedWithMilli
--- PASS: TestInvalidDatetimeMalformedWithMilli (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        with-milli = 1987-07-5T17:45:00.12Z
=== RUN   TestInvalidDuplicateKeyTable
--- PASS: TestInvalidDuplicateKeyTable (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [fruit]
        type = "apple"
        
        [fruit.type]
        apple = "yes"
=== RUN   TestInvalidDuplicateKeys
--- PASS: TestInvalidDuplicateKeys (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        dupe = false
        dupe = true
=== RUN   TestInvalidDuplicateTables
--- PASS: TestInvalidDuplicateTables (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [a]
        [a]
=== RUN   TestInvalidEmptyImplicitTable
--- PASS: TestInvalidEmptyImplicitTable (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [naughty..naughty]
=== RUN   TestInvalidEmptyTable
--- PASS: TestInvalidEmptyTable (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        []
=== RUN   TestInvalidFloatNoLeadingZero
--- PASS: TestInvalidFloatNoLeadingZero (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        answer = .12345
        neganswer = -.12345
=== RUN   TestInvalidFloatNoTrailingDigits
--- PASS: TestInvalidFloatNoTrailingDigits (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        answer = 1.
        neganswer = -1.
=== RUN   TestInvalidKeyEmpty
--- PASS: TestInvalidKeyEmpty (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
         = 1
=== RUN   TestInvalidKeyHash
--- PASS: TestInvalidKeyHash (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        a# = 1
=== RUN   TestInvalidKeyNewline
--- PASS: TestInvalidKeyNewline (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        a
        = 1
=== RUN   TestInvalidKeyOpenBracket
--- PASS: TestInvalidKeyOpenBracket (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [abc = 1
=== RUN   TestInvalidKeySingleOpenBracket
--- PASS: TestInvalidKeySingleOpenBracket (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [
=== RUN   TestInvalidKeySpace
--- PASS: TestInvalidKeySpace (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        a b = 1
=== RUN   TestInvalidKeyStartBracket
--- PASS: TestInvalidKeyStartBracket (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [a]
        [xyz = 5
        [b]
=== RUN   TestInvalidKeyTwoEquals
--- PASS: TestInvalidKeyTwoEquals (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        key= = 1
=== RUN   TestInvalidStringBadByteEscape
--- PASS: TestInvalidStringBadByteEscape (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        naughty = "\xAg"
=== RUN   TestInvalidStringBadEscape
--- PASS: TestInvalidStringBadEscape (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        invalid-escape = "This string has a bad \a escape character."
=== RUN   TestInvalidStringByteEscapes
--- PASS: TestInvalidStringByteEscapes (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        answer = "\x33"
=== RUN   TestInvalidStringNoClose
--- PASS: TestInvalidStringNoClose (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        no-ending-quote = "One time, at band camp
=== RUN   TestInvalidTableArrayImplicit
--- PASS: TestInvalidTableArrayImplicit (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        # This test is a bit tricky. It should fail because the first use of
        # `[[albums.songs]]` without first declaring `albums` implies that `albums`
        # must be a table. The alternative would be quite weird. Namely, it wouldn't
        # comply with the TOML spec: "Each double-bracketed sub-table will belong to 
        # the most *recently* defined table element *above* it."
        #
        # This is in contrast to the *valid* test, table-array-implicit where
        # `[[albums.songs]]` works by itself, so long as `[[albums]]` isn't declared
        # later. (Although, `[albums]` could be.)
        [[albums.songs]]
        name = "Glory Days"
        
        [[albums]]
        name = "Born in the USA"
=== RUN   TestInvalidTableArrayMalformedBracket
--- PASS: TestInvalidTableArrayMalformedBracket (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [[albums]
        name = "Born to Run"
=== RUN   TestInvalidTableArrayMalformedEmpty
--- PASS: TestInvalidTableArrayMalformedEmpty (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [[]]
        name = "Born to Run"
=== RUN   TestInvalidTableEmpty
--- PASS: TestInvalidTableEmpty (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        []
=== RUN   TestInvalidTableNestedBracketsClose
--- PASS: TestInvalidTableNestedBracketsClose (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [a]b]
        zyx = 42
=== RUN   TestInvalidTableNestedBracketsOpen
--- PASS: TestInvalidTableNestedBracketsOpen (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [a[b]
        zyx = 42
=== RUN   TestInvalidTableWhitespace
--- PASS: TestInvalidTableWhitespace (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [invalid key]
=== RUN   TestInvalidTableWithPound
--- PASS: TestInvalidTableWithPound (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [key#group]
        answer = 42
=== RUN   TestInvalidTextAfterArrayEntries
--- PASS: TestInvalidTextAfterArrayEntries (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        array = [
          "Is there life after an array separator?", No
          "Entry"
        ]
=== RUN   TestInvalidTextAfterInteger
--- PASS: TestInvalidTextAfterInteger (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        answer = 42 the ultimate answer?
=== RUN   TestInvalidTextAfterString
--- PASS: TestInvalidTextAfterString (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        string = "Is there life after strings?" No.
=== RUN   TestInvalidTextAfterTable
--- PASS: TestInvalidTextAfterTable (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        [error] this shouldn't be here
=== RUN   TestInvalidTextBeforeArraySeparator
--- PASS: TestInvalidTextBeforeArraySeparator (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        array = [
          "Is there life before an array separator?" No,
          "Entry"
        ]
=== RUN   TestInvalidTextInArray
--- PASS: TestInvalidTextInArray (0.00s)
    toml_testgen_support_test.go:16: Input TOML:
        array = [
          "Entry 1",
          I don't belong,
          "Entry 2",
        ]
=== RUN   TestValidArrayEmpty
--- PASS: TestValidArrayEmpty (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        thevoid = [[[[[]]]]]
=== RUN   TestValidArrayNospaces
--- PASS: TestValidArrayNospaces (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        ints = [1,2,3]
=== RUN   TestValidArraysHetergeneous
--- PASS: TestValidArraysHetergeneous (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        mixed = [[1, 2], ["a", "b"], [1.1, 2.1]]
=== RUN   TestValidArraysNested
--- PASS: TestValidArraysNested (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        nest = [["a"], ["b"]]
=== RUN   TestValidArrays
--- PASS: TestValidArrays (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        ints = [1, 2, 3]
        floats = [1.1, 2.1, 3.1]
        strings = ["a", "b", "c"]
        dates = [
          1987-07-05T17:45:00Z,
          1979-05-27T07:32:00Z,
          2006-06-01T11:00:00Z,
        ]
=== RUN   TestValidBool
--- PASS: TestValidBool (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        t = true
        f = false
=== RUN   TestValidCommentsEverywhere
--- PASS: TestValidCommentsEverywhere (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        # Top comment.
          # Top comment.
        # Top comment.
        
        # [no-extraneous-groups-please]
        
        [group] # Comment
        answer = 42 # Comment
        # no-extraneous-keys-please = 999
        # Inbetween comment.
        more = [ # Comment
          # What about multiple # comments?
          # Can you handle it?
          #
                  # Evil.
        # Evil.
          42, 42, # Comments within arrays are fun.
          # What about multiple # comments?
          # Can you handle it?
          #
                  # Evil.
        # Evil.
        # ] Did I fool you?
        ] # Hopefully not.
=== RUN   TestValidDatetime
--- PASS: TestValidDatetime (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        bestdayever = 1987-07-05T17:45:00Z
=== RUN   TestValidEmpty
--- PASS: TestValidEmpty (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
=== RUN   TestValidExample
--- PASS: TestValidExample (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        best-day-ever = 1987-07-05T17:45:00Z
        
        [numtheory]
        boring = false
        perfection = [6, 28, 496]
=== RUN   TestValidFloat
--- PASS: TestValidFloat (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        pi = 3.14
        negpi = -3.14
=== RUN   TestValidImplicitAndExplicitAfter
--- PASS: TestValidImplicitAndExplicitAfter (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [a.b.c]
        answer = 42
        
        [a]
        better = 43
=== RUN   TestValidImplicitAndExplicitBefore
--- PASS: TestValidImplicitAndExplicitBefore (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [a]
        better = 43
        
        [a.b.c]
        answer = 42
=== RUN   TestValidImplicitGroups
--- PASS: TestValidImplicitGroups (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [a.b.c]
        answer = 42
=== RUN   TestValidInteger
--- PASS: TestValidInteger (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer = 42
        neganswer = -42
=== RUN   TestValidKeyEqualsNospace
--- PASS: TestValidKeyEqualsNospace (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer=42
=== RUN   TestValidKeySpace
--- PASS: TestValidKeySpace (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        "a b" = 1
=== RUN   TestValidKeySpecialChars
--- PASS: TestValidKeySpecialChars (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        "~!@$^&*()_+-`1234567890[]|/?><.,;:'" = 1
=== RUN   TestValidLongFloat
--- PASS: TestValidLongFloat (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        longpi = 3.141592653589793
        neglongpi = -3.141592653589793
=== RUN   TestValidLongInteger
--- PASS: TestValidLongInteger (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer = 9223372036854775807
        neganswer = -9223372036854775808
=== RUN   TestValidMultilineString
--- PASS: TestValidMultilineString (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        multiline_empty_one = """"""
        multiline_empty_two = """
        """
        multiline_empty_three = """\
            """
        multiline_empty_four = """\
           \
           \
           """
        
        equivalent_one = "The quick brown fox jumps over the lazy dog."
        equivalent_two = """
        The quick brown \
        
        
          fox jumps over \
            the lazy dog."""
        
        equivalent_three = """\
               The quick brown \
               fox jumps over \
               the lazy dog.\
               """
=== RUN   TestValidRawMultilineString
--- PASS: TestValidRawMultilineString (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        oneline = '''This string has a ' quote character.'''
        firstnl = '''
        This string has a ' quote character.'''
        multiline = '''
        This string
        has ' a quote character
        and more than
        one newline
        in it.'''
=== RUN   TestValidRawString
--- PASS: TestValidRawString (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        backspace = 'This string has a \b backspace character.'
        tab = 'This string has a \t tab character.'
        newline = 'This string has a \n new line character.'
        formfeed = 'This string has a \f form feed character.'
        carriage = 'This string has a \r carriage return character.'
        slash = 'This string has a \/ slash character.'
        backslash = 'This string has a \\ backslash character.'
=== RUN   TestValidStringEmpty
--- PASS: TestValidStringEmpty (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer = ""
=== RUN   TestValidStringEscapes
--- PASS: TestValidStringEscapes (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        backspace = "This string has a \b backspace character."
        tab = "This string has a \t tab character."
        newline = "This string has a \n new line character."
        formfeed = "This string has a \f form feed character."
        carriage = "This string has a \r carriage return character."
        quote = "This string has a \" quote character."
        backslash = "This string has a \\ backslash character."
        notunicode1 = "This string does not have a unicode \\u escape."
        notunicode2 = "This string does not have a unicode \u005Cu escape."
        notunicode3 = "This string does not have a unicode \\u0075 escape."
        notunicode4 = "This string does not have a unicode \\\u0075 escape."
=== RUN   TestValidStringSimple
--- PASS: TestValidStringSimple (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer = "You are not drinking enough whisky."
=== RUN   TestValidStringWithPound
--- PASS: TestValidStringWithPound (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        pound = "We see no # comments here."
        poundcomment = "But there are # some comments here." # Did I # mess you up?
=== RUN   TestValidTableArrayImplicit
--- PASS: TestValidTableArrayImplicit (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [[albums.songs]]
        name = "Glory Days"
=== RUN   TestValidTableArrayMany
--- PASS: TestValidTableArrayMany (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [[people]]
        first_name = "Bruce"
        last_name = "Springsteen"
        
        [[people]]
        first_name = "Eric"
        last_name = "Clapton"
        
        [[people]]
        first_name = "Bob"
        last_name = "Seger"
=== RUN   TestValidTableArrayNest
--- PASS: TestValidTableArrayNest (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [[albums]]
        name = "Born to Run"
        
          [[albums.songs]]
          name = "Jungleland"
        
          [[albums.songs]]
          name = "Meeting Across the River"
        
        [[albums]]
        name = "Born in the USA"
          
          [[albums.songs]]
          name = "Glory Days"
        
          [[albums.songs]]
          name = "Dancing in the Dark"
=== RUN   TestValidTableArrayOne
--- PASS: TestValidTableArrayOne (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [[people]]
        first_name = "Bruce"
        last_name = "Springsteen"
=== RUN   TestValidTableEmpty
--- PASS: TestValidTableEmpty (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [a]
=== RUN   TestValidTableSubEmpty
--- PASS: TestValidTableSubEmpty (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        [a]
        [a.b]
=== RUN   TestValidTableWhitespace
--- PASS: TestValidTableWhitespace (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        ["valid key"]
=== RUN   TestValidTableWithPound
--- PASS: TestValidTableWithPound (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        ["key#group"]
        answer = 42
=== RUN   TestValidUnicodeEscape
--- PASS: TestValidUnicodeEscape (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer4 = "\u03B4"
        answer8 = "\U000003B4"
=== RUN   TestValidUnicodeLiteral
--- PASS: TestValidUnicodeLiteral (0.00s)
    toml_testgen_support_test.go:33: Input TOML:
        answer = "δ"
=== RUN   TestTreeCreateToTree
--- PASS: TestTreeCreateToTree (0.00s)
    tomltree_create_test.go:37: validation ok .a_string as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .float32 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .array_times as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .int32 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .a_bool as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .stringer as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .nested.foo as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .nested as *toml.Tree
    tomltree_create_test.go:37: validation ok .custom_string_map_key.custom as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .custom_string_map_key as *toml.Tree
    tomltree_create_test.go:37: validation ok .array as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .an_int as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .array_uint as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .map_times.now as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .map_times as *toml.Tree
    tomltree_create_test.go:37: validation ok .int8 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .uint16 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .time as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .uint8 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .uint32 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .array_table.0.sub_map as *toml.tomlValue
    tomltree_create_test.go:37: validation ok .array_table.0 as *toml.Tree
    tomltree_create_test.go:37: validation ok .array_table as []*toml.Tree
    tomltree_create_test.go:37: validation ok .int16 as *toml.tomlValue
    tomltree_create_test.go:37: validation ok  as *toml.Tree
=== RUN   TestTreeCreateToTreeInvalidLeafType
--- PASS: TestTreeCreateToTreeInvalidLeafType (0.00s)
=== RUN   TestTreeCreateToTreeInvalidMapKeyType
--- PASS: TestTreeCreateToTreeInvalidMapKeyType (0.00s)
=== RUN   TestTreeCreateToTreeInvalidArrayMemberType
--- PASS: TestTreeCreateToTreeInvalidArrayMemberType (0.00s)
=== RUN   TestTreeCreateToTreeInvalidTableGroupType
--- PASS: TestTreeCreateToTreeInvalidTableGroupType (0.00s)
=== RUN   TestRoundTripArrayOfTables
--- PASS: TestRoundTripArrayOfTables (0.00s)
=== RUN   TestTreeWriteToEmptyTable
--- PASS: TestTreeWriteToEmptyTable (0.00s)
=== RUN   TestTreeWriteToTomlString
--- PASS: TestTreeWriteToTomlString (0.00s)
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d48d0)(
        [name]
          first = "Tom"
          last = "Preston-Werner"
        
        [points]
          x = 1
          y = 2
        )
        
    parser_test.go:20: asserting path [name]
    parser_test.go:30: 	comparing key [name] by subtree assestion
    parser_test.go:20: asserting path [name first]
    parser_test.go:33: 	comparing key [name first] by string representation because it's of type string
    parser_test.go:20: asserting path [name last]
    parser_test.go:33: 	comparing key [name last] by string representation because it's of type string
    parser_test.go:20: asserting path [points]
    parser_test.go:30: 	comparing key [points] by subtree assestion
    parser_test.go:20: asserting path [points x]
    parser_test.go:33: 	comparing key [points x] by string representation because it's of type int64
    parser_test.go:20: asserting path [points y]
    parser_test.go:33: 	comparing key [points y] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
=== RUN   TestTreeWriteToTomlStringSimple
--- PASS: TestTreeWriteToTomlStringSimple (0.00s)
=== RUN   TestTreeWriteToTomlStringKeysOrders
--- PASS: TestTreeWriteToTomlStringKeysOrders (0.03s)
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d4ff0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d53e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d57d0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d4090)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d4480)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d4870)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d4c60)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d5050)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d5440)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d5c20)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000482030)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000482420)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000482810)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000482c00)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000482ff0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004833e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000483800)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000483bf0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000240000)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000240420)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000240810)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000240c00)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000240ff0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002414a0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000241890)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000241c80)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000074330)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000074c00)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000074ff0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0000753e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0000757d0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000075bc0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000075fb0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036a3c0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036a7b0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036aba0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036af90)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036b3e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036b7d0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036bbc0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00036bfb0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039c3c0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039c7b0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039cba0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039cf90)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039d380)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039d770)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039db60)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039dfb0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002063f0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002067e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000206bd0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000206fc0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002073b0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002077a0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000207b90)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000207f80)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000396390)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000396780)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000396b70)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000396f60)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000397350)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000397740)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000397b30)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000397f20)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444330)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444720)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444b10)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444f00)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004452f0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444090)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444480)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444870)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000444c60)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000445050)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0004459e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000445dd0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d41e0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d45d0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d49c0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d4db0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d51a0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d5590)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d5980)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0003d5d70)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002061b0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc0002065a0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000206990)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000206d80)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000207170)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000207560)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000207950)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc000207d40)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039c150)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039c540)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039c930)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039cd20)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039d110)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039d500)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
    tomltree_write_test.go:118: Intermediate string representation:
    tomltree_write_test.go:119: bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        
    parser_test.go:42: Asserting tree:
         (*toml.Tree)(0xc00039d8f0)(bar = "baz"
        foo = 1
        foobar = true
        
        [qux]
          bar = "baz2"
          foo = 1
        )
        
    parser_test.go:20: asserting path [foobar]
    parser_test.go:33: 	comparing key [foobar] by string representation because it's of type bool
    parser_test.go:20: asserting path [bar]
    parser_test.go:33: 	comparing key [bar] by string representation because it's of type string
    parser_test.go:20: asserting path [foo]
    parser_test.go:33: 	comparing key [foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux]
    parser_test.go:30: 	comparing key [qux] by subtree assestion
    parser_test.go:20: asserting path [qux foo]
    parser_test.go:33: 	comparing key [qux foo] by string representation because it's of type int64
    parser_test.go:20: asserting path [qux bar]
    parser_test.go:33: 	comparing key [qux bar] by string representation because it's of type string
    parser_test.go:44: Finished tree assertion.
=== RUN   TestTreeWriteToMapSimple
--- PASS: TestTreeWriteToMapSimple (0.00s)
=== RUN   TestTreeWriteToInvalidTreeSimpleValue
--- PASS: TestTreeWriteToInvalidTreeSimpleValue (0.00s)
=== RUN   TestTreeWriteToInvalidTreeTomlValue
--- PASS: TestTreeWriteToInvalidTreeTomlValue (0.00s)
=== RUN   TestTreeWriteToInvalidTreeTomlValueArray
--- PASS: TestTreeWriteToInvalidTreeTomlValueArray (0.00s)
=== RUN   TestTreeWriteToFailingWriterInSimpleValue
--- PASS: TestTreeWriteToFailingWriterInSimpleValue (0.00s)
=== RUN   TestTreeWriteToFailingWriterInTable
--- PASS: TestTreeWriteToFailingWriterInTable (0.00s)
=== RUN   TestTreeWriteToFailingWriterInArray
--- PASS: TestTreeWriteToFailingWriterInArray (0.00s)
=== RUN   TestTreeWriteToMapExampleFile
--- PASS: TestTreeWriteToMapExampleFile (0.00s)
=== RUN   TestTreeWriteToMapWithTablesInMultipleChunks
--- PASS: TestTreeWriteToMapWithTablesInMultipleChunks (0.00s)
=== RUN   TestTreeWriteToMapWithArrayOfInlineTables
--- PASS: TestTreeWriteToMapWithArrayOfInlineTables (0.00s)
=== RUN   TestTreeWriteToFloat
--- PASS: TestTreeWriteToFloat (0.00s)
=== RUN   TestTreeWriteToSpecialFloat
--- PASS: TestTreeWriteToSpecialFloat (0.00s)
=== RUN   TestIssue290
--- PASS: TestIssue290 (0.00s)
=== RUN   Example_unmarshal
--- PASS: Example_unmarshal (0.00s)
=== RUN   ExampleMarshal
--- PASS: ExampleMarshal (0.00s)
=== RUN   ExampleUnmarshal
--- PASS: ExampleUnmarshal (0.00s)
PASS
ok  	github.com/pelletier/go-toml	0.130s
=== RUN   TestProcessMainReadFromStdin
--- PASS: TestProcessMainReadFromStdin (0.00s)
=== RUN   TestProcessMainReadFromFile
--- PASS: TestProcessMainReadFromFile (0.00s)
=== RUN   TestProcessMainReadFromMissingFile
--- PASS: TestProcessMainReadFromMissingFile (0.00s)
PASS
ok  	github.com/pelletier/go-toml/cmd/jsontoml	0.024s
=== RUN   TestProcessMainReadFromStdin
--- PASS: TestProcessMainReadFromStdin (0.00s)
=== RUN   TestProcessMainReadFromFile
--- PASS: TestProcessMainReadFromFile (0.00s)
=== RUN   TestProcessMainReadFromMissingFile
--- PASS: TestProcessMainReadFromMissingFile (0.00s)
PASS
ok  	github.com/pelletier/go-toml/cmd/tomljson	0.025s
?   	github.com/pelletier/go-toml/cmd/tomll	[no test files]
?   	github.com/pelletier/go-toml/cmd/tomltestgen	[no test files]
=== RUN   TestLexSpecialChars
--- PASS: TestLexSpecialChars (0.00s)
=== RUN   TestLexString
--- PASS: TestLexString (0.00s)
=== RUN   TestLexDoubleString
--- PASS: TestLexDoubleString (0.00s)
=== RUN   TestLexStringEscapes
--- PASS: TestLexStringEscapes (0.00s)
=== RUN   TestLexStringUnfinishedUnicode4
--- PASS: TestLexStringUnfinishedUnicode4 (0.00s)
=== RUN   TestLexStringUnfinishedUnicode8
--- PASS: TestLexStringUnfinishedUnicode8 (0.00s)
=== RUN   TestLexStringInvalidEscape
--- PASS: TestLexStringInvalidEscape (0.00s)
=== RUN   TestLexStringUnfinished
--- PASS: TestLexStringUnfinished (0.00s)
=== RUN   TestLexKey
--- PASS: TestLexKey (0.00s)
=== RUN   TestLexRecurse
--- PASS: TestLexRecurse (0.00s)
=== RUN   TestLexBracketKey
--- PASS: TestLexBracketKey (0.00s)
=== RUN   TestLexSpace
--- PASS: TestLexSpace (0.00s)
=== RUN   TestLexInteger
--- PASS: TestLexInteger (0.00s)
=== RUN   TestLexFloat
--- PASS: TestLexFloat (0.00s)
=== RUN   TestLexFloatWithMultipleDots
--- PASS: TestLexFloatWithMultipleDots (0.00s)
=== RUN   TestLexFloatLeadingDot
--- PASS: TestLexFloatLeadingDot (0.00s)
=== RUN   TestLexFloatWithTrailingDot
--- PASS: TestLexFloatWithTrailingDot (0.00s)
=== RUN   TestLexNumberWithoutDigit
--- PASS: TestLexNumberWithoutDigit (0.00s)
=== RUN   TestLexUnknown
--- PASS: TestLexUnknown (0.00s)
=== RUN   TestPathRoot
--- PASS: TestPathRoot (0.00s)
=== RUN   TestPathKey
--- PASS: TestPathKey (0.00s)
=== RUN   TestPathBracketKey
--- PASS: TestPathBracketKey (0.00s)
=== RUN   TestPathBracketStringKey
--- PASS: TestPathBracketStringKey (0.00s)
=== RUN   TestPathIndex
--- PASS: TestPathIndex (0.00s)
=== RUN   TestPathSliceStart
--- PASS: TestPathSliceStart (0.00s)
=== RUN   TestPathSliceStartEnd
--- PASS: TestPathSliceStartEnd (0.00s)
=== RUN   TestPathSliceStartEndColon
--- PASS: TestPathSliceStartEndColon (0.00s)
=== RUN   TestPathSliceStartStep
--- PASS: TestPathSliceStartStep (0.00s)
=== RUN   TestPathSliceEndStep
--- PASS: TestPathSliceEndStep (0.00s)
=== RUN   TestPathSliceStep
--- PASS: TestPathSliceStep (0.00s)
=== RUN   TestPathSliceAll
--- PASS: TestPathSliceAll (0.00s)
=== RUN   TestPathAny
--- PASS: TestPathAny (0.00s)
=== RUN   TestPathUnion
--- PASS: TestPathUnion (0.00s)
=== RUN   TestPathRecurse
--- PASS: TestPathRecurse (0.00s)
=== RUN   TestPathFilterExpr
--- PASS: TestPathFilterExpr (0.00s)
=== RUN   TestQueryRoot
--- PASS: TestQueryRoot (0.00s)
=== RUN   TestQueryKey
--- PASS: TestQueryKey (0.00s)
=== RUN   TestQueryKeyString
--- PASS: TestQueryKeyString (0.00s)
=== RUN   TestQueryIndex
--- PASS: TestQueryIndex (0.00s)
=== RUN   TestQuerySliceRange
--- PASS: TestQuerySliceRange (0.00s)
=== RUN   TestQuerySliceStep
--- PASS: TestQuerySliceStep (0.00s)
=== RUN   TestQueryAny
--- PASS: TestQueryAny (0.00s)
=== RUN   TestQueryUnionSimple
--- PASS: TestQueryUnionSimple (0.00s)
=== RUN   TestQueryRecursionAll
--- PASS: TestQueryRecursionAll (0.00s)
=== RUN   TestQueryRecursionUnionSimple
--- PASS: TestQueryRecursionUnionSimple (0.00s)
=== RUN   TestQueryFilterFn
--- PASS: TestQueryFilterFn (0.00s)
=== RUN   TestQueryExample
--- PASS: TestQueryExample (0.00s)
=== RUN   TestQueryReadmeExample
--- PASS: TestQueryReadmeExample (0.00s)
=== RUN   TestQueryPathNotPresent
--- PASS: TestQueryPathNotPresent (0.00s)
=== RUN   TestTomlQuery
--- PASS: TestTomlQuery (0.00s)
PASS
ok  	github.com/pelletier/go-toml/query	0.045s
   create-stamp debian/debhelper-build-stamp
   dh_testroot -O--buildsystem=golang
   dh_prep -O--buildsystem=golang
   dh_auto_install -O--buildsystem=golang
	cd obj-x86_64-linux-gnu && mkdir -p /<<PKGBUILDDIR>>/debian/tmp/usr
	cd obj-x86_64-linux-gnu && cp -r bin /<<PKGBUILDDIR>>/debian/tmp/usr
   dh_install -O--buildsystem=golang
   dh_installdocs -O--buildsystem=golang
   dh_installchangelogs -O--buildsystem=golang
   dh_installman -O--buildsystem=golang
   dh_installinit -O--buildsystem=golang
   dh_installsystemduser -O--buildsystem=golang
   dh_perl -O--buildsystem=golang
   dh_link -O--buildsystem=golang
   dh_strip_nondeterminism -O--buildsystem=golang
   dh_compress -O--buildsystem=golang
   dh_fixperms -O--buildsystem=golang
   dh_missing -O--buildsystem=golang
dh_missing: warning: usr/bin/jsontoml exists in debian/tmp but is not installed to anywhere
	The following debhelper tools have reported what they installed (with files per package)
	 * dh_install: golang-github-pelletier-go-toml (3), golang-github-pelletier-go-toml-dev (1)
	 * dh_installdocs: golang-github-pelletier-go-toml (0), golang-github-pelletier-go-toml-dev (0)
	 * dh_installman: golang-github-pelletier-go-toml (2), golang-github-pelletier-go-toml-dev (0)
	If the missing files are installed by another tool, please file a bug against it.
	When filing the report, if the tool is not part of debhelper itself, please reference the
	"Logging helpers and dh_missing" section from the "PROGRAMMING" guide for debhelper (10.6.3+).
	  (in the debhelper package: /usr/share/doc/debhelper/PROGRAMMING.gz)
	Be sure to test with dpkg-buildpackage -A/-B as the results may vary when only a subset is built
	For a short-term work-around: Add the files to debian/not-installed
   dh_dwz -O--buildsystem=golang
dwz: debian/golang-github-pelletier-go-toml/usr/bin/tomljson: .debug_info section not present
dwz: debian/golang-github-pelletier-go-toml/usr/bin/tomll: .debug_info section not present
dwz: debian/golang-github-pelletier-go-toml/usr/bin/tomltestgen: .debug_info section not present
dwz: Too few files for multifile optimization
dh_dwz: warning: No dwz multifile created, but not explicitly requested either so ignoring it.
dh_dwz: warning: Common issues include no debug information at all (missing -g) and
dh_dwz: warning: compressed debug information (#931891).
   dh_strip -O--buildsystem=golang
dh_strip: warning: Could not find the BuildID in debian/golang-github-pelletier-go-toml/usr/bin/tomltestgen
dh_strip: warning: Could not find the BuildID in debian/golang-github-pelletier-go-toml/usr/bin/tomll
dh_strip: warning: Could not find the BuildID in debian/golang-github-pelletier-go-toml/usr/bin/tomljson
   dh_makeshlibs -O--buildsystem=golang
   dh_shlibdeps -O--buildsystem=golang
   dh_installdeb -O--buildsystem=golang
   dh_golang -O--buildsystem=golang
   dh_gencontrol -O--buildsystem=golang
dpkg-gencontrol: warning: Depends field of package golang-github-pelletier-go-toml-dev: substitution variable ${shlibs:Depends} used, but is not defined
   dh_md5sums -O--buildsystem=golang
   dh_builddeb -O--buildsystem=golang
dpkg-deb: building package 'golang-github-pelletier-go-toml-dev' in '../golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb'.
dpkg-deb: building package 'golang-github-pelletier-go-toml' in '../golang-github-pelletier-go-toml_1.6.0-1_amd64.deb'.
 dpkg-genbuildinfo --build=binary
 dpkg-genchanges --build=binary >../golang-github-pelletier-go-toml_1.6.0-1_amd64.changes
dpkg-genchanges: info: binary-only upload (no source code included)
 dpkg-source --after-build .
dpkg-buildpackage: info: binary-only upload (no source included)
--------------------------------------------------------------------------------
Build finished at 2020-02-24T21:33:38Z

Finished
--------

I: Built successfully

+------------------------------------------------------------------------------+
| Changes                                                                      |
+------------------------------------------------------------------------------+


golang-github-pelletier-go-toml_1.6.0-1_amd64.changes:
------------------------------------------------------

Format: 1.8
Date: Fri, 21 Feb 2020 04:59:09 -0700
Source: golang-github-pelletier-go-toml
Binary: golang-github-pelletier-go-toml golang-github-pelletier-go-toml-dev
Architecture: all amd64
Version: 1.6.0-1
Distribution: unstable
Urgency: medium
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Changed-By: Anthony Fok <foka@debian.org>
Description:
 golang-github-pelletier-go-toml - Go library for the TOML language -- commandline programs
 golang-github-pelletier-go-toml-dev - Go library for the TOML language
Changes:
 golang-github-pelletier-go-toml (1.6.0-1) unstable; urgency=medium
 .
   * New upstream version 1.6.0
   * debian/gbp.conf: Set debian-branch to debian/sid for DEP-14 conformance
   * Add "Rules-Requires-Root: no" to debian/control
   * Bump Standards-Version to 4.5.0 (no change)
   * Update package description to show TOML version 0.5.0 support
   * Update dependency on golang-gopkg-yaml.v2-dev
     to (>= 2.2.4~) according to go.mod
Checksums-Sha1:
 70fc50c4d3b6ff2d66c6540be1074f702f0cbdba 66604 golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
 96ce9c5943cb6f1d91e1b4abb3c2fd83aa04f905 5861 golang-github-pelletier-go-toml_1.6.0-1_amd64.buildinfo
 ed97e8bb5b9f5548ae723a70f9c24ba4218e1aa9 2792068 golang-github-pelletier-go-toml_1.6.0-1_amd64.deb
Checksums-Sha256:
 4d0e07cb9a90955aabf12624cb492f837436a2466f26381ec17f828182957f03 66604 golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
 8706f005f001aa815656462a0ddaaf545fbc3380aa60bf76ffe706dff6aa8e30 5861 golang-github-pelletier-go-toml_1.6.0-1_amd64.buildinfo
 6eebfaa64f6840ca8f99ecdc42292d4c0bd34838816bddab9f83e35423b2f80c 2792068 golang-github-pelletier-go-toml_1.6.0-1_amd64.deb
Files:
 361f907d97f437b20f08c81fafdfb024 66604 devel optional golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
 93979381524e8e1b2323fe9d95076f23 5861 devel optional golang-github-pelletier-go-toml_1.6.0-1_amd64.buildinfo
 eb33b0c35980b636e1e144a2bab9d36a 2792068 devel optional golang-github-pelletier-go-toml_1.6.0-1_amd64.deb

+------------------------------------------------------------------------------+
| Buildinfo                                                                    |
+------------------------------------------------------------------------------+

Format: 1.0
Source: golang-github-pelletier-go-toml
Binary: golang-github-pelletier-go-toml-dev golang-github-pelletier-go-toml
Architecture: all amd64
Version: 1.6.0-1
Checksums-Md5:
 361f907d97f437b20f08c81fafdfb024 66604 golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
 eb33b0c35980b636e1e144a2bab9d36a 2792068 golang-github-pelletier-go-toml_1.6.0-1_amd64.deb
Checksums-Sha1:
 70fc50c4d3b6ff2d66c6540be1074f702f0cbdba 66604 golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
 ed97e8bb5b9f5548ae723a70f9c24ba4218e1aa9 2792068 golang-github-pelletier-go-toml_1.6.0-1_amd64.deb
Checksums-Sha256:
 4d0e07cb9a90955aabf12624cb492f837436a2466f26381ec17f828182957f03 66604 golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
 6eebfaa64f6840ca8f99ecdc42292d4c0bd34838816bddab9f83e35423b2f80c 2792068 golang-github-pelletier-go-toml_1.6.0-1_amd64.deb
Build-Origin: Debian
Build-Architecture: amd64
Build-Date: Mon, 24 Feb 2020 21:33:38 +0000
Build-Path: /<<PKGBUILDDIR>>
Installed-Build-Depends:
 autoconf (= 2.69-11.1),
 automake (= 1:1.16.1-4),
 autopoint (= 0.19.8.1-10),
 autotools-dev (= 20180224.1),
 base-files (= 11),
 base-passwd (= 3.5.47),
 bash (= 5.0-5),
 binutils (= 2.34-3),
 binutils-common (= 2.34-3),
 binutils-x86-64-linux-gnu (= 2.34-3),
 bsdmainutils (= 11.1.2+b1),
 bsdutils (= 1:2.34-0.1),
 build-essential (= 12.8),
 bzip2 (= 1.0.8-2),
 clang-8 (= 1:8.0.1-7),
 coreutils (= 8.30-3+b1),
 cpp (= 4:9.2.1-3.1),
 cpp-9 (= 9.2.1-29),
 dash (= 0.5.10.2-6),
 debconf (= 1.5.73),
 debhelper (= 12.9),
 debianutils (= 4.9.1),
 dh-autoreconf (= 19),
 dh-golang (= 1.46),
 dh-strip-nondeterminism (= 1.6.3-2),
 diffutils (= 1:3.7-3),
 dpkg (= 1.19.7),
 dpkg-dev (= 1.19.7),
 dwz (= 0.13-5),
 fdisk (= 2.34-0.1),
 file (= 1:5.38-4),
 findutils (= 4.7.0-1),
 g++ (= 4:9.2.1-3.1),
 g++-9 (= 9.2.1-29),
 gcc (= 4:9.2.1-3.1),
 gcc-10-base (= 10-20200222-1),
 gcc-8-base (= 8.3.0-29),
 gcc-9 (= 9.2.1-29),
 gcc-9-base (= 9.2.1-29),
 gettext (= 0.19.8.1-10),
 gettext-base (= 0.19.8.1-10),
 golang-1.13-go (= 1.13.8-1),
 golang-1.13-src (= 1.13.8-1),
 golang-any (= 2:1.13~1),
 golang-github-burntsushi-toml-dev (= 0.3.1-1),
 golang-github-davecgh-go-spew-dev (= 1.1.1-2),
 golang-github-kr-pretty-dev (= 0.1.0-1),
 golang-github-kr-pty-dev (= 1.1.6-1),
 golang-github-kr-text-dev (= 0.1.0-1),
 golang-go (= 2:1.13~1),
 golang-gopkg-check.v1-dev (= 0.0+git20180628.788fd78-1),
 golang-gopkg-yaml.v2-dev (= 2.2.8-1),
 golang-src (= 2:1.13~1),
 grep (= 3.4-1),
 groff-base (= 1.22.4-4),
 gzip (= 1.9-3+b1),
 hostname (= 3.23),
 init-system-helpers (= 1.57),
 intltool-debian (= 0.35.0+20060710.5),
 lib32gcc-s1 (= 10-20200222-1),
 lib32gcc1 (= 1:10-20200222-1),
 lib32stdc++6 (= 10-20200222-1),
 libacl1 (= 2.2.53-5),
 libarchive-zip-perl (= 1.67-1),
 libasan5 (= 9.2.1-29),
 libatomic1 (= 10-20200222-1),
 libattr1 (= 1:2.4.48-5),
 libaudit-common (= 1:2.8.5-2),
 libaudit1 (= 1:2.8.5-2+b1),
 libbinutils (= 2.34-3),
 libblkid1 (= 2.34-0.1),
 libbsd0 (= 0.10.0-1),
 libbz2-1.0 (= 1.0.8-2),
 libc-bin (= 2.29-10),
 libc-dev-bin (= 2.29-10),
 libc6 (= 2.29-10),
 libc6-dev (= 2.29-10),
 libc6-i386 (= 2.29-10),
 libcap-ng0 (= 0.7.9-2.1+b1),
 libcc1-0 (= 10-20200222-1),
 libclang-common-8-dev (= 1:8.0.1-7),
 libclang1-8 (= 1:8.0.1-7),
 libcroco3 (= 0.6.13-1),
 libcrypt-dev (= 1:4.4.10-10),
 libcrypt1 (= 1:4.4.10-10),
 libctf-nobfd0 (= 2.34-3),
 libctf0 (= 2.34-3),
 libdb5.3 (= 5.3.28+dfsg1-0.6),
 libdebconfclient0 (= 0.251),
 libdebhelper-perl (= 12.9),
 libdpkg-perl (= 1.19.7),
 libedit2 (= 3.1-20191231-1),
 libelf1 (= 0.176-1.1),
 libfdisk1 (= 2.34-0.1),
 libffi7 (= 3.3-3),
 libfile-stripnondeterminism-perl (= 1.6.3-2),
 libgc1c2 (= 1:7.6.4-0.4),
 libgcc-8-dev (= 8.3.0-29),
 libgcc-9-dev (= 9.2.1-29),
 libgcc-s1 (= 10-20200222-1),
 libgcc1 (= 1:10-20200222-1),
 libgcrypt20 (= 1.8.5-5),
 libgdbm-compat4 (= 1.18.1-5),
 libgdbm6 (= 1.18.1-5),
 libglib2.0-0 (= 2.62.4-2),
 libgmp10 (= 2:6.2.0+dfsg-4),
 libgomp1 (= 10-20200222-1),
 libgpg-error0 (= 1.37-1),
 libicu63 (= 63.2-2),
 libisl22 (= 0.22.1-1),
 libitm1 (= 10-20200222-1),
 libllvm8 (= 1:8.0.1-7),
 liblsan0 (= 10-20200222-1),
 liblz4-1 (= 1.9.2-2),
 liblzma5 (= 5.2.4-1+b1),
 libmagic-mgc (= 1:5.38-4),
 libmagic1 (= 1:5.38-4),
 libmount1 (= 2.34-0.1),
 libmpc3 (= 1.1.0-1),
 libmpfr6 (= 4.0.2-1),
 libmpx2 (= 8.3.0-29),
 libncursesw6 (= 6.1+20191019-1),
 libobjc-8-dev (= 8.3.0-29),
 libobjc4 (= 10-20200222-1),
 libpam-modules (= 1.3.1-5),
 libpam-modules-bin (= 1.3.1-5),
 libpam-runtime (= 1.3.1-5),
 libpam0g (= 1.3.1-5),
 libpcre2-8-0 (= 10.34-7),
 libpcre3 (= 2:8.39-12+b1),
 libperl5.30 (= 5.30.0-9),
 libpipeline1 (= 1.5.2-2),
 libquadmath0 (= 10-20200222-1),
 libseccomp2 (= 2.4.2-2),
 libselinux1 (= 3.0-1+b1),
 libsigsegv2 (= 2.12-2),
 libsmartcols1 (= 2.34-0.1),
 libstdc++-8-dev (= 8.3.0-29),
 libstdc++-9-dev (= 9.2.1-29),
 libstdc++6 (= 10-20200222-1),
 libsub-override-perl (= 0.09-2),
 libsystemd0 (= 244.3-1),
 libtinfo6 (= 6.1+20191019-1),
 libtool (= 2.4.6-13),
 libtsan0 (= 10-20200222-1),
 libubsan1 (= 10-20200222-1),
 libuchardet0 (= 0.0.6-3),
 libudev1 (= 244.3-1),
 libunistring2 (= 0.9.10-2),
 libuuid1 (= 2.34-0.1),
 libxml2 (= 2.9.10+dfsg-3),
 linux-libc-dev (= 5.4.19-1),
 login (= 1:4.8.1-1),
 lsb-base (= 11.1.0),
 m4 (= 1.4.18-4),
 make (= 4.2.1-1.2),
 man-db (= 2.9.0-2),
 mawk (= 1.3.4.20200120-2),
 ncurses-base (= 6.1+20191019-1),
 ncurses-bin (= 6.1+20191019-1),
 patch (= 2.7.6-6),
 perl (= 5.30.0-9),
 perl-base (= 5.30.0-9),
 perl-modules-5.30 (= 5.30.0-9),
 po-debconf (= 1.0.21),
 sed (= 4.7-1),
 sensible-utils (= 0.0.12+nmu1),
 sysvinit-utils (= 2.96-2.1),
 tar (= 1.30+dfsg-6+b1),
 util-linux (= 2.34-0.1),
 xz-utils (= 5.2.4-1+b1),
 zlib1g (= 1:1.2.11.dfsg-1.2)
Environment:
 DEB_BUILD_OPTIONS="parallel=4"
 LANG="C.UTF-8"
 LC_ALL="C.UTF-8"
 SOURCE_DATE_EPOCH="1582286349"


+------------------------------------------------------------------------------+
| Package contents                                                             |
+------------------------------------------------------------------------------+


golang-github-pelletier-go-toml-dev_1.6.0-1_all.deb
---------------------------------------------------

 new Debian package, version 2.0.
 size 66604 bytes: control archive=2036 bytes.
     774 bytes,    19 lines      control              
    5124 bytes,    51 lines      md5sums              
 Package: golang-github-pelletier-go-toml-dev
 Source: golang-github-pelletier-go-toml
 Version: 1.6.0-1
 Architecture: all
 Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
 Installed-Size: 372
 Depends: golang-github-burntsushi-toml-dev, golang-github-davecgh-go-spew-dev, golang-gopkg-yaml.v2-dev (>= 2.2.4~)
 Section: devel
 Priority: optional
 Homepage: https://github.com/pelletier/go-toml
 Description: Go library for the TOML language
  This library supports TOML (Tom's Obvious, Minimal Language)
  version 0.5.0.
  .
  TOML aims to be a minimal configuration file format that's
  easy to read due to obvious semantics. TOML is designed
  to map unambiguously to a hash table. TOML should be
  easy to parse into data structures in a wide variety
  of languages.

drwxr-xr-x root/root         0 2020-02-21 11:59 ./
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/doc/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/doc/golang-github-pelletier-go-toml-dev/
-rw-r--r-- root/root      1597 2020-02-21 11:59 ./usr/share/doc/golang-github-pelletier-go-toml-dev/changelog.Debian.gz
-rw-r--r-- root/root      1449 2019-07-12 00:31 ./usr/share/doc/golang-github-pelletier-go-toml-dev/copyright
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/
-rw-r--r-- root/root      5242 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/benchmark.toml
-rw-r--r-- root/root      3081 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/benchmark_test.go
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/jsontoml/
-rw-r--r-- root/root      1740 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/jsontoml/main.go
-rw-r--r-- root/root      2100 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/jsontoml/main_test.go
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomljson/
-rw-r--r-- root/root      1589 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomljson/main.go
-rw-r--r-- root/root      2100 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomljson/main_test.go
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomll/
-rw-r--r-- root/root      1563 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomll/main.go
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomltestgen/
-rw-r--r-- root/root      4685 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/cmd/tomltestgen/main.go
-rw-r--r-- root/root       789 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/doc.go
-rw-r--r-- root/root      2359 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/doc_test.go
-rw-r--r-- root/root       645 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/example-crlf.toml
-rw-r--r-- root/root       616 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/example.toml
-rw-r--r-- root/root       472 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/fuzz.go
-rw-r--r-- root/root       153 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/go.mod
-rw-r--r-- root/root       903 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/go.sum
-rw-r--r-- root/root      2515 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/keysparsing.go
-rw-r--r-- root/root      2121 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/keysparsing_test.go
-rw-r--r-- root/root     15299 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/lexer.go
-rw-r--r-- root/root     25098 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/lexer_test.go
-rw-r--r-- root/root      9919 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/localtime.go
-rw-r--r-- root/root     12742 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/localtime_test.go
-rw-r--r-- root/root     24244 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/marshal.go
-rw-r--r-- root/root       622 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/marshal_OrderPreserve_test.toml
-rw-r--r-- root/root     50248 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/marshal_test.go
-rw-r--r-- root/root       622 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/marshal_test.toml
-rw-r--r-- root/root     11600 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/parser.go
-rw-r--r-- root/root     26650 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/parser_test.go
-rw-r--r-- root/root       744 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/position.go
-rw-r--r-- root/root       454 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/position_test.go
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/
-rw-r--r-- root/root      6285 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/doc.go
-rw-r--r-- root/root      6435 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/lexer.go
-rw-r--r-- root/root      4897 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/lexer_test.go
-rw-r--r-- root/root      4820 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/match.go
-rw-r--r-- root/root      3527 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/match_test.go
-rw-r--r-- root/root      6122 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/parser.go
-rw-r--r-- root/root     10144 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/parser_test.go
-rw-r--r-- root/root      4147 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/query.go
-rw-r--r-- root/root      3779 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/query_test.go
-rw-r--r-- root/root      1358 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/query/tokens.go
-rw-r--r-- root/root      1946 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/token.go
-rw-r--r-- root/root      1651 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/token_test.go
-rw-r--r-- root/root     10356 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/toml.go
-rw-r--r-- root/root      3764 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/toml_test.go
-rw-r--r-- root/root      3060 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/toml_testgen_support_test.go
-rw-r--r-- root/root     22508 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/toml_testgen_test.go
-rw-r--r-- root/root      4048 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/tomltree_create.go
-rw-r--r-- root/root      3417 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/tomltree_create_test.go
-rw-r--r-- root/root     11504 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/tomltree_write.go
-rw-r--r-- root/root      9940 2020-02-21 11:59 ./usr/share/gocode/src/github.com/pelletier/go-toml/tomltree_write_test.go


golang-github-pelletier-go-toml_1.6.0-1_amd64.deb
-------------------------------------------------

 new Debian package, version 2.0.
 size 2792068 bytes: control archive=972 bytes.
     780 bytes,    22 lines      control              
     474 bytes,     7 lines      md5sums              
 Package: golang-github-pelletier-go-toml
 Version: 1.6.0-1
 Architecture: amd64
 Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
 Installed-Size: 11764
 Depends: libc6 (>= 2.4)
 Built-Using: golang-1.13 (= 1.13.8-1)
 Section: devel
 Priority: optional
 Homepage: https://github.com/pelletier/go-toml
 Description: Go library for the TOML language -- commandline programs
  This library supports TOML (Tom's Obvious, Minimal Language)
  version 0.5.0.
  .
  TOML aims to be a minimal configuration file format that's
  easy to read due to obvious semantics. TOML is designed
  to map unambiguously to a hash table. TOML should be
  easy to parse into data structures in a wide variety
  of languages.
  .
  This package contains the two commandline programs tomll
  and tomljson.

drwxr-xr-x root/root         0 2020-02-21 11:59 ./
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/bin/
-rwxr-xr-x root/root   2399224 2020-02-21 11:59 ./usr/bin/tomljson
-rwxr-xr-x root/root   2226520 2020-02-21 11:59 ./usr/bin/tomll
-rwxr-xr-x root/root   7403960 2020-02-21 11:59 ./usr/bin/tomltestgen
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/doc/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/doc/golang-github-pelletier-go-toml/
-rw-r--r-- root/root      1597 2020-02-21 11:59 ./usr/share/doc/golang-github-pelletier-go-toml/changelog.Debian.gz
-rw-r--r-- root/root      1449 2019-07-12 00:31 ./usr/share/doc/golang-github-pelletier-go-toml/copyright
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/man/
drwxr-xr-x root/root         0 2020-02-21 11:59 ./usr/share/man/man1/
-rw-r--r-- root/root       467 2020-02-21 11:59 ./usr/share/man/man1/tomljson.1.gz
-rw-r--r-- root/root       502 2020-02-21 11:59 ./usr/share/man/man1/tomll.1.gz


+------------------------------------------------------------------------------+
| Post Build                                                                   |
+------------------------------------------------------------------------------+


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: binary
Build-Space: 106900
Build-Time: 54
Distribution: unstable
Host Architecture: amd64
Install-Time: 32
Job: golang-github-pelletier-go-toml_1.6.0-1
Machine Architecture: amd64
Package: golang-github-pelletier-go-toml
Package-Time: 120
Source-Version: 1.6.0-1
Space: 106900
Status: successful
Version: 1.6.0-1
--------------------------------------------------------------------------------
Finished at 2020-02-24T21:33:38Z
Build needed 00:02:00, 106900k disk space
DC-Status: OK 125.122539013s
DC-Time-Estimation: 125.122539013 versus expected 270 (r/m: 1.1578845996079692 ; m: 125.122539013)

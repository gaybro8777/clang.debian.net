DC-Build-Header: eurephia 1.1.0-6 / 2020-02-25 18:53:32 +0000
DC-Task: type:rebuild-binarch-only source:eurephia version:1.1.0-6 chroot:unstable esttime:53 logfile:/tmp/eurephia_1.1.0-6_unstable_clang8.log modes:clang8:binarch-only
DC-Sbuild-call: su user42 -c 'sbuild -n --arch-any --apt-update -d unstable -v --no-run-lintian --chroot-setup-commands=/tmp/clang8 eurephia_1.1.0-6'
sbuild (Debian sbuild) 0.78.1 (09 February 2019) on ip-172-31-6-46.eu-central-1.compute.internal

+==============================================================================+
| eurephia 1.1.0-6 (amd64)                     Tue, 25 Feb 2020 18:53:32 +0000 |
+==============================================================================+

Package: eurephia
Version: 1.1.0-6
Source Version: 1.1.0-6
Distribution: unstable
Machine Architecture: amd64
Host Architecture: amd64
Build Architecture: amd64
Build Type: binary

I: NOTICE: Log filtering will replace 'var/run/schroot/mount/sid-amd64-sbuild-d7e3bef9-eb24-4c33-aac1-e78aa49bb979' with '<<CHROOT>>'

+------------------------------------------------------------------------------+
| Chroot Setup Commands                                                        |
+------------------------------------------------------------------------------+


/tmp/clang8
-----------

+ echo 'Entering customization script...'
Entering customization script...
+ CLANG_VERSION=8
+ echo 'Install of clang-8'
Install of clang-8
+ apt-get update
Get:1 http://127.0.0.1:12990/debian sid InRelease [142 kB]
Get:2 http://127.0.0.1:12990/debian sid/main Sources.diff/Index [27.9 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 Packages.diff/Index [27.9 kB]
Get:4 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-0823.32.pdiff [11.0 kB]
Get:5 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-1420.34.pdiff [30.2 kB]
Get:6 http://127.0.0.1:12990/debian sid/main Sources 2020-02-24-2014.03.pdiff [16.9 kB]
Get:7 http://127.0.0.1:12990/debian sid/main Sources 2020-02-25-0213.11.pdiff [23.2 kB]
Get:8 http://127.0.0.1:12990/debian sid/main Sources 2020-02-25-0815.22.pdiff [9222 B]
Get:9 http://127.0.0.1:12990/debian sid/main Sources 2020-02-25-1413.15.pdiff [16.3 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-0823.32.pdiff [15.5 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-1420.34.pdiff [27.5 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-24-2014.03.pdiff [21.6 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-25-0213.11.pdiff [35.0 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-25-0815.22.pdiff [20.1 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-25-1413.15.pdiff [18.4 kB]
Get:9 http://127.0.0.1:12990/debian sid/main Sources 2020-02-25-1413.15.pdiff [16.3 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 Packages 2020-02-25-1413.15.pdiff [18.4 kB]
Get:16 http://127.0.0.1:12990/debian sid/main Translation-en [6195 kB]
Fetched 6638 kB in 2s (3923 kB/s)
Reading package lists...
+ apt-get install --yes --no-install-recommends --force-yes clang-8 libomp-8-dev libobjc-9-dev
Reading package lists...
Building dependency tree...
The following additional packages will be installed:
  cpp-9 g++-9 gcc-8-base gcc-9 gcc-9-base lib32gcc-s1 lib32gcc1 lib32stdc++6
  libasan5 libbsd0 libc6-i386 libclang-common-8-dev libclang1-8 libedit2
  libgc1c2 libgcc-8-dev libgcc-9-dev libllvm8 libmpx2 libobjc-8-dev libobjc4
  libomp5-8 libstdc++-8-dev libstdc++-9-dev
Suggested packages:
  clang-8-doc gcc-9-locales g++-9-multilib gcc-9-doc gcc-9-multilib
  libomp-8-doc libstdc++-8-doc libstdc++-9-doc
Recommended packages:
  llvm-8-dev python3
The following NEW packages will be installed:
  clang-8 gcc-8-base lib32gcc-s1 lib32gcc1 lib32stdc++6 libbsd0 libc6-i386
  libclang-common-8-dev libclang1-8 libedit2 libgc1c2 libgcc-8-dev libllvm8
  libmpx2 libobjc-8-dev libobjc-9-dev libobjc4 libomp-8-dev libomp5-8
  libstdc++-8-dev
The following packages will be upgraded:
  cpp-9 g++-9 gcc-9 gcc-9-base libasan5 libgcc-9-dev libstdc++-9-dev
7 upgraded, 20 newly installed, 0 to remove and 3 not upgraded.
Need to get 74.9 MB of archives.
After this operation, 223 MB of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 libasan5 amd64 9.2.1-30 [389 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 g++-9 amd64 9.2.1-30 [10.7 MB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 gcc-9 amd64 9.2.1-30 [10.0 MB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 libstdc++-9-dev amd64 9.2.1-30 [1697 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libgcc-9-dev amd64 9.2.1-30 [2349 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 cpp-9 amd64 9.2.1-30 [9711 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 gcc-9-base amd64 9.2.1-30 [196 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libbsd0 amd64 0.10.0-1 [107 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libedit2 amd64 3.1-20191231-1 [95.4 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libllvm8 amd64 1:8.0.1-7 [13.8 MB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 gcc-8-base amd64 8.3.0-29 [194 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 libmpx2 amd64 8.3.0-29 [11.4 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 libgcc-8-dev amd64 8.3.0-29 [2297 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 libstdc++-8-dev amd64 8.3.0-29 [1543 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 libgc1c2 amd64 1:7.6.4-0.4 [224 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 libobjc4 amd64 10-20200222-1 [41.6 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libobjc-8-dev amd64 8.3.0-29 [227 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libc6-i386 amd64 2.29-10 [2918 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc-s1 amd64 10-20200222-1 [49.4 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 lib32gcc1 amd64 1:10-20200222-1 [1104 B]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 lib32stdc++6 amd64 10-20200222-1 [510 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 libclang-common-8-dev amd64 1:8.0.1-7 [2989 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 libclang1-8 amd64 1:8.0.1-7 [6244 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 clang-8 amd64 1:8.0.1-7 [8010 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 libobjc-9-dev amd64 9.2.1-30 [219 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 libomp5-8 amd64 1:8.0.1-7 [331 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 libomp-8-dev amd64 1:8.0.1-7 [62.3 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 74.9 MB in 1s (104 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 12119 files and directories currently installed.)
Preparing to unpack .../00-libasan5_9.2.1-30_amd64.deb ...
Unpacking libasan5:amd64 (9.2.1-30) over (9.2.1-29) ...
Preparing to unpack .../01-g++-9_9.2.1-30_amd64.deb ...
Unpacking g++-9 (9.2.1-30) over (9.2.1-29) ...
Preparing to unpack .../02-gcc-9_9.2.1-30_amd64.deb ...
Unpacking gcc-9 (9.2.1-30) over (9.2.1-29) ...
Preparing to unpack .../03-libstdc++-9-dev_9.2.1-30_amd64.deb ...
Unpacking libstdc++-9-dev:amd64 (9.2.1-30) over (9.2.1-29) ...
Preparing to unpack .../04-libgcc-9-dev_9.2.1-30_amd64.deb ...
Unpacking libgcc-9-dev:amd64 (9.2.1-30) over (9.2.1-29) ...
Preparing to unpack .../05-cpp-9_9.2.1-30_amd64.deb ...
Unpacking cpp-9 (9.2.1-30) over (9.2.1-29) ...
Preparing to unpack .../06-gcc-9-base_9.2.1-30_amd64.deb ...
Unpacking gcc-9-base:amd64 (9.2.1-30) over (9.2.1-29) ...
Selecting previously unselected package libbsd0:amd64.
Preparing to unpack .../07-libbsd0_0.10.0-1_amd64.deb ...
Unpacking libbsd0:amd64 (0.10.0-1) ...
Selecting previously unselected package libedit2:amd64.
Preparing to unpack .../08-libedit2_3.1-20191231-1_amd64.deb ...
Unpacking libedit2:amd64 (3.1-20191231-1) ...
Selecting previously unselected package libllvm8:amd64.
Preparing to unpack .../09-libllvm8_1%3a8.0.1-7_amd64.deb ...
Unpacking libllvm8:amd64 (1:8.0.1-7) ...
Selecting previously unselected package gcc-8-base:amd64.
Preparing to unpack .../10-gcc-8-base_8.3.0-29_amd64.deb ...
Unpacking gcc-8-base:amd64 (8.3.0-29) ...
Selecting previously unselected package libmpx2:amd64.
Preparing to unpack .../11-libmpx2_8.3.0-29_amd64.deb ...
Unpacking libmpx2:amd64 (8.3.0-29) ...
Selecting previously unselected package libgcc-8-dev:amd64.
Preparing to unpack .../12-libgcc-8-dev_8.3.0-29_amd64.deb ...
Unpacking libgcc-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libstdc++-8-dev:amd64.
Preparing to unpack .../13-libstdc++-8-dev_8.3.0-29_amd64.deb ...
Unpacking libstdc++-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libgc1c2:amd64.
Preparing to unpack .../14-libgc1c2_1%3a7.6.4-0.4_amd64.deb ...
Unpacking libgc1c2:amd64 (1:7.6.4-0.4) ...
Selecting previously unselected package libobjc4:amd64.
Preparing to unpack .../15-libobjc4_10-20200222-1_amd64.deb ...
Unpacking libobjc4:amd64 (10-20200222-1) ...
Selecting previously unselected package libobjc-8-dev:amd64.
Preparing to unpack .../16-libobjc-8-dev_8.3.0-29_amd64.deb ...
Unpacking libobjc-8-dev:amd64 (8.3.0-29) ...
Selecting previously unselected package libc6-i386.
Preparing to unpack .../17-libc6-i386_2.29-10_amd64.deb ...
Unpacking libc6-i386 (2.29-10) ...
Selecting previously unselected package lib32gcc-s1.
Preparing to unpack .../18-lib32gcc-s1_10-20200222-1_amd64.deb ...
Unpacking lib32gcc-s1 (10-20200222-1) ...
Selecting previously unselected package lib32gcc1.
Preparing to unpack .../19-lib32gcc1_1%3a10-20200222-1_amd64.deb ...
Unpacking lib32gcc1 (1:10-20200222-1) ...
Selecting previously unselected package lib32stdc++6.
Preparing to unpack .../20-lib32stdc++6_10-20200222-1_amd64.deb ...
Unpacking lib32stdc++6 (10-20200222-1) ...
Selecting previously unselected package libclang-common-8-dev.
Preparing to unpack .../21-libclang-common-8-dev_1%3a8.0.1-7_amd64.deb ...
Unpacking libclang-common-8-dev (1:8.0.1-7) ...
Selecting previously unselected package libclang1-8.
Preparing to unpack .../22-libclang1-8_1%3a8.0.1-7_amd64.deb ...
Unpacking libclang1-8 (1:8.0.1-7) ...
Selecting previously unselected package clang-8.
Preparing to unpack .../23-clang-8_1%3a8.0.1-7_amd64.deb ...
Unpacking clang-8 (1:8.0.1-7) ...
Selecting previously unselected package libobjc-9-dev:amd64.
Preparing to unpack .../24-libobjc-9-dev_9.2.1-30_amd64.deb ...
Unpacking libobjc-9-dev:amd64 (9.2.1-30) ...
Selecting previously unselected package libomp5-8:amd64.
Preparing to unpack .../25-libomp5-8_1%3a8.0.1-7_amd64.deb ...
Unpacking libomp5-8:amd64 (1:8.0.1-7) ...
Selecting previously unselected package libomp-8-dev.
Preparing to unpack .../26-libomp-8-dev_1%3a8.0.1-7_amd64.deb ...
Unpacking libomp-8-dev (1:8.0.1-7) ...
Setting up libgc1c2:amd64 (1:7.6.4-0.4) ...
Setting up libobjc4:amd64 (10-20200222-1) ...
Setting up gcc-8-base:amd64 (8.3.0-29) ...
Setting up libmpx2:amd64 (8.3.0-29) ...
Setting up libc6-i386 (2.29-10) ...
Setting up libbsd0:amd64 (0.10.0-1) ...
Setting up libomp5-8:amd64 (1:8.0.1-7) ...
Setting up libomp-8-dev (1:8.0.1-7) ...
Setting up gcc-9-base:amd64 (9.2.1-30) ...
Setting up libedit2:amd64 (3.1-20191231-1) ...
Setting up libasan5:amd64 (9.2.1-30) ...
Setting up lib32gcc-s1 (10-20200222-1) ...
Setting up libgcc-8-dev:amd64 (8.3.0-29) ...
Setting up cpp-9 (9.2.1-30) ...
Setting up libstdc++-8-dev:amd64 (8.3.0-29) ...
Setting up libllvm8:amd64 (1:8.0.1-7) ...
Setting up libclang1-8 (1:8.0.1-7) ...
Setting up lib32gcc1 (1:10-20200222-1) ...
Setting up libgcc-9-dev:amd64 (9.2.1-30) ...
Setting up libobjc-8-dev:amd64 (8.3.0-29) ...
Setting up lib32stdc++6 (10-20200222-1) ...
Setting up libobjc-9-dev:amd64 (9.2.1-30) ...
Setting up gcc-9 (9.2.1-30) ...
Setting up libstdc++-9-dev:amd64 (9.2.1-30) ...
Setting up libclang-common-8-dev (1:8.0.1-7) ...
Setting up g++-9 (9.2.1-30) ...
Setting up clang-8 (1:8.0.1-7) ...
Processing triggers for libc-bin (2.29-10) ...
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ echo 'Replace gcc, g++ & cpp by clang'
Replace gcc, g++ & cpp by clang
+ VERSIONS='4.6 4.7 4.8 4.9 5 6 7 8 9 10'
+ cd /usr/bin
+ for VERSION in $VERSIONS
+ rm -f g++-4.6 gcc-4.6 cpp-4.6 gcc
+ ln -s clang++-8 g++-4.6
+ ln -s clang-8 gcc-4.6
+ ln -s clang-8 cpp-4.6
+ ln -s clang-8 gcc
+ echo 'gcc-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.7 gcc-4.7 cpp-4.7 gcc
+ ln -s clang++-8 g++-4.7
+ ln -s clang-8 gcc-4.7
+ ln -s clang-8 cpp-4.7
+ ln -s clang-8 gcc
+ echo 'gcc-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.8 gcc-4.8 cpp-4.8 gcc
+ ln -s clang++-8 g++-4.8
+ ln -s clang-8 gcc-4.8
+ ln -s clang-8 cpp-4.8
+ ln -s clang-8 gcc
+ echo 'gcc-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-4.9 gcc-4.9 cpp-4.9 gcc
+ ln -s clang++-8 g++-4.9
+ ln -s clang-8 gcc-4.9
+ ln -s clang-8 cpp-4.9
+ ln -s clang-8 gcc
+ echo 'gcc-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-4.9 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-4.9
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-5 gcc-5 cpp-5 gcc
+ ln -s clang++-8 g++-5
+ ln -s clang-8 gcc-5
+ ln -s clang-8 cpp-5
+ ln -s clang-8 gcc
+ echo 'gcc-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-5 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-5
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-6 gcc-6 cpp-6 gcc
+ ln -s clang++-8 g++-6
+ ln -s clang-8 gcc-6
+ ln -s clang-8 cpp-6
+ ln -s clang-8 gcc
+ echo 'gcc-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-6 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-6
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-7 gcc-7 cpp-7 gcc
+ ln -s clang++-8 g++-7
+ ln -s clang-8 gcc-7
+ ln -s clang-8 cpp-7
+ ln -s clang-8 gcc
+ echo 'gcc-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-7 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-7
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-8 gcc-8 cpp-8 gcc
+ ln -s clang++-8 g++-8
+ ln -s clang-8 gcc-8
+ ln -s clang-8 cpp-8
+ ln -s clang-8 gcc
+ echo 'gcc-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-8 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-8
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ for VERSION in $VERSIONS
+ rm -f g++-9 gcc-9 cpp-9 gcc
+ ln -s clang++-8 g++-9
+ ln -s clang-8 gcc-9
+ ln -s clang-8 cpp-9
+ ln -s clang-8 gcc
+ echo 'gcc-9 hold'
+ dpkg --set-selections
+ echo 'g++-9 hold'
+ dpkg --set-selections
+ for VERSION in $VERSIONS
+ rm -f g++-10 gcc-10 cpp-10 gcc
+ ln -s clang++-8 g++-10
+ ln -s clang-8 gcc-10
+ ln -s clang-8 cpp-10
+ ln -s clang-8 gcc
+ echo 'gcc-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: gcc-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ echo 'g++-10 hold'
+ dpkg --set-selections
dpkg: warning: package not in status nor available database at line 1: g++-10
dpkg: warning: found unknown packages; this might mean the available database
is outdated, and needs to be updated through a frontend method;
please see the FAQ <https://wiki.debian.org/Teams/Dpkg/FAQ>
+ cd -
/build/eurephia-Setx1U
+ echo 'Check if gcc, g++ & cpp are actually clang'
Check if gcc, g++ & cpp are actually clang
+ gcc --version
+ grep clang
+ cpp --version
+ grep clang
+ g++ --version
+ grep clang

I: Finished running '/tmp/clang8'.

Finished processing commands.
--------------------------------------------------------------------------------
I: NOTICE: Log filtering will replace 'build/eurephia-Setx1U/resolver-qGdLHe' with '<<RESOLVERDIR>>'

+------------------------------------------------------------------------------+
| Update chroot                                                                |
+------------------------------------------------------------------------------+

Hit:1 http://127.0.0.1:12990/debian sid InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  bash libgmp10 zlib1g
3 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1722 kB of archives.
After this operation, 4096 B of additional disk space will be used.
Get:1 http://127.0.0.1:12990/debian sid/main amd64 bash amd64 5.0-6 [1379 kB]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 libgmp10 amd64 2:6.2.0+dfsg-4 [253 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 zlib1g amd64 1:1.2.11.dfsg-2 [90.4 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1722 kB in 0s (73.1 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13887 files and directories currently installed.)
Preparing to unpack .../archives/bash_5.0-6_amd64.deb ...
Unpacking bash (5.0-6) over (5.0-5) ...
Setting up bash (5.0-6) ...
update-alternatives: using /usr/share/man/man7/bash-builtins.7.gz to provide /usr/share/man/man7/builtins.7.gz (builtins.7.gz) in auto mode
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13887 files and directories currently installed.)
Preparing to unpack .../libgmp10_2%3a6.2.0+dfsg-4_amd64.deb ...
Unpacking libgmp10:amd64 (2:6.2.0+dfsg-4) over (2:6.2.0+dfsg-3) ...
Setting up libgmp10:amd64 (2:6.2.0+dfsg-4) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 13887 files and directories currently installed.)
Preparing to unpack .../zlib1g_1%3a1.2.11.dfsg-2_amd64.deb ...
Unpacking zlib1g:amd64 (1:1.2.11.dfsg-2) over (1:1.2.11.dfsg-1.2) ...
Setting up zlib1g:amd64 (1:1.2.11.dfsg-2) ...
Processing triggers for libc-bin (2.29-10) ...

+------------------------------------------------------------------------------+
| Fetch source files                                                           |
+------------------------------------------------------------------------------+


Check APT
---------

Checking available source versions...

Download source files with APT
------------------------------

Reading package lists...
Need to get 165 kB of source archives.
Get:1 http://127.0.0.1:12990/debian sid/main eurephia 1.1.0-6 (dsc) [1786 B]
Get:2 http://127.0.0.1:12990/debian sid/main eurephia 1.1.0-6 (tar) [158 kB]
Get:3 http://127.0.0.1:12990/debian sid/main eurephia 1.1.0-6 (diff) [5380 B]
Fetched 165 kB in 0s (2196 kB/s)
Download complete and in download only mode
I: NOTICE: Log filtering will replace 'build/eurephia-Setx1U/eurephia-1.1.0' with '<<PKGBUILDDIR>>'
I: NOTICE: Log filtering will replace 'build/eurephia-Setx1U' with '<<BUILDDIR>>'

+------------------------------------------------------------------------------+
| Install package build dependencies                                           |
+------------------------------------------------------------------------------+


Setup apt archive
-----------------

Merged Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config, build-essential, fakeroot
Filtered Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config, build-essential, fakeroot
dpkg-deb: building package 'sbuild-build-depends-main-dummy' in '/<<RESOLVERDIR>>/apt_archive/sbuild-build-depends-main-dummy.deb'.
Ign:1 copy:/<<RESOLVERDIR>>/apt_archive ./ InRelease
Get:2 copy:/<<RESOLVERDIR>>/apt_archive ./ Release [957 B]
Ign:3 copy:/<<RESOLVERDIR>>/apt_archive ./ Release.gpg
Get:4 copy:/<<RESOLVERDIR>>/apt_archive ./ Sources [411 B]
Get:5 copy:/<<RESOLVERDIR>>/apt_archive ./ Packages [496 B]
Fetched 1864 B in 0s (0 B/s)
Reading package lists...
Reading package lists...

Install main build dependencies (apt-based resolver)
----------------------------------------------------

Installing build dependencies
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils cmake cmake-data
  debhelper dh-autoreconf dh-strip-nondeterminism dwz file gettext
  gettext-base groff-base icu-devtools intltool-debian iproute2
  libarchive-zip-perl libarchive13 libbrotli1 libcap2 libcap2-bin libcroco3
  libcurl4 libdebhelper-perl libelf1 libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libgssapi-krb5-2 libicu-dev
  libicu63 libjsoncpp1 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0
  libldap-2.4-2 libldap-common liblzo2-2 libmagic-mgc libmagic1 libmnl0
  libncurses6 libnghttp2-14 libpipeline1 libpkcs11-helper1 libprocps8 libpsl5
  librhash0 librtmp1 libsasl2-2 libsasl2-modules-db libsigsegv2 libsqlite3-0
  libsqlite3-dev libssh2-1 libssl-dev libssl1.1 libsub-override-perl libtool
  libuchardet0 libuv1 libxml2 libxml2-dev libxslt1-dev libxslt1.1 libxtables12
  m4 man-db openvpn pkg-config po-debconf procps sensible-utils
Suggested packages:
  autoconf-archive gnu-standards autoconf-doc wamerican | wordlist whois
  vacation cmake-doc ninja-build dh-make gettext-doc libasprintf-dev
  libgettextpo-dev groff iproute2-doc lrzip krb5-doc krb5-user icu-doc
  sqlite3-doc libssl-doc libtool-doc gfortran | fortran95-compiler gcj-jdk
  m4-doc apparmor less www-browser openssl resolvconf openvpn-systemd-resolved
  libmail-box-perl
Recommended packages:
  curl | wget | lynx libatm1 libpam-cap ca-certificates libarchive-cpio-perl
  libglib2.0-data shared-mime-info xdg-user-dirs krb5-locales libgpm2
  publicsuffix libsasl2-modules libltdl-dev easy-rsa libmail-sendmail-perl
  psmisc
The following NEW packages will be installed:
  autoconf automake autopoint autotools-dev bsdmainutils cmake cmake-data
  debhelper dh-autoreconf dh-strip-nondeterminism dwz file gettext
  gettext-base groff-base icu-devtools intltool-debian iproute2
  libarchive-zip-perl libarchive13 libbrotli1 libcap2 libcap2-bin libcroco3
  libcurl4 libdebhelper-perl libelf1 libexpat1
  libfile-stripnondeterminism-perl libglib2.0-0 libgssapi-krb5-2 libicu-dev
  libicu63 libjsoncpp1 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0
  libldap-2.4-2 libldap-common liblzo2-2 libmagic-mgc libmagic1 libmnl0
  libncurses6 libnghttp2-14 libpipeline1 libpkcs11-helper1 libprocps8 libpsl5
  librhash0 librtmp1 libsasl2-2 libsasl2-modules-db libsigsegv2 libsqlite3-0
  libsqlite3-dev libssh2-1 libssl-dev libssl1.1 libsub-override-perl libtool
  libuchardet0 libuv1 libxml2 libxml2-dev libxslt1-dev libxslt1.1 libxtables12
  m4 man-db openvpn pkg-config po-debconf procps
  sbuild-build-depends-main-dummy sensible-utils
0 upgraded, 77 newly installed, 0 to remove and 0 not upgraded.
Need to get 45.0 MB of archives.
After this operation, 177 MB of additional disk space will be used.
Get:1 copy:/<<RESOLVERDIR>>/apt_archive ./ sbuild-build-depends-main-dummy 0.invalid.0 [920 B]
Get:2 http://127.0.0.1:12990/debian sid/main amd64 bsdmainutils amd64 11.1.2+b1 [191 kB]
Get:3 http://127.0.0.1:12990/debian sid/main amd64 libuchardet0 amd64 0.0.6-3 [64.9 kB]
Get:4 http://127.0.0.1:12990/debian sid/main amd64 groff-base amd64 1.22.4-4 [919 kB]
Get:5 http://127.0.0.1:12990/debian sid/main amd64 libpipeline1 amd64 1.5.2-2 [33.9 kB]
Get:6 http://127.0.0.1:12990/debian sid/main amd64 man-db amd64 2.9.0-2 [1307 kB]
Get:7 http://127.0.0.1:12990/debian sid/main amd64 libcap2 amd64 1:2.32-1 [20.4 kB]
Get:8 http://127.0.0.1:12990/debian sid/main amd64 libelf1 amd64 0.176-1.1 [161 kB]
Get:9 http://127.0.0.1:12990/debian sid/main amd64 libmnl0 amd64 1.0.4-2+b1 [12.8 kB]
Get:10 http://127.0.0.1:12990/debian sid/main amd64 libxtables12 amd64 1.8.4-3 [78.8 kB]
Get:11 http://127.0.0.1:12990/debian sid/main amd64 libcap2-bin amd64 1:2.32-1 [33.6 kB]
Get:12 http://127.0.0.1:12990/debian sid/main amd64 iproute2 amd64 5.5.0-1 [869 kB]
Get:13 http://127.0.0.1:12990/debian sid/main amd64 libncurses6 amd64 6.1+20191019-1 [102 kB]
Get:14 http://127.0.0.1:12990/debian sid/main amd64 libprocps8 amd64 2:3.3.16-1+b1 [62.8 kB]
Get:15 http://127.0.0.1:12990/debian sid/main amd64 procps amd64 2:3.3.16-1+b1 [263 kB]
Get:16 http://127.0.0.1:12990/debian sid/main amd64 sensible-utils all 0.0.12+nmu1 [16.0 kB]
Get:17 http://127.0.0.1:12990/debian sid/main amd64 libmagic-mgc amd64 1:5.38-4 [262 kB]
Get:18 http://127.0.0.1:12990/debian sid/main amd64 libmagic1 amd64 1:5.38-4 [120 kB]
Get:19 http://127.0.0.1:12990/debian sid/main amd64 file amd64 1:5.38-4 [67.9 kB]
Get:20 http://127.0.0.1:12990/debian sid/main amd64 gettext-base amd64 0.19.8.1-10 [123 kB]
Get:21 http://127.0.0.1:12990/debian sid/main amd64 libsigsegv2 amd64 2.12-2 [32.8 kB]
Get:22 http://127.0.0.1:12990/debian sid/main amd64 m4 amd64 1.4.18-4 [203 kB]
Get:23 http://127.0.0.1:12990/debian sid/main amd64 autoconf all 2.69-11.1 [341 kB]
Get:24 http://127.0.0.1:12990/debian sid/main amd64 autotools-dev all 20180224.1 [77.0 kB]
Get:25 http://127.0.0.1:12990/debian sid/main amd64 automake all 1:1.16.1-4 [771 kB]
Get:26 http://127.0.0.1:12990/debian sid/main amd64 autopoint all 0.19.8.1-10 [435 kB]
Get:27 http://127.0.0.1:12990/debian sid/main amd64 cmake-data all 3.16.3-1 [1628 kB]
Get:28 http://127.0.0.1:12990/debian sid/main amd64 libicu63 amd64 63.2-2 [8301 kB]
Get:29 http://127.0.0.1:12990/debian sid/main amd64 libxml2 amd64 2.9.10+dfsg-3 [709 kB]
Get:30 http://127.0.0.1:12990/debian sid/main amd64 libarchive13 amd64 3.4.0-1+b1 [335 kB]
Get:31 http://127.0.0.1:12990/debian sid/main amd64 libbrotli1 amd64 1.0.7-6 [266 kB]
Get:32 http://127.0.0.1:12990/debian sid/main amd64 libkeyutils1 amd64 1.6.1-2 [15.4 kB]
Get:33 http://127.0.0.1:12990/debian sid/main amd64 libkrb5support0 amd64 1.17-6 [64.6 kB]
Get:34 http://127.0.0.1:12990/debian sid/main amd64 libk5crypto3 amd64 1.17-6 [116 kB]
Get:35 http://127.0.0.1:12990/debian sid/main amd64 libssl1.1 amd64 1.1.1d-2 [1540 kB]
Get:36 http://127.0.0.1:12990/debian sid/main amd64 libkrb5-3 amd64 1.17-6 [366 kB]
Get:37 http://127.0.0.1:12990/debian sid/main amd64 libgssapi-krb5-2 amd64 1.17-6 [156 kB]
Get:38 http://127.0.0.1:12990/debian sid/main amd64 libsasl2-modules-db amd64 2.1.27+dfsg-2 [69.0 kB]
Get:39 http://127.0.0.1:12990/debian sid/main amd64 libsasl2-2 amd64 2.1.27+dfsg-2 [106 kB]
Get:40 http://127.0.0.1:12990/debian sid/main amd64 libldap-common all 2.4.49+dfsg-1 [91.9 kB]
Get:41 http://127.0.0.1:12990/debian sid/main amd64 libldap-2.4-2 amd64 2.4.49+dfsg-1 [226 kB]
Get:42 http://127.0.0.1:12990/debian sid/main amd64 libnghttp2-14 amd64 1.40.0-1 [85.0 kB]
Get:43 http://127.0.0.1:12990/debian sid/main amd64 libpsl5 amd64 0.20.2-2 [53.7 kB]
Get:44 http://127.0.0.1:12990/debian sid/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-2+b1 [60.8 kB]
Get:45 http://127.0.0.1:12990/debian sid/main amd64 libssh2-1 amd64 1.8.0-2.1 [140 kB]
Get:46 http://127.0.0.1:12990/debian sid/main amd64 libcurl4 amd64 7.68.0-1 [321 kB]
Get:47 http://127.0.0.1:12990/debian sid/main amd64 libexpat1 amd64 2.2.9-1 [94.3 kB]
Get:48 http://127.0.0.1:12990/debian sid/main amd64 libjsoncpp1 amd64 1.7.4-3.1 [77.6 kB]
Get:49 http://127.0.0.1:12990/debian sid/main amd64 librhash0 amd64 1.3.9-1 [123 kB]
Get:50 http://127.0.0.1:12990/debian sid/main amd64 libuv1 amd64 1.34.2-1 [127 kB]
Get:51 http://127.0.0.1:12990/debian sid/main amd64 cmake amd64 3.16.3-1 [3673 kB]
Get:52 http://127.0.0.1:12990/debian sid/main amd64 libtool all 2.4.6-13 [513 kB]
Get:53 http://127.0.0.1:12990/debian sid/main amd64 dh-autoreconf all 19 [16.9 kB]
Get:54 http://127.0.0.1:12990/debian sid/main amd64 libdebhelper-perl all 12.9 [183 kB]
Get:55 http://127.0.0.1:12990/debian sid/main amd64 libarchive-zip-perl all 1.67-1 [104 kB]
Get:56 http://127.0.0.1:12990/debian sid/main amd64 libsub-override-perl all 0.09-2 [10.2 kB]
Get:57 http://127.0.0.1:12990/debian sid/main amd64 libfile-stripnondeterminism-perl all 1.6.3-2 [23.7 kB]
Get:58 http://127.0.0.1:12990/debian sid/main amd64 dh-strip-nondeterminism all 1.6.3-2 [14.7 kB]
Get:59 http://127.0.0.1:12990/debian sid/main amd64 dwz amd64 0.13-5 [151 kB]
Get:60 http://127.0.0.1:12990/debian sid/main amd64 libglib2.0-0 amd64 2.62.4-2 [1319 kB]
Get:61 http://127.0.0.1:12990/debian sid/main amd64 libcroco3 amd64 0.6.13-1 [146 kB]
Get:62 http://127.0.0.1:12990/debian sid/main amd64 gettext amd64 0.19.8.1-10 [1303 kB]
Get:63 http://127.0.0.1:12990/debian sid/main amd64 intltool-debian all 0.35.0+20060710.5 [26.8 kB]
Get:64 http://127.0.0.1:12990/debian sid/main amd64 po-debconf all 1.0.21 [248 kB]
Get:65 http://127.0.0.1:12990/debian sid/main amd64 debhelper all 12.9 [994 kB]
Get:66 http://127.0.0.1:12990/debian sid/main amd64 icu-devtools amd64 63.2-2 [189 kB]
Get:67 http://127.0.0.1:12990/debian sid/main amd64 libicu-dev amd64 63.2-2 [9190 kB]
Get:68 http://127.0.0.1:12990/debian sid/main amd64 liblzo2-2 amd64 2.10-2 [56.9 kB]
Get:69 http://127.0.0.1:12990/debian sid/main amd64 libpkcs11-helper1 amd64 1.26-1 [47.4 kB]
Get:70 http://127.0.0.1:12990/debian sid/main amd64 libsqlite3-0 amd64 3.31.1-3 [661 kB]
Get:71 http://127.0.0.1:12990/debian sid/main amd64 libsqlite3-dev amd64 3.31.1-3 [810 kB]
Get:72 http://127.0.0.1:12990/debian sid/main amd64 libssl-dev amd64 1.1.1d-2 [1797 kB]
Get:73 http://127.0.0.1:12990/debian sid/main amd64 libxml2-dev amd64 2.9.10+dfsg-3 [805 kB]
Get:74 http://127.0.0.1:12990/debian sid/main amd64 libxslt1.1 amd64 1.1.34-3 [239 kB]
Get:75 http://127.0.0.1:12990/debian sid/main amd64 libxslt1-dev amd64 1.1.34-3 [329 kB]
Get:76 http://127.0.0.1:12990/debian sid/main amd64 openvpn amd64 2.4.7-1 [490 kB]
Get:77 http://127.0.0.1:12990/debian sid/main amd64 pkg-config amd64 0.29-6 [63.5 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 45.0 MB in 0s (94.9 MB/s)
Selecting previously unselected package bsdmainutils.
(Reading database ... 13887 files and directories currently installed.)
Preparing to unpack .../00-bsdmainutils_11.1.2+b1_amd64.deb ...
Unpacking bsdmainutils (11.1.2+b1) ...
Selecting previously unselected package libuchardet0:amd64.
Preparing to unpack .../01-libuchardet0_0.0.6-3_amd64.deb ...
Unpacking libuchardet0:amd64 (0.0.6-3) ...
Selecting previously unselected package groff-base.
Preparing to unpack .../02-groff-base_1.22.4-4_amd64.deb ...
Unpacking groff-base (1.22.4-4) ...
Selecting previously unselected package libpipeline1:amd64.
Preparing to unpack .../03-libpipeline1_1.5.2-2_amd64.deb ...
Unpacking libpipeline1:amd64 (1.5.2-2) ...
Selecting previously unselected package man-db.
Preparing to unpack .../04-man-db_2.9.0-2_amd64.deb ...
Unpacking man-db (2.9.0-2) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../05-libcap2_1%3a2.32-1_amd64.deb ...
Unpacking libcap2:amd64 (1:2.32-1) ...
Selecting previously unselected package libelf1:amd64.
Preparing to unpack .../06-libelf1_0.176-1.1_amd64.deb ...
Unpacking libelf1:amd64 (0.176-1.1) ...
Selecting previously unselected package libmnl0:amd64.
Preparing to unpack .../07-libmnl0_1.0.4-2+b1_amd64.deb ...
Unpacking libmnl0:amd64 (1.0.4-2+b1) ...
Selecting previously unselected package libxtables12:amd64.
Preparing to unpack .../08-libxtables12_1.8.4-3_amd64.deb ...
Unpacking libxtables12:amd64 (1.8.4-3) ...
Selecting previously unselected package libcap2-bin.
Preparing to unpack .../09-libcap2-bin_1%3a2.32-1_amd64.deb ...
Unpacking libcap2-bin (1:2.32-1) ...
Selecting previously unselected package iproute2.
Preparing to unpack .../10-iproute2_5.5.0-1_amd64.deb ...
Unpacking iproute2 (5.5.0-1) ...
Selecting previously unselected package libncurses6:amd64.
Preparing to unpack .../11-libncurses6_6.1+20191019-1_amd64.deb ...
Unpacking libncurses6:amd64 (6.1+20191019-1) ...
Selecting previously unselected package libprocps8:amd64.
Preparing to unpack .../12-libprocps8_2%3a3.3.16-1+b1_amd64.deb ...
Unpacking libprocps8:amd64 (2:3.3.16-1+b1) ...
Selecting previously unselected package procps.
Preparing to unpack .../13-procps_2%3a3.3.16-1+b1_amd64.deb ...
Unpacking procps (2:3.3.16-1+b1) ...
Selecting previously unselected package sensible-utils.
Preparing to unpack .../14-sensible-utils_0.0.12+nmu1_all.deb ...
Unpacking sensible-utils (0.0.12+nmu1) ...
Selecting previously unselected package libmagic-mgc.
Preparing to unpack .../15-libmagic-mgc_1%3a5.38-4_amd64.deb ...
Unpacking libmagic-mgc (1:5.38-4) ...
Selecting previously unselected package libmagic1:amd64.
Preparing to unpack .../16-libmagic1_1%3a5.38-4_amd64.deb ...
Unpacking libmagic1:amd64 (1:5.38-4) ...
Selecting previously unselected package file.
Preparing to unpack .../17-file_1%3a5.38-4_amd64.deb ...
Unpacking file (1:5.38-4) ...
Selecting previously unselected package gettext-base.
Preparing to unpack .../18-gettext-base_0.19.8.1-10_amd64.deb ...
Unpacking gettext-base (0.19.8.1-10) ...
Selecting previously unselected package libsigsegv2:amd64.
Preparing to unpack .../19-libsigsegv2_2.12-2_amd64.deb ...
Unpacking libsigsegv2:amd64 (2.12-2) ...
Selecting previously unselected package m4.
Preparing to unpack .../20-m4_1.4.18-4_amd64.deb ...
Unpacking m4 (1.4.18-4) ...
Selecting previously unselected package autoconf.
Preparing to unpack .../21-autoconf_2.69-11.1_all.deb ...
Unpacking autoconf (2.69-11.1) ...
Selecting previously unselected package autotools-dev.
Preparing to unpack .../22-autotools-dev_20180224.1_all.deb ...
Unpacking autotools-dev (20180224.1) ...
Selecting previously unselected package automake.
Preparing to unpack .../23-automake_1%3a1.16.1-4_all.deb ...
Unpacking automake (1:1.16.1-4) ...
Selecting previously unselected package autopoint.
Preparing to unpack .../24-autopoint_0.19.8.1-10_all.deb ...
Unpacking autopoint (0.19.8.1-10) ...
Selecting previously unselected package cmake-data.
Preparing to unpack .../25-cmake-data_3.16.3-1_all.deb ...
Unpacking cmake-data (3.16.3-1) ...
Selecting previously unselected package libicu63:amd64.
Preparing to unpack .../26-libicu63_63.2-2_amd64.deb ...
Unpacking libicu63:amd64 (63.2-2) ...
Selecting previously unselected package libxml2:amd64.
Preparing to unpack .../27-libxml2_2.9.10+dfsg-3_amd64.deb ...
Unpacking libxml2:amd64 (2.9.10+dfsg-3) ...
Selecting previously unselected package libarchive13:amd64.
Preparing to unpack .../28-libarchive13_3.4.0-1+b1_amd64.deb ...
Unpacking libarchive13:amd64 (3.4.0-1+b1) ...
Selecting previously unselected package libbrotli1:amd64.
Preparing to unpack .../29-libbrotli1_1.0.7-6_amd64.deb ...
Unpacking libbrotli1:amd64 (1.0.7-6) ...
Selecting previously unselected package libkeyutils1:amd64.
Preparing to unpack .../30-libkeyutils1_1.6.1-2_amd64.deb ...
Unpacking libkeyutils1:amd64 (1.6.1-2) ...
Selecting previously unselected package libkrb5support0:amd64.
Preparing to unpack .../31-libkrb5support0_1.17-6_amd64.deb ...
Unpacking libkrb5support0:amd64 (1.17-6) ...
Selecting previously unselected package libk5crypto3:amd64.
Preparing to unpack .../32-libk5crypto3_1.17-6_amd64.deb ...
Unpacking libk5crypto3:amd64 (1.17-6) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../33-libssl1.1_1.1.1d-2_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1d-2) ...
Selecting previously unselected package libkrb5-3:amd64.
Preparing to unpack .../34-libkrb5-3_1.17-6_amd64.deb ...
Unpacking libkrb5-3:amd64 (1.17-6) ...
Selecting previously unselected package libgssapi-krb5-2:amd64.
Preparing to unpack .../35-libgssapi-krb5-2_1.17-6_amd64.deb ...
Unpacking libgssapi-krb5-2:amd64 (1.17-6) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../36-libsasl2-modules-db_2.1.27+dfsg-2_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.27+dfsg-2) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../37-libsasl2-2_2.1.27+dfsg-2_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.27+dfsg-2) ...
Selecting previously unselected package libldap-common.
Preparing to unpack .../38-libldap-common_2.4.49+dfsg-1_all.deb ...
Unpacking libldap-common (2.4.49+dfsg-1) ...
Selecting previously unselected package libldap-2.4-2:amd64.
Preparing to unpack .../39-libldap-2.4-2_2.4.49+dfsg-1_amd64.deb ...
Unpacking libldap-2.4-2:amd64 (2.4.49+dfsg-1) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../40-libnghttp2-14_1.40.0-1_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.40.0-1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../41-libpsl5_0.20.2-2_amd64.deb ...
Unpacking libpsl5:amd64 (0.20.2-2) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../42-librtmp1_2.4+20151223.gitfa8646d.1-2+b1_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b1) ...
Selecting previously unselected package libssh2-1:amd64.
Preparing to unpack .../43-libssh2-1_1.8.0-2.1_amd64.deb ...
Unpacking libssh2-1:amd64 (1.8.0-2.1) ...
Selecting previously unselected package libcurl4:amd64.
Preparing to unpack .../44-libcurl4_7.68.0-1_amd64.deb ...
Unpacking libcurl4:amd64 (7.68.0-1) ...
Selecting previously unselected package libexpat1:amd64.
Preparing to unpack .../45-libexpat1_2.2.9-1_amd64.deb ...
Unpacking libexpat1:amd64 (2.2.9-1) ...
Selecting previously unselected package libjsoncpp1:amd64.
Preparing to unpack .../46-libjsoncpp1_1.7.4-3.1_amd64.deb ...
Unpacking libjsoncpp1:amd64 (1.7.4-3.1) ...
Selecting previously unselected package librhash0:amd64.
Preparing to unpack .../47-librhash0_1.3.9-1_amd64.deb ...
Unpacking librhash0:amd64 (1.3.9-1) ...
Selecting previously unselected package libuv1:amd64.
Preparing to unpack .../48-libuv1_1.34.2-1_amd64.deb ...
Unpacking libuv1:amd64 (1.34.2-1) ...
Selecting previously unselected package cmake.
Preparing to unpack .../49-cmake_3.16.3-1_amd64.deb ...
Unpacking cmake (3.16.3-1) ...
Selecting previously unselected package libtool.
Preparing to unpack .../50-libtool_2.4.6-13_all.deb ...
Unpacking libtool (2.4.6-13) ...
Selecting previously unselected package dh-autoreconf.
Preparing to unpack .../51-dh-autoreconf_19_all.deb ...
Unpacking dh-autoreconf (19) ...
Selecting previously unselected package libdebhelper-perl.
Preparing to unpack .../52-libdebhelper-perl_12.9_all.deb ...
Unpacking libdebhelper-perl (12.9) ...
Selecting previously unselected package libarchive-zip-perl.
Preparing to unpack .../53-libarchive-zip-perl_1.67-1_all.deb ...
Unpacking libarchive-zip-perl (1.67-1) ...
Selecting previously unselected package libsub-override-perl.
Preparing to unpack .../54-libsub-override-perl_0.09-2_all.deb ...
Unpacking libsub-override-perl (0.09-2) ...
Selecting previously unselected package libfile-stripnondeterminism-perl.
Preparing to unpack .../55-libfile-stripnondeterminism-perl_1.6.3-2_all.deb ...
Unpacking libfile-stripnondeterminism-perl (1.6.3-2) ...
Selecting previously unselected package dh-strip-nondeterminism.
Preparing to unpack .../56-dh-strip-nondeterminism_1.6.3-2_all.deb ...
Unpacking dh-strip-nondeterminism (1.6.3-2) ...
Selecting previously unselected package dwz.
Preparing to unpack .../57-dwz_0.13-5_amd64.deb ...
Unpacking dwz (0.13-5) ...
Selecting previously unselected package libglib2.0-0:amd64.
Preparing to unpack .../58-libglib2.0-0_2.62.4-2_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.62.4-2) ...
Selecting previously unselected package libcroco3:amd64.
Preparing to unpack .../59-libcroco3_0.6.13-1_amd64.deb ...
Unpacking libcroco3:amd64 (0.6.13-1) ...
Selecting previously unselected package gettext.
Preparing to unpack .../60-gettext_0.19.8.1-10_amd64.deb ...
Unpacking gettext (0.19.8.1-10) ...
Selecting previously unselected package intltool-debian.
Preparing to unpack .../61-intltool-debian_0.35.0+20060710.5_all.deb ...
Unpacking intltool-debian (0.35.0+20060710.5) ...
Selecting previously unselected package po-debconf.
Preparing to unpack .../62-po-debconf_1.0.21_all.deb ...
Unpacking po-debconf (1.0.21) ...
Selecting previously unselected package debhelper.
Preparing to unpack .../63-debhelper_12.9_all.deb ...
Unpacking debhelper (12.9) ...
Selecting previously unselected package icu-devtools.
Preparing to unpack .../64-icu-devtools_63.2-2_amd64.deb ...
Unpacking icu-devtools (63.2-2) ...
Selecting previously unselected package libicu-dev:amd64.
Preparing to unpack .../65-libicu-dev_63.2-2_amd64.deb ...
Unpacking libicu-dev:amd64 (63.2-2) ...
Selecting previously unselected package liblzo2-2:amd64.
Preparing to unpack .../66-liblzo2-2_2.10-2_amd64.deb ...
Unpacking liblzo2-2:amd64 (2.10-2) ...
Selecting previously unselected package libpkcs11-helper1:amd64.
Preparing to unpack .../67-libpkcs11-helper1_1.26-1_amd64.deb ...
Unpacking libpkcs11-helper1:amd64 (1.26-1) ...
Selecting previously unselected package libsqlite3-0:amd64.
Preparing to unpack .../68-libsqlite3-0_3.31.1-3_amd64.deb ...
Unpacking libsqlite3-0:amd64 (3.31.1-3) ...
Selecting previously unselected package libsqlite3-dev:amd64.
Preparing to unpack .../69-libsqlite3-dev_3.31.1-3_amd64.deb ...
Unpacking libsqlite3-dev:amd64 (3.31.1-3) ...
Selecting previously unselected package libssl-dev:amd64.
Preparing to unpack .../70-libssl-dev_1.1.1d-2_amd64.deb ...
Unpacking libssl-dev:amd64 (1.1.1d-2) ...
Selecting previously unselected package libxml2-dev:amd64.
Preparing to unpack .../71-libxml2-dev_2.9.10+dfsg-3_amd64.deb ...
Unpacking libxml2-dev:amd64 (2.9.10+dfsg-3) ...
Selecting previously unselected package libxslt1.1:amd64.
Preparing to unpack .../72-libxslt1.1_1.1.34-3_amd64.deb ...
Unpacking libxslt1.1:amd64 (1.1.34-3) ...
Selecting previously unselected package libxslt1-dev:amd64.
Preparing to unpack .../73-libxslt1-dev_1.1.34-3_amd64.deb ...
Unpacking libxslt1-dev:amd64 (1.1.34-3) ...
Selecting previously unselected package openvpn.
Preparing to unpack .../74-openvpn_2.4.7-1_amd64.deb ...
Unpacking openvpn (2.4.7-1) ...
Selecting previously unselected package pkg-config.
Preparing to unpack .../75-pkg-config_0.29-6_amd64.deb ...
Unpacking pkg-config (0.29-6) ...
Selecting previously unselected package sbuild-build-depends-main-dummy.
Preparing to unpack .../76-sbuild-build-depends-main-dummy_0.invalid.0_amd64.deb ...
Unpacking sbuild-build-depends-main-dummy (0.invalid.0) ...
Setting up libexpat1:amd64 (2.2.9-1) ...
Setting up libpipeline1:amd64 (1.5.2-2) ...
Setting up libkeyutils1:amd64 (1.6.1-2) ...
Setting up libpsl5:amd64 (0.20.2-2) ...
Setting up libmagic-mgc (1:5.38-4) ...
Setting up libarchive-zip-perl (1.67-1) ...
Setting up libglib2.0-0:amd64 (2.62.4-2) ...
No schema files found: doing nothing.
Setting up libssl1.1:amd64 (1.1.1d-2) ...
Setting up libdebhelper-perl (12.9) ...
Setting up libbrotli1:amd64 (1.0.7-6) ...
Setting up libsqlite3-0:amd64 (3.31.1-3) ...
Setting up libnghttp2-14:amd64 (1.40.0-1) ...
Setting up libmagic1:amd64 (1:5.38-4) ...
Setting up gettext-base (0.19.8.1-10) ...
Setting up liblzo2-2:amd64 (2.10-2) ...
Setting up file (1:5.38-4) ...
Setting up libldap-common (2.4.49+dfsg-1) ...
Setting up libpkcs11-helper1:amd64 (1.26-1) ...
Setting up libicu63:amd64 (63.2-2) ...
Setting up libcap2:amd64 (1:2.32-1) ...
Setting up libkrb5support0:amd64 (1.17-6) ...
Setting up libsasl2-modules-db:amd64 (2.1.27+dfsg-2) ...
Setting up libcap2-bin (1:2.32-1) ...
Setting up autotools-dev (20180224.1) ...
Setting up libuv1:amd64 (1.34.2-1) ...
Setting up libsqlite3-dev:amd64 (3.31.1-3) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b1) ...
Setting up libncurses6:amd64 (6.1+20191019-1) ...
Setting up libsigsegv2:amd64 (2.12-2) ...
Setting up bsdmainutils (11.1.2+b1) ...
update-alternatives: using /usr/bin/bsd-write to provide /usr/bin/write (write) in auto mode
update-alternatives: using /usr/bin/bsd-from to provide /usr/bin/from (from) in auto mode
Setting up libssl-dev:amd64 (1.1.1d-2) ...
Setting up libmnl0:amd64 (1.0.4-2+b1) ...
Setting up autopoint (0.19.8.1-10) ...
Setting up icu-devtools (63.2-2) ...
Setting up pkg-config (0.29-6) ...
Setting up libk5crypto3:amd64 (1.17-6) ...
Setting up libxtables12:amd64 (1.8.4-3) ...
Setting up libsasl2-2:amd64 (2.1.27+dfsg-2) ...
Setting up sensible-utils (0.0.12+nmu1) ...
Setting up librhash0:amd64 (1.3.9-1) ...
Setting up libuchardet0:amd64 (0.0.6-3) ...
Setting up libsub-override-perl (0.09-2) ...
Setting up libssh2-1:amd64 (1.8.0-2.1) ...
Setting up cmake-data (3.16.3-1) ...
Setting up libkrb5-3:amd64 (1.17-6) ...
Setting up libelf1:amd64 (0.176-1.1) ...
Setting up libicu-dev:amd64 (63.2-2) ...
Setting up libxml2:amd64 (2.9.10+dfsg-3) ...
Setting up libprocps8:amd64 (2:3.3.16-1+b1) ...
Setting up libjsoncpp1:amd64 (1.7.4-3.1) ...
Setting up libfile-stripnondeterminism-perl (1.6.3-2) ...
Setting up libtool (2.4.6-13) ...
Setting up libarchive13:amd64 (3.4.0-1+b1) ...
Setting up iproute2 (5.5.0-1) ...
Setting up libldap-2.4-2:amd64 (2.4.49+dfsg-1) ...
Setting up m4 (1.4.18-4) ...
Setting up libxml2-dev:amd64 (2.9.10+dfsg-3) ...
Setting up libgssapi-krb5-2:amd64 (1.17-6) ...
Setting up libcroco3:amd64 (0.6.13-1) ...
Setting up autoconf (2.69-11.1) ...
Setting up dh-strip-nondeterminism (1.6.3-2) ...
Setting up dwz (0.13-5) ...
Setting up groff-base (1.22.4-4) ...
Setting up procps (2:3.3.16-1+b1) ...
update-alternatives: using /usr/bin/w.procps to provide /usr/bin/w (w) in auto mode
Setting up libxslt1.1:amd64 (1.1.34-3) ...
Setting up libcurl4:amd64 (7.68.0-1) ...
Setting up automake (1:1.16.1-4) ...
update-alternatives: using /usr/bin/automake-1.16 to provide /usr/bin/automake (automake) in auto mode
Setting up gettext (0.19.8.1-10) ...
Setting up openvpn (2.4.7-1) ...
invoke-rc.d: could not determine current runlevel
All runlevel operations denied by policy
invoke-rc.d: policy-rc.d denied execution of cond-restart.
Setting up libxslt1-dev:amd64 (1.1.34-3) ...
Setting up man-db (2.9.0-2) ...
Not building database; man-db/auto-update is not 'true'.
Setting up intltool-debian (0.35.0+20060710.5) ...
Setting up cmake (3.16.3-1) ...
Setting up po-debconf (1.0.21) ...
Setting up dh-autoreconf (19) ...
Setting up debhelper (12.9) ...
Setting up sbuild-build-depends-main-dummy (0.invalid.0) ...
Processing triggers for libc-bin (2.29-10) ...

+------------------------------------------------------------------------------+
| Check architectures                                                          |
+------------------------------------------------------------------------------+

Arch check ok (amd64 included in any)

+------------------------------------------------------------------------------+
| Build environment                                                            |
+------------------------------------------------------------------------------+

Kernel: Linux 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) amd64 (x86_64)
Toolchain package versions: binutils_2.34-3 dpkg-dev_1.19.7 g++-9_9.2.1-30 gcc-9_9.2.1-30 libc6-dev_2.29-10 libstdc++-8-dev_8.3.0-29 libstdc++-9-dev_9.2.1-30 libstdc++6_10-20200222-1 linux-libc-dev_5.4.19-1
Package versions: adduser_3.118 apt_1.8.4 autoconf_2.69-11.1 automake_1:1.16.1-4 autopoint_0.19.8.1-10 autotools-dev_20180224.1 base-files_11 base-passwd_3.5.47 bash_5.0-6 binutils_2.34-3 binutils-common_2.34-3 binutils-x86-64-linux-gnu_2.34-3 bsdmainutils_11.1.2+b1 bsdutils_1:2.34-0.1 build-essential_12.8 bzip2_1.0.8-2 clang-8_1:8.0.1-7 cmake_3.16.3-1 cmake-data_3.16.3-1 coreutils_8.30-3+b1 cpp_4:9.2.1-3.1 cpp-9_9.2.1-30 dash_0.5.10.2-6 debconf_1.5.73 debhelper_12.9 debian-archive-keyring_2019.1 debianutils_4.9.1 dh-autoreconf_19 dh-strip-nondeterminism_1.6.3-2 diffutils_1:3.7-3 dpkg_1.19.7 dpkg-dev_1.19.7 dwz_0.13-5 e2fsprogs_1.45.5-2 fakeroot_1.24-1 fdisk_2.34-0.1 file_1:5.38-4 findutils_4.7.0-1 g++_4:9.2.1-3.1 g++-9_9.2.1-30 gcc_4:9.2.1-3.1 gcc-10-base_10-20200222-1 gcc-8-base_8.3.0-29 gcc-9_9.2.1-30 gcc-9-base_9.2.1-30 gettext_0.19.8.1-10 gettext-base_0.19.8.1-10 gpgv_2.2.19-1 grep_3.4-1 groff-base_1.22.4-4 gzip_1.9-3+b1 hostname_3.23 icu-devtools_63.2-2 init-system-helpers_1.57 intltool-debian_0.35.0+20060710.5 iproute2_5.5.0-1 lib32gcc-s1_10-20200222-1 lib32gcc1_1:10-20200222-1 lib32stdc++6_10-20200222-1 libacl1_2.2.53-5 libapt-pkg5.0_1.8.4 libarchive-zip-perl_1.67-1 libarchive13_3.4.0-1+b1 libasan5_9.2.1-30 libatomic1_10-20200222-1 libattr1_1:2.4.48-5 libaudit-common_1:2.8.5-2 libaudit1_1:2.8.5-2+b1 libbinutils_2.34-3 libblkid1_2.34-0.1 libbrotli1_1.0.7-6 libbsd0_0.10.0-1 libbz2-1.0_1.0.8-2 libc-bin_2.29-10 libc-dev-bin_2.29-10 libc6_2.29-10 libc6-dev_2.29-10 libc6-i386_2.29-10 libcap-ng0_0.7.9-2.1+b1 libcap2_1:2.32-1 libcap2-bin_1:2.32-1 libcc1-0_10-20200222-1 libclang-common-8-dev_1:8.0.1-7 libclang1-8_1:8.0.1-7 libcom-err2_1.45.5-2 libcroco3_0.6.13-1 libcrypt-dev_1:4.4.10-10 libcrypt1_1:4.4.10-10 libctf-nobfd0_2.34-3 libctf0_2.34-3 libcurl4_7.68.0-1 libdb5.3_5.3.28+dfsg1-0.6 libdebconfclient0_0.251 libdebhelper-perl_12.9 libdpkg-perl_1.19.7 libedit2_3.1-20191231-1 libelf1_0.176-1.1 libexpat1_2.2.9-1 libext2fs2_1.45.5-2 libfakeroot_1.24-1 libfdisk1_2.34-0.1 libffi7_3.3-3 libfile-stripnondeterminism-perl_1.6.3-2 libgc1c2_1:7.6.4-0.4 libgcc-8-dev_8.3.0-29 libgcc-9-dev_9.2.1-30 libgcc-s1_10-20200222-1 libgcc1_1:10-20200222-1 libgcrypt20_1.8.5-5 libgdbm-compat4_1.18.1-5 libgdbm6_1.18.1-5 libglib2.0-0_2.62.4-2 libgmp10_2:6.2.0+dfsg-4 libgnutls30_3.6.12-2 libgomp1_10-20200222-1 libgpg-error0_1.37-1 libgssapi-krb5-2_1.17-6 libhogweed5_3.5.1+really3.5.1-2 libicu-dev_63.2-2 libicu63_63.2-2 libidn2-0_2.2.0-2 libisl22_0.22.1-1 libitm1_10-20200222-1 libjsoncpp1_1.7.4-3.1 libk5crypto3_1.17-6 libkeyutils1_1.6.1-2 libkrb5-3_1.17-6 libkrb5support0_1.17-6 libldap-2.4-2_2.4.49+dfsg-1 libldap-common_2.4.49+dfsg-1 libllvm8_1:8.0.1-7 liblsan0_10-20200222-1 liblz4-1_1.9.2-2 liblzma5_5.2.4-1+b1 liblzo2-2_2.10-2 libmagic-mgc_1:5.38-4 libmagic1_1:5.38-4 libmnl0_1.0.4-2+b1 libmount1_2.34-0.1 libmpc3_1.1.0-1 libmpfr6_4.0.2-1 libmpx2_8.3.0-29 libncurses6_6.1+20191019-1 libncursesw6_6.1+20191019-1 libnettle7_3.5.1+really3.5.1-2 libnghttp2-14_1.40.0-1 libobjc-8-dev_8.3.0-29 libobjc-9-dev_9.2.1-30 libobjc4_10-20200222-1 libomp-8-dev_1:8.0.1-7 libomp5-8_1:8.0.1-7 libp11-kit0_0.23.20-1 libpam-modules_1.3.1-5 libpam-modules-bin_1.3.1-5 libpam-runtime_1.3.1-5 libpam0g_1.3.1-5 libpcre2-8-0_10.34-7 libpcre3_2:8.39-12+b1 libperl5.30_5.30.0-9 libpipeline1_1.5.2-2 libpkcs11-helper1_1.26-1 libprocps8_2:3.3.16-1+b1 libpsl5_0.20.2-2 libquadmath0_10-20200222-1 librhash0_1.3.9-1 librtmp1_2.4+20151223.gitfa8646d.1-2+b1 libsasl2-2_2.1.27+dfsg-2 libsasl2-modules-db_2.1.27+dfsg-2 libseccomp2_2.4.2-2 libselinux1_3.0-1+b1 libsemanage-common_3.0-1 libsemanage1_3.0-1+b1 libsepol1_3.0-1 libsigsegv2_2.12-2 libsmartcols1_2.34-0.1 libsqlite3-0_3.31.1-3 libsqlite3-dev_3.31.1-3 libss2_1.45.5-2 libssh2-1_1.8.0-2.1 libssl-dev_1.1.1d-2 libssl1.1_1.1.1d-2 libstdc++-8-dev_8.3.0-29 libstdc++-9-dev_9.2.1-30 libstdc++6_10-20200222-1 libsub-override-perl_0.09-2 libsystemd0_244.3-1 libtasn1-6_4.16.0-2 libtinfo6_6.1+20191019-1 libtool_2.4.6-13 libtsan0_10-20200222-1 libubsan1_10-20200222-1 libuchardet0_0.0.6-3 libudev1_244.3-1 libunistring2_0.9.10-2 libuuid1_2.34-0.1 libuv1_1.34.2-1 libxml2_2.9.10+dfsg-3 libxml2-dev_2.9.10+dfsg-3 libxslt1-dev_1.1.34-3 libxslt1.1_1.1.34-3 libxtables12_1.8.4-3 libzstd1_1.4.4+dfsg-3 linux-libc-dev_5.4.19-1 login_1:4.8.1-1 logsave_1.45.5-2 lsb-base_11.1.0 m4_1.4.18-4 make_4.2.1-1.2 man-db_2.9.0-2 mawk_1.3.4.20200120-2 mount_2.34-0.1 ncurses-base_6.1+20191019-1 ncurses-bin_6.1+20191019-1 openvpn_2.4.7-1 passwd_1:4.8.1-1 patch_2.7.6-6 perl_5.30.0-9 perl-base_5.30.0-9 perl-modules-5.30_5.30.0-9 pkg-config_0.29-6 po-debconf_1.0.21 procps_2:3.3.16-1+b1 sbuild-build-depends-main-dummy_0.invalid.0 sed_4.7-1 sensible-utils_0.0.12+nmu1 sysvinit-utils_2.96-2.1 tar_1.30+dfsg-6+b1 tzdata_2019c-3 util-linux_2.34-0.1 xz-utils_5.2.4-1+b1 zlib1g_1:1.2.11.dfsg-2

+------------------------------------------------------------------------------+
| Build                                                                        |
+------------------------------------------------------------------------------+


Unpack source
-------------

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: eurephia
Binary: eurephia
Architecture: any
Version: 1.1.0-6
Maintainer: Alberto Gonzalez Iniesta <agi@inittab.org>
Homepage: http://www.eurephia.net/
Standards-Version: 3.9.4
Build-Depends: debhelper (>= 9), openvpn (>= 2), cmake, libssl-dev, libxslt1-dev, libxml2-dev, libsqlite3-dev, pkg-config
Package-List:
 eurephia deb net extra arch=any
Checksums-Sha1:
 7a41215ffe4f9cfbed9561051ba547aa38f91c35 158132 eurephia_1.1.0.orig.tar.bz2
 4b1669a80e71cc5f2f1c4103fbd08063cf19797c 5380 eurephia_1.1.0-6.debian.tar.xz
Checksums-Sha256:
 eb96a4a41cb0ff2a20dc94e385ac658720b1d87d2a0a3b329c5b50dd1b0e372c 158132 eurephia_1.1.0.orig.tar.bz2
 d3b49c53fee2cd6e3f9ece93473272af6a9c4b5cbb999f33969849307f113141 5380 eurephia_1.1.0-6.debian.tar.xz
Files:
 b902119628931a45c7a84ed3d1bb1513 158132 eurephia_1.1.0.orig.tar.bz2
 56558b271002de7bc26b0ddd71ca2e29 5380 eurephia_1.1.0-6.debian.tar.xz

-----BEGIN PGP SIGNATURE-----

iQItBAEBCAAXBQJX26LHEBxhZ2lAaW5pdHRhYi5vcmcACgkQAJszdWuaqlUzww//
bzmI8zicA5YIPrRGuM6tA4lPHMFOnWvPoh1/Msjk1AuyJH51TARcN1LCnORFP8Af
13NqEWcN5PmIHD4FkYG+oEJGFqIjTuqfMrMK1laVpQpMBYDubWHRfgb52irVSs2R
DOWl0Vw3xA/Sdvp13Cm0LXxTqVqLFg/JKugaw9Bm1tab8lsVsU7RENt1HU8AEA29
ZZTwvxQ3TBL5EgZUN0a8pt+p1k6u9se3H8lwgsHgls0SWQUerQBk05TEBMhnWchz
JMzsqBYq8e6iIUxJqJabpb2LDeX4C+rgq1CeeF5fPx7EM5ctgP40LE0qEC4950SN
B4T+QYQTV9rtNjpMPfrjTtTWuOTxaKr+iUf+vYUIEHGoNuAkTz7J7wxml5qozkBk
+8/m+0sq7wSuNjjfYZDPG/6WGEyS7PBKaAHMu/z4gTsjeICypyY2oIeahWCOR3vB
FKyRE6TP2FoRzdUf9S+EWVJTBoUhe217HcZmvZGEhg2GJGKG6eovUGFBSXodXHU7
kWHKkCLOMD1vCFmGXby1lojZxKi2WrL/vp1Q6fYIOz0Qj6ydJup12YHWg9IifAfx
8x3CuFwmq5+XaJQSExRWwPIBtj4KV2Z5FDMpZWWkwL0eBK9jpKIHGf6zuJrGlhNR
XMGujbMa1PBMdPQLhtMKBjOB8mvpYsmgCGYG95dmGBk=
=DP+d
-----END PGP SIGNATURE-----

gpgv: unknown type of key resource 'trustedkeys.kbx'
gpgv: keyblock resource '/sbuild-nonexistent/.gnupg/trustedkeys.kbx': General error
gpgv: Signature made Fri Sep 16 07:44:07 2016 UTC
gpgv:                using RSA key 009B33756B9AAA55
gpgv:                issuer "agi@inittab.org"
gpgv: Can't check signature: No public key
dpkg-source: warning: failed to verify signature on ./eurephia_1.1.0-6.dsc
dpkg-source: info: extracting eurephia in /<<PKGBUILDDIR>>
dpkg-source: info: unpacking eurephia_1.1.0.orig.tar.bz2
dpkg-source: info: unpacking eurephia_1.1.0-6.debian.tar.xz
dpkg-source: info: using patch list from debian/patches/series
dpkg-source: info: applying double-free.patch
dpkg-source: info: applying sql-error-handling.patch
dpkg-source: info: applying ldflags.patch
dpkg-source: info: applying reproducible-build.patch

Check disk space
----------------

Sufficient free space for build

User Environment
----------------

APT_CONFIG=/var/lib/sbuild/apt.conf
HOME=/sbuild-nonexistent
LANG=C.UTF-8
LC_ALL=C.UTF-8
LOGNAME=user42
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
SCHROOT_ALIAS_NAME=unstable
SCHROOT_CHROOT_NAME=sid-amd64-sbuild
SCHROOT_COMMAND=env
SCHROOT_GID=1001
SCHROOT_GROUP=user42
SCHROOT_SESSION_ID=sid-amd64-sbuild-d7e3bef9-eb24-4c33-aac1-e78aa49bb979
SCHROOT_UID=1001
SCHROOT_USER=user42
SHELL=/bin/sh
USER=user42

dpkg-buildpackage
-----------------

Command: dpkg-buildpackage -us -uc -b -rfakeroot
dpkg-buildpackage: info: source package eurephia
dpkg-buildpackage: info: source version 1.1.0-6
dpkg-buildpackage: info: source distribution unstable
dpkg-buildpackage: info: source changed by Alberto Gonzalez Iniesta <agi@inittab.org>
 dpkg-source --before-build .
dpkg-buildpackage: info: host architecture amd64
 fakeroot debian/rules clean
dh clean
   debian/rules override_dh_auto_clean
make[1]: Entering directory '/<<PKGBUILDDIR>>'
rm -rf configure.log
dh_auto_clean
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_clean
 debian/rules build
dh build
   dh_update_autotools_config
   debian/rules override_dh_auto_configure
make[1]: Entering directory '/<<PKGBUILDDIR>>'
CFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89" CPPFLAGS="-Wdate-time -D_FORTIFY_SOURCE=2" CXXFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" FCFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" FFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" GCJFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong" LDFLAGS="-Wl,-z,relro" OBJCFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security" OBJCXXFLAGS="-g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security"  ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn
#
# Configure run at Tue Feb 25 18:53:56 UTC 2020
# Linux ip-172-31-6-46 4.19.0-6-cloud-amd64 #1 SMP Debian 4.19.67-2+deb10u2 (2019-11-11) x86_64 GNU/Linux
#
# ./configure --prefix /usr --plug-in --fw-iptables --db-sqlite3 --sqlite3-path /var/lib/eurephia --eurephiadm --openvpn-src /usr/include/openvpn

Using cmake version 3.16.3

CMake suite maintained and supported by Kitware (kitware.com/cmake).
CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  the old evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  but the new evaluation rules produce:

    '
    #if defined(__VISUALDSPVERSION__)
      /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
    #endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  the old evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  but the new evaluation rules produce:

    '
    #if __ARMCC_VERSION >= 1000000
      /* __ARMCC_VERSION = VRRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
    #else
      /* __ARMCC_VERSION = VRPPPP */
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
    #endif
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  the old evaluation rules produce:

    '
      # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  but the new evaluation rules produce:

    '
      # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
      # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
      # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake:9 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake:6 (string):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  the old evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  but the new evaluation rules produce:

    '
      /* __BORLANDC__ = 0xVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake:12 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  the old evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  but the new evaluation rules produce:

    '
      /* __DECC_VER = VVRRTPPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  the old evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  but the new evaluation rules produce:

    '
    /* __GHS_VERSION_NUMBER = VVVVRP */
    # ifdef __GHS_VERSION_NUMBER
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  the old evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  but the new evaluation rules produce:

    '
      /* __HP_cc = VVRRPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake:28 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define /usrCOMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__VER__) && defined(__ICCARM__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
    #  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define /usrSIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
      /* __INTEL_COMPILER = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
    # if defined(__INTEL_COMPILER_UPDATE)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
    # else
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
    # endif
    # if defined(__INTEL_COMPILER_BUILD_DATE)
      /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
    # elif defined(__GNUG__)
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
    # endif
    # if defined(__GNUC_MINOR__)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
    # endif
    # if defined(__GNUC_PATCHLEVEL__)
    #  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake:34 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID \"GNU\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define /usrSIMULATE_ID "GNU"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif
    # if defined(__GNUC__)
    #  define @PREFIX@SIMULATE_ID "GNU"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  the old evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  but the new evaluation rules produce:

    '
      /* _MSC_VER = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # if defined(_MSC_FULL_VER)
    #  if _MSC_VER >= 1400
        /* _MSC_FULL_VER = VVRRPPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
    #  else
        /* _MSC_FULL_VER = VVRRPPPP */
    #   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
    #  endif
    # endif
    # if defined(_MSC_BUILD)
    #  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  the old evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define /usrSIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define /usrSIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
    # endif
    # if defined(_MSC_VER)
       /* _MSC_VER = VVRR */
    #  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
    #  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake:16 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID \"MSVC\"
    # endif'

  the old evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define /usrSIMULATE_ID "MSVC"
    # endif'

  but the new evaluation rules produce:

    '
    # if defined(_MSC_VER)
    #  define @PREFIX@SIMULATE_ID "MSVC"
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRP + 1100 */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
    # if defined(__PGIC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
    # if defined(__PATHCC_PATCHLEVEL__)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  the old evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define /usrCOMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define /usrCOMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  but the new evaluation rules produce:

    '
    # if __SUNPRO_C >= 0x5100
       /* __SUNPRO_C = 0xVRRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # else
       /* __SUNPRO_CC = 0xVRP */
    #  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
    #  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  the old evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  but the new evaluation rules produce:

    '
      /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake:4 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  the old evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  but the new evaluation rules produce:

    '
       /* __WATCOMC__ = VVRR */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
    # if (__WATCOMC__ % 10) > 0
    #  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
    # endif'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake:3 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  the old evaluation rules produce:

    '
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define /usrCOMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  but the new evaluation rules produce:

    '
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
    # define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
    '

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake:2 (set):
  Policy CMP0053 is not set: Simplify variable reference and escape sequence
  evaluation.  Run "cmake --help-policy CMP0053" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  For input:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  the old evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define /usrCOMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define /usrCOMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define /usrCOMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  but the new evaluation rules produce:

    '
      /* __IBMC__ = VRP */
    # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
    # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
    # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10)'

  Using the old result for compatibility since the policy is not set.
Call Stack (most recent call first):
  /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake:4 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:6 (include)
  /usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake:32 (_readFile)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:211 (compiler_id_detection)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:230 (CMAKE_DETERMINE_COMPILER_ID_WRITE)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake:32 (CMAKE_DETERMINE_COMPILER_ID_BUILD)
  /usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake:116 (CMAKE_DETERMINE_COMPILER_ID)
  CMakeLists.txt:20 (PROJECT)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is unknown
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Found PkgConfig: /usr/bin/pkg-config (found version "0.29") 
-- Build Platform: Linux
-- Will build database interface for SQLite
-- Will build command line based admin utility
-- Building eurephia plug-in for OpenVPN
-- Looking for endian.h
-- Looking for endian.h - found
-- Looking for dlfcn.h
-- Looking for dlfcn.h - found
-- Looking for dlopen in dl
-- Looking for dlopen in dl - found
-- Looking for dlclose in dl
-- Looking for dlclose in dl - found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_mutex_lock in pthread
-- Looking for pthread_mutex_lock in pthread - found
-- Looking for pthread_mutex_unlock in pthread
-- Looking for pthread_mutex_unlock in pthread - found
-- Checking for one of the modules 'openssl'
-- Looking for RAND_load_file in crypto
-- Looking for RAND_load_file in crypto - found
-- Looking for RAND_pseudo_bytes in crypto
-- Looking for RAND_pseudo_bytes in crypto - found
-- Checking for one of the modules 'libxml-2.0;libxml2;libxml>=2.6'
-- Checking for one of the modules 'libxslt'
-- Checking for one of the modules 'sqlite3'
-- sqlite3 binary was not found.  You will need to generate the database file on your own
-- Looking for sem_wait in rt
-- Looking for sem_wait in rt - not found
-- Looking for sem_timedwait in rt
-- Looking for sem_timedwait in rt - not found
-- Looking for sem_post in rt
-- Looking for sem_post in rt - not found
-- * sem_wait was not found in librt, trying libpthread
-- Looking for sem_wait in pthread
-- Looking for sem_wait in pthread - found
-- * sem_timedwait was not found in librt, trying libpthread
-- Looking for sem_timedwait in pthread
-- Looking for sem_timedwait in pthread - found
-- * sem_post was not found in librt, trying libpthread
-- Looking for sem_post in pthread
-- Looking for sem_post in pthread - found
-- Looking for mq_open in rt
-- Looking for mq_open in rt - found
-- Looking for mq_close in rt
-- Looking for mq_close in rt - found
-- Looking for mq_unlink in rt
-- Looking for mq_unlink in rt - found
-- Looking for mq_send in rt
-- Looking for mq_send in rt - found
-- Looking for mq_receive in rt
-- Looking for mq_receive in rt - found
-- Looking for mq_getattr in rt
-- Looking for mq_getattr in rt - found
-- Will build iptables firewall module
-- Configuring done
-- Generating done
CMake Warning:
  Manually-specified variables were not used by the project:

    SQLITE3PREFIX


-- Build files have been written to: /<<PKGBUILDDIR>>

Building options:
                 CFLAGS: -g -O2 -fdebug-prefix-map=/<<PKGBUILDDIR>>=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -std=gnu89 -fno-delete-null-pointer-checks -g -Wall -Wpointer-arith

eurephia will be built with support for: 

               Database: SQLite3 
               Firewall: iptables 
        OpenVPN plug-in: eurephia-auth
            Admin tools: eurephiadm 

         Install prefix: /usr
           Binaries dir: /usr/bin
          Man pages dir: /usr/share/man
           Plug-in path: /usr/lib/eurephia
         XSLT base path: /usr/share/eurephia/xslt
   eurephiadm XSLT path: /usr/share/eurephia/xslt/eurephiadm
  SQLite3 database path: /var/lib/eurephia


make[1]: Leaving directory '/<<PKGBUILDDIR>>'
   dh_auto_build
	make -j1
make[1]: Entering directory '/<<PKGBUILDDIR>>'
make[2]: Entering directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target eurephiacommon
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[  1%] Building C object common/CMakeFiles/eurephiacommon.dir/certinfo.c.o
[  2%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_getsym.c.o
[  4%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_log.c.o
[  5%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_nullsafe.c.o
[  6%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_values.c.o
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
        if( (vls == NULL) ) {
             ~~~~^~~~~~~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: remove extraneous parentheses around the comparison to silence this warning
        if( (vls == NULL) ) {
            ~    ^      ~
/<<PKGBUILDDIR>>/common/eurephia_values.c:79:18: note: use '=' to turn this equality comparison into an assignment
        if( (vls == NULL) ) {
                 ^~
                 =
1 warning generated.
[  8%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_cfgfile.c.o
[  9%] Building C object common/CMakeFiles/eurephiacommon.dir/passwd.c.o
[ 11%] Building C object common/CMakeFiles/eurephiacommon.dir/randstr.c.o
/<<PKGBUILDDIR>>/common/randstr.c:65:21: warning: 'RAND_pseudo_bytes' is deprecated [-Wdeprecated-declarations]
                if( RAND_pseudo_bytes((unsigned char *) rndstr, len) ) {
                    ^
/usr/include/openssl/rand.h:44:1: note: 'RAND_pseudo_bytes' has been explicitly marked deprecated here
DEPRECATEDIN_1_1_0(int RAND_pseudo_bytes(unsigned char *buf, int num))
^
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h:152:34: note: expanded from macro 'DEPRECATEDIN_1_1_0'
# define DEPRECATEDIN_1_1_0(f)   DECLARE_DEPRECATED(f)
                                 ^
/usr/include/x86_64-linux-gnu/openssl/opensslconf.h:115:55: note: expanded from macro 'DECLARE_DEPRECATED'
#   define DECLARE_DEPRECATED(f)    f __attribute__ ((deprecated));
                                                      ^
1 warning generated.
[ 12%] Building C object common/CMakeFiles/eurephiacommon.dir/sha512.c.o
[ 13%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb.c.o
[ 15%] Building C object common/CMakeFiles/eurephiacommon.dir/eurephia_xml.c.o
/<<PKGBUILDDIR>>/common/eurephia_xml.c:227:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrVPrintf(msg, 2048, xmlfmt, ap);
                                 ^~~~~~
/usr/include/libxml2/libxml/xmlstring.h:105:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
1 warning generated.
[ 16%] Building C object common/CMakeFiles/eurephiacommon.dir/__/database/eurephiadb_mapping.c.o
[ 18%] Linking C static library libeurephiacommon.a
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 18%] Built target eurephiacommon
make[3]: Entering directory '/<<PKGBUILDDIR>>'
Scanning dependencies of target edb-sqlite
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 19%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/sqlite.c.o
[ 20%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/edb-sqlite.c.o
[ 22%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/__/__/common/eurephiadb_session_common.c.o
[ 23%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/authentication.c.o
[ 25%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/firewalladmin.c.o
[ 26%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/attempts.c.o
[ 27%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/blacklist.c.o
[ 29%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/usercerts.c.o
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:104:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:120:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 7));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/usercerts.c:124:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 8));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
4 warnings generated.
[ 30%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/configuration.c.o
[ 31%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/useraccount.c.o
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:39: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                      ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:423:58: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(uid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                   ~~~   ^~~~~~~~~~~~~~~~~~~
                                                   %lld
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:34: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                 ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/useraccount.c:468:53: warning: format specifies type 'long' but the argument has type 'int' [-Wformat]
        xmlStrPrintf(xmluid, 32, (xmlChar *) "%ld", uid);
                                              ~~~   ^~~
                                              %d
4 warnings generated.
[ 33%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/certificates.c.o
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:31: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                              ^~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:103:49: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
        xmlStrPrintf(tmp, 64, (xmlChar *) "%i", sqlite_get_numtuples(res));
                                           ~~   ^~~~~~~~~~~~~~~~~~~~~~~~~
                                           %lu
/<<PKGBUILDDIR>>/database/sqlite/administration/../sqlite.h:173:37: note: expanded from macro 'sqlite_get_numtuples'
#define sqlite_get_numtuples(dbres) (dbres != NULL ? dbres->num_tuples : 0)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:114:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 2));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:118:41: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(tmp, 2048, (xmlChar *) "%.2048s", sqlite_get_value(res, i, 3));
                                        ^~~~~~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:42: warning: passing 'xmlChar *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types with different sign [-Wpointer-sign]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                         ^~~~~~~~~~~~~~~~~
/usr/include/libxml2/libxml/xmlstring.h:100:54: note: passing argument to parameter 'msg' here
                                         const char *msg,
                                                     ^
/<<PKGBUILDDIR>>/database/sqlite/administration/certificates.c:176:61: warning: format specifies type 'long' but the argument has type 'sqlite_int64' (aka 'long long') [-Wformat]
                xmlStrPrintf(certid, 32, (xmlChar *) "%ld", res->last_insert_id);
                                                      ~~~   ^~~~~~~~~~~~~~~~~~~
                                                      %lld
6 warnings generated.
[ 34%] Building C object database/sqlite/CMakeFiles/edb-sqlite.dir/administration/lastlog.c.o
[ 36%] Linking C shared library edb-sqlite.so
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
[ 37%] Built target edb-sqlite
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 38%] Creating buildinfo.h
./mk_buildinfo.sh: 30: [[: not found
./mk_buildinfo.sh: 60: [[: not found
Scanning dependencies of target eurephiadm
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[3]: Entering directory '/<<PKGBUILDDIR>>'
[ 40%] Building C object eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:203:47: error: function definition is not allowed here
        void dump_values(eurephiaVALUES *vls) {
                                              ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:216:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(cfg);
                ^
/<<PKGBUILDDIR>>/eurephiadm/eurephiadm.c:221:17: warning: implicit declaration of function 'dump_values' [-Wimplicit-function-declaration]
                dump_values(ctx->dbc->config);
                ^
2 warnings and 1 error generated.
make[3]: *** [eurephiadm/CMakeFiles/eurephiadm.dir/build.make:67: eurephiadm/CMakeFiles/eurephiadm.dir/eurephiadm.c.o] Error 1
make[3]: Leaving directory '/<<PKGBUILDDIR>>'
make[2]: *** [CMakeFiles/Makefile2:281: eurephiadm/CMakeFiles/eurephiadm.dir/all] Error 2
make[2]: Leaving directory '/<<PKGBUILDDIR>>'
make[1]: *** [Makefile:130: all] Error 2
make[1]: Leaving directory '/<<PKGBUILDDIR>>'
dh_auto_build: error: make -j1 returned exit code 2
make: *** [debian/rules:3: build] Error 25
dpkg-buildpackage: error: debian/rules build subprocess returned exit status 2
--------------------------------------------------------------------------------
Build finished at 2020-02-25T18:54:03Z

Finished
--------


+------------------------------------------------------------------------------+
| Cleanup                                                                      |
+------------------------------------------------------------------------------+

Purging /<<BUILDDIR>>
Not cleaning session: cloned chroot in use
E: Build failure (dpkg-buildpackage died)

+------------------------------------------------------------------------------+
| Summary                                                                      |
+------------------------------------------------------------------------------+

Build Architecture: amd64
Build Type: binary
Build-Space: 4876
Build-Time: 7
Distribution: unstable
Fail-Stage: build
Host Architecture: amd64
Install-Time: 8
Job: eurephia_1.1.0-6
Machine Architecture: amd64
Package: eurephia
Package-Time: 31
Source-Version: 1.1.0-6
Space: 4876
Status: attempted
Version: 1.1.0-6
--------------------------------------------------------------------------------
Finished at 2020-02-25T18:54:03Z
Build needed 00:00:31, 4876k disk space
E: Build failure (dpkg-buildpackage died)
DC-Status: Failed 31.954254478s
